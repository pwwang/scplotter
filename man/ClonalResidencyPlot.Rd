% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clonalcompositionplot.R
\name{ClonalResidencyPlot}
\alias{ClonalResidencyPlot}
\title{ClonalResidencyPlot}
\usage{
ClonalResidencyPlot(
  data,
  clone_call = "aa",
  chain = "both",
  plot_type = c("scatter", "venn", "upset"),
  group_by = "Sample",
  groups = NULL,
  facet_by = NULL,
  split_by = NULL,
  split_by_sep = "_",
  scatter_cor = "pearson",
  scatter_size_by = c("max", "total"),
  order = list(),
  combine = TRUE,
  nrow = NULL,
  ncol = NULL,
  byrow = TRUE,
  ...
)
}
\arguments{
\item{data}{The product of \link[scRepertoire:combineTCR]{scRepertoire::combineTCR}, \link[scRepertoire:combineTCR]{scRepertoire::combineTCR}, or
\link[scRepertoire:combineExpression]{scRepertoire::combineExpression}.}

\item{clone_call}{How to call the clone - VDJC gene (gene), CDR3 nucleotide (nt),
CDR3 amino acid (aa), VDJC gene + CDR3 nucleotide (strict) or a custom variable
in the data}

\item{chain}{indicate if both or a specific chain should be used - e.g. "both",
"TRA", "TRG", "IGH", "IGL"}

\item{plot_type}{The type of plot to use. Default is "scatter".
Possible values are "scatter", "venn", and "upset".}

\item{group_by}{The column name in the meta data to group the cells. Default: "Sample"}

\item{groups}{The groups to compare. Default is NULL.
If NULL, all the groups in \code{group_by} will be compared.
Note that for "scatter" plot, only two groups can be compared. So when there are more than two groups,
the combination of the pairs will be used.
For "scatter" plot, the groups can be specified as the comparisons separated by ":", e.g. "L:B", "Y:X".}

\item{facet_by}{The column name in the meta data to facet the plots. Default: NULL}

\item{split_by}{The column name in the meta data to split the plots. Default: NULL}

\item{split_by_sep}{The separator used to concatenate the split_by when multiple columns are used.}

\item{scatter_cor}{The correlation method to use for the scatter plot. Default is "pearson".}

\item{scatter_size_by}{The size of the points in the scatter plot. Default is "max".
Possible values are "max" and "total".
\itemize{
\item "max" - The max size of the clone in the two groups.
\item "total" - The total size of the clone in the two groups.
}}

\item{order}{The order of the x-axis items or groups. Default is an empty list.
It should be a list of values. The names are the column names, and the values are the order.}

\item{combine}{Whether to combine the plots into a single plot. Default is TRUE.}

\item{nrow}{The number of rows in the combined plot. Default is NULL.}

\item{ncol}{The number of columns in the combined plot. Default is NULL.}

\item{byrow}{Whether to fill the combined plot by row. Default is TRUE.}

\item{...}{Other arguments passed to the specific plot function.
\itemize{
\item For \code{scatter} plot, see \code{\link[plotthis:ScatterPlot]{plotthis::ScatterPlot()}}.
\item For \code{venn} plot, see \code{\link[plotthis:VennDiagram]{plotthis::VennDiagram()}}.
\item For \code{upset} plot, see \code{\link[plotthis:UpsetPlot]{plotthis::UpsetPlot()}}.
}}
}
\value{
A ggplot object or a list if \code{combine} is FALSE
}
\description{
Plot the residency of the clones in different samples.
}
\examples{
\donttest{
set.seed(8525)
data(contig_list, package = "scRepertoire")
data <- scRepertoire::combineTCR(contig_list,
    samples = c("P17B", "P17L", "P18B", "P18L", "P19B","P19L", "P20B", "P20L"))
data <- scRepertoire::addVariable(data,
    variable.name = "Type",
    variables = rep(c("B", "L", "X", "Y"), 2)
)
data <- scRepertoire::addVariable(data,
    variable.name = "Subject",
    variables = rep(c("P17", "P18", "P19", "P20"), each = 2)
)

ClonalResidencyPlot(data, groups = c("P18B", "P18L"))
ClonalResidencyPlot(data, group_by = "Type", groups = c("L", "B"),
 split_by = "Subject")
ClonalResidencyPlot(data, group_by = "Type", groups = c("L:B", "Y:X"),
 split_by = "Subject")
ClonalResidencyPlot(data, plot_type = "venn", groups = c("B", "L"),
 group_by = "Type", split_by = "Subject")
ClonalResidencyPlot(data, plot_type = "upset", groups = c("P18B", "P18L"))
}
}
