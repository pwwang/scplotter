% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clonalutils.R
\name{CloneSelectors}
\alias{CloneSelectors}
\alias{top}
\alias{sel}
\alias{uniq}
\alias{shared}
\alias{gt}
\alias{ge}
\alias{lt}
\alias{le}
\alias{eq}
\alias{ne}
\alias{and}
\alias{or}
\title{Helper functions to select clones based on various criteria}
\usage{
top(
  n,
  groups = NULL,
  data = NULL,
  order = NULL,
  id = NULL,
  in_form = NULL,
  return_ids = NULL
)

sel(
  expr,
  groups = NULL,
  data = NULL,
  id = NULL,
  in_form = NULL,
  return_ids = NULL
)

uniq(
  group1,
  group2,
  ...,
  groups = NULL,
  data = NULL,
  id = NULL,
  in_form = NULL,
  return_ids = NULL
)

shared(
  group1,
  group2,
  ...,
  groups = NULL,
  data = NULL,
  id = NULL,
  in_form = NULL,
  return_ids = NULL
)

gt(
  group1,
  group2,
  include_zeros = TRUE,
  groups = NULL,
  data = NULL,
  id = NULL,
  in_form = NULL,
  return_ids = NULL
)

ge(
  group1,
  group2,
  include_zeros = TRUE,
  groups = NULL,
  data = NULL,
  id = NULL,
  in_form = NULL,
  return_ids = NULL
)

lt(
  group1,
  group2,
  include_zeros = TRUE,
  groups = NULL,
  data = NULL,
  id = NULL,
  in_form = NULL,
  return_ids = NULL
)

le(
  group1,
  group2,
  include_zeros = TRUE,
  groups = NULL,
  data = NULL,
  id = NULL,
  in_form = NULL,
  return_ids = NULL
)

eq(
  group1,
  group2,
  groups = NULL,
  data = NULL,
  id = NULL,
  in_form = NULL,
  return_ids = NULL
)

ne(
  group1,
  group2,
  include_zeros = TRUE,
  groups = NULL,
  data = NULL,
  id = NULL,
  in_form = NULL,
  return_ids = NULL
)

and(x, y)

or(x, y)
}
\arguments{
\item{n}{The number of top clones to select or the threshold size.}

\item{groups}{The column names in the meta data to group the cells.
By default, it is assumed \code{facet_by} and \code{split_by} to be in the parent frame if used in scplotter functions.
When used in dplyr verbs, it should be a character vector of the grouping columns, where the first column is used to
extract the values (count) for \code{group1}, \code{group2}, and \code{...} and the rest are used to keep the groupings.}

\item{data}{The data frame containing clone information. Default is NULL. If NULL,
when used in scplotter functions, it will get data from parent.frame.
A typical \code{data} should have a column named \code{CloneID} and other columns for the groupings.
Supposingly it should be a grouped data frame with the grouping columns.
Under each grouping column, the value should be the size of the clone.
By default, the data is assumed to be in the parent frame.
When used in dplyr verbs, it should be the parent data frame passed to the dplyr verb.}

\item{order}{The order of the clones to select. It can be an expression to order the clones by a specific column. Only used in \code{top()}.}

\item{id}{The column name that contains the clone ID. Default is "CTaa".}

\item{in_form}{The format of the input data. It can be "long" or "wide".
If "long", the data should be in a long format with a column for the clone IDs and a column for the size.
If "wide", the data should be in a wide format with columns for the clone IDs and the size for each group.
When used in dplyr verbs, it should be "long" by default.
If used in scplotter functions, it should be "wide" by default.#'}

\item{return_ids}{If TRUE, the function returns a vector with the same length as the data, with CTaa values for selected clones and NA for others.
If FALSE, it returns a subset data frame with only the selected clones.
Default is NULL, which will be determined based on the data. If the function is used in a context of dplyr verbs, it defaults to TRUE.
Otherwise, it defaults to FALSE.}

\item{expr}{The expression (in characters) to filter the clones
(e.g. "group1 > group2" to select clones where group1 is larger than group2).}

\item{group1}{The first group to compare.}

\item{group2}{The second group to compare.}

\item{...}{More groups to compare.}

\item{include_zeros}{Whether to include clones with zero size in the comparison.
If TRUE, in a comparison (s1 > s2) for a clone to be selected, both s1 and s2 must be greater than 0.
If FALSE, only the first group must be greater than the second group.}

\item{x}{The first vector to compare in logical operations (and/or).}

\item{y}{The second vector to compare in logical operations (and/or).}
}
\value{
A vector of CTaas or a data frame with the selected clones based on the criteria.
}
\description{
These helper functions allow for the selection of clones based on various criteria such as size, group comparison, and existence in specific groups.
}
\details{
These helper functions are designed to be used in a dplyr pipeline or used internally in other scplotter
functions to select clones based on various criteria.
\itemize{
\item When used in a dplyr pipeline, they will return a vector with the same length as the input data, with the selected
clones' CTaa values (clone IDs) and NA for others. It is useful for adding a new column to the data frame. For the
functions that need \code{group1}, \code{group2}, and/or \code{...}, \code{groups} should be provided to specify the grouping columns.
Then \code{group1}, \code{group2}, and \code{...} can be the values in the grouping column. To include more grouping columns, just use
\code{c(grouping1, grouping2, ...)}, where \code{grouping1} is used for values of \code{group1}, \code{group2} and \code{...}; \code{grouping2} and
so on will be kept as the groupings where the clones are selected in each combination of the grouping values.
\item When used in a scplotter function, they will return a subset of the data frame with only the selected clones.
This is useful for filtering the data frame to only include the clones that meet the criteria. It is used internally in
some other scplotter functions, such as \code{ClonalStatPlot}, to select clones. The groupings are also applied, and defaulting
to \code{facet_by} and \code{split_by} in the parent frame.
\item When used independently, you should pass the arguments explicitly, such as \code{groups} and \code{return_ids}, to control the
behavior and the output of the function.
}
}
\examples{
data <- data.frame(
    CTaa = c("AA1", "AA2", "AA3", "AA4", "AA5", "AA6", "AA7", "AA8", "AA9", "AA10"),
    group1 = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
    group2 = c(7, 3, 8, 2, 1, 5, 9, 4, 6, 0),
    groups = c("A", "A", "A", "A", "B", "B", "B", "B", "B", "B")
)
data <- data[order(data$group1 + data$group2, decreasing = TRUE), ]
top(3)
top(3, groups = "groups")
sel(group1 == 0 | group2 == 0)
uniq(group1, group2)
shared(group1, group2)
gt(group1, group2)
lt(group1, group2)
le(group1, group2)
lt(group1, group2, include_zeros = FALSE)
eq(group1, group2)
ne(group1, group2)

# Use them in a dplyr pipeline
data <- tidyr::pivot_longer(data, cols = c("group1", "group2"),
    names_to = "group", values_to = "value")
data <- tidyr::uncount(data, !!rlang::sym("value"))

unique(dplyr::mutate(data, Top3 = top(3))$Top3)
unique(dplyr::mutate(data, Top3 = top(3, groups = "groups"))$Top3)
unique(dplyr::mutate(data, Unique = sel(group1 == 0 | group2 == 0, groups = "group"))$Unique)
unique(dplyr::mutate(data, UniqueInG1 = uniq(group1, group2, groups = "group"))$UniqueInG1)
unique(dplyr::mutate(data, Shared = shared(group1, group2, groups = "group"))$Shared)
unique(dplyr::mutate(data, Greater = gt(group1, group2, groups = "group"))$Greater)
unique(dplyr::mutate(data, Less = lt(group1, group2, groups = "group"))$Less)
unique(dplyr::mutate(data, LessEqual = le(group1, group2, groups = "group"))$LessEqual)
unique(dplyr::mutate(data, GreaterEqual = ge(group1, group2, groups = "group"))$GreaterEqual)
unique(dplyr::mutate(data, Equal = eq(group1, group2, groups = "group"))$Equal)
unique(dplyr::mutate(data, NotEqual = ne(group1, group2, groups = "group"))$NotEqual)
# Compond expressions
unique(
  dplyr::mutate(data,
     Top3OrEqual = or(top(3), eq(group1, group2, groups = "group")))$Top3OrEqual
)

unique(
  dplyr::mutate(data,
     SharedAndGreater = and(
        shared(group1, group2, groups = "group"),
        gt(group1, group2, groups = "group")
     ))$SharedAndGreater
)
}
