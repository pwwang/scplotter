[{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://pwwang.github.io/scplotter/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://pwwang.github.io/scplotter/articles/Knowing_your_spatial_data_and_visualization.html","id":"spatial-data-model-used-by-scplotter","dir":"Articles","previous_headings":"","what":"Spatial data model used by scplotter","title":"Knowing your spatial data and visualization","text":"scplotter doesn’t change structure existing objects (Seurat Giotto) supported. plotting, scplotter adopts data model used spatialdata, open universal framework processing spatial omics data python. also think data container various elements, including: Images: H&E, staining images Masks (called Labels spatialdata): pixel-level segmentation Points: transcripts locations gene information, landmarks points Shapes: cell/nucleus boundaries, subcellular structures, anatomical annotations, regions interest (ROIs) Metadata: cell-level information feature-level information See also spatialdata documentation details. metadata interpolated elements whiled plotted. types elements plotted different functions plotthis package: Images plotted using plotthis::SpatImagePlot():  Masks generally plotted scplotter, can plotted manually using plotthis::SpatMasksPlot() Shapes plotted using plotthis::SpatShapesPlot():  Points plotted using plotthis::SpatPointsPlot():","code":"library(plotthis)  g <- suppressWarnings(GiottoData::loadGiottoMini(\"vizgen\"))  SpatImagePlot(GiottoClass::getGiottoImage(g)@raster_object) SpatShapesPlot(GiottoClass::getPolygonInfo(g)) SpatPointsPlot(GiottoClass::getSpatialLocations(g, output = \"data.table\"))"},{"path":"https://pwwang.github.io/scplotter/articles/Knowing_your_spatial_data_and_visualization.html","id":"flowchat-of-spatial-data-visualization","dir":"Articles","previous_headings":"","what":"Flowchat of spatial data visualization","title":"Knowing your spatial data and visualization","text":"diagram details dispatch logic internal structure SpatXPlot (SpatDimPlot SpatFeaturePlot) function, handles spatial visualizations Seurat Giotto objects. dispatch begins checking class(object) routes call either SpatXPlot.Seurat SpatXPlot.giotto. Seurat case, image class (class(object@images[[1]])) recognized (e.g., Visium, SlideSeq, FOV), dispatched specialized SpatPlot.Seurat.<type> function. Downstream, implementations extract image, shapes, points respective objects using methods like object@images[[image]], GetTissueCoordinates(...), GiottoClass::getSpatialLocations(...). passed unified plotting functions: SpatImagePlot, SpatShapesPlot, SpatPointsPlot, assembled via ggplot. Additionally, diagram notes access metadata (e.g., object@meta.data combineFeatureData(...)) enhances visualizations, coloring points shapes based metadata attributes.","code":""},{"path":"https://pwwang.github.io/scplotter/articles/Knowing_your_spatial_data_and_visualization.html","id":"controlling-which-layers-to-plot","dir":"Articles","previous_headings":"","what":"Controlling which layers to plot","title":"Knowing your spatial data and visualization","text":"control layers (image, shapes, points) plotted spatial visualization functions, can use specific arguments (image, shapes, points) general-purpose layers argument. layers argument character vector specifying “image”, “shapes”, “points” (“masks”, supported) include, order drawn. example, layers = c(\"image\", \"points\") plot image points (image points available object enabled). Individual logical flags like image, shapes, points also let enable disable specific layers: image = TRUE/FALSE enables/disables image background; can also provide image name color. shapes = TRUE/FALSE controls whether shapes plotted. automatically set TRUE shapes_fill_by provided. points = TRUE/FALSE defaults TRUE, controls whether spatial points (e.g., cells) shown. fine-tune plotting , use layer-specific argument prefixes image_, shapes_, points_ … pass styling data-specific options respective plotting functions (plotthis::SpatImagePlot(), etc.).","code":""},{"path":"https://pwwang.github.io/scplotter/articles/Knowing_your_spatial_data_and_visualization.html","id":"spatdimplot-vs-spatfeatureplot","dir":"Articles","previous_headings":"","what":"SpatDimPlot vs SpatFeaturePlot","title":"Knowing your spatial data and visualization","text":"SpatDimPlot SpatFeaturePlot functions designed visualize spatial data different focuses: SpatDimPlot: function used visualize data categorical variables, borrowed [Seurat::SpatialDimPlot][7]. variables (specified group_by) applied points . SpatFeaturePlot: function used visualize data continuous variables, borrowed [Seurat::SpatialFeaturePlot][8]. variables (specified features) applied points . Since difference two functions mainly points layer, points layer disabled, functions produce plot. SpatDimPlot function suitable categorical variables, SpatFeaturePlot suitable continuous variables. multiple features provided SpatFeaturePlot, plots faceted. facet show spatial distribution single feature, allowing clear comparison across multiple features.","code":""},{"path":"https://pwwang.github.io/scplotter/articles/Knowing_your_spatial_data_and_visualization.html","id":"visualizing-the-molecules","dir":"Articles","previous_headings":"","what":"Visualizing the molecules","title":"Knowing your spatial data and visualization","text":"molecules image based spatial data can visualized using SpatDimPlot specifying group_by argument \"molecules\" provide module list features argument. can also use nmols limit maximum number molecule plotted. applies Seurat giotto objects.","code":""},{"path":"https://pwwang.github.io/scplotter/articles/Knowing_your_spatial_data_and_visualization.html","id":"visualizing-in-situ-vs-non-in-situ-points","dir":"Articles","previous_headings":"","what":"Visualizing in-situ vs non-in-situ points","title":"Knowing your spatial data and visualization","text":"hard provide -situ plots Seurat objects design. giotto objects, insitu points plotted necessary. general purposes, example, coloring points metadata, non--situ points plotted default. one requires use_overlap = TRUE (see also: https://drieslab.github.io/GiottoVisuals/reference/spatInSituPlotPoints.html#arg-use-overlap), -situ points plotted.","code":""},{"path":"https://pwwang.github.io/scplotter/articles/Knowing_your_spatial_data_and_visualization.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Knowing your spatial data and visualization","text":"Visualizing 10x Visium data prepared Seurat Visualizing 10x VisiumHD data prepared Seurat Visualizing SlideSeq data prepared Seurat Visualizing Xenium data prepared Seurat Visualizing Nanostring CosMx data prepared Seurat Visualizing Akoya_CODEX data prepared Seurat Visualizing Visium data prepared Giotto Visualizing VisiumHD data prepared Giotto Visualizing Xenium data prepared Giotto Visualizing SlideSeq data prepared Giotto Visualizing Spatial CITE-Seq data prepared Giotto Visualizing Nanostirng CosMx data prepared Giotto Visualizing CODEX data prepared Giotto Visualizing vizgen data prepared Giotto Visualizing seqFISH data prepared Giotto","code":""},{"path":"https://pwwang.github.io/scplotter/articles/Visualizing_data_with_LLMs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Visualizing data with LLMs","text":"vignette demonstrates use scplotter package visualize data AI. package provides variety functions visualizing single-cell sequencing data, including scRNA-seq scTCR-seq/scBCR-seq data.","code":""},{"path":"https://pwwang.github.io/scplotter/articles/Visualizing_data_with_LLMs.html","id":"setup-llm-provider","dir":"Articles","previous_headings":"","what":"Setup LLM provider","title":"Visualizing data with LLMs","text":"scplotter uses tidyprompt provide unified interface different LLM providers. can set preferred LLM provider using one wrappers provided tidyprompt.","code":"# Set up LLM provider provider <- tidyprompt::llm_provider_openai(     parameters = list(model = \"gpt-4o-mini\", stream = getOption(\"tidyprompt.stream\", TRUE)),     verbose = getOption(\"tidyprompt.verbose\", TRUE),     url = \"https://api.openai.com/v1/chat/completions\",     api_key = Sys.getenv(\"OPENAI_API_KEY\") )  chat <- SCPlotterChat$new(provider = provider)"},{"path":"https://pwwang.github.io/scplotter/articles/Visualizing_data_with_LLMs.html","id":"setup-the-data-for-visualization","dir":"Articles","previous_headings":"","what":"Setup the data for visualization","title":"Visualizing data with LLMs","text":"default, chat detects data used visualization .GlobalEnv data exported Seurat, SeuratObject, scRepertoire packages. can also ask list available data: set data manually, can use set_data() method. use data, can either set data manually use set_data() method can load data global environment mention prompt.","code":"chat$ask(\"List the available data that can be used for visualization.\") #> Tool identified:  ListData  #> Available data objects: #> -  scplotter::cellphonedb_res :  A toy example of CellPhoneDB output from LIANA  #> -  scplotter::ifnb_sub :  A subsetted version of 'ifnb' datasets  #> -  scplotter::pancreas_sub :  A subsetted version of mouse 'pancreas' datasets  #> -  Seurat::cc.genes :  Cell cycle genes  #> -  Seurat::cc.genes.updated.2019 :  Cell cycle genes: 2019 update  #> -  SeuratObject::pbmc_small :  A small example version of the PBMC dataset  #> -  scRepertoire::contig_list :  A list of 8 single-cell T cell receptor sequences runs.  #> -  scRepertoire::mini_contig_list :  Processed subset of 'contig_list'  #> -  scRepertoire::scRep_example :  A Seurat object of 500 single T cells, # or you can do it explicitly # chat$list_data() chat$set_data(scplotter::cellphonedb_res) # To let the LLM to detect the data from the prompt again: chat$set_data(NULL)"},{"path":"https://pwwang.github.io/scplotter/articles/Visualizing_data_with_LLMs.html","id":"list-the-available-tools","dir":"Articles","previous_headings":"","what":"List the available tools","title":"Visualizing data with LLMs","text":"can list available functions using list_tools() method. tool used visualization determined LLM automatically prompt.","code":"chat$list_tools() #> Available tools: #> -  CellStatPlot :  Cell statistics plot      #>    This function creates a plot to visualize the statistics of cells in a Seurat object, a Giotto object, #>    a path to an .h5ad file or an opened    H5File    by    hdf5r    package. #>    It can create various types of plots, including bar plots, circos plots, pie charts, pies (heatmap with cell_type = 'pie'), ring/donut plots, trend plots #>    area plots, sankey/alluvial plots, heatmaps, radar plots, spider plots, violin plots, and box plots. #>    The function allows for grouping, splitting, and faceting the data based on metadata columns. #>    It also supports calculating fractions of cells based on specified groupings.#' #> -  EnrichmentPlot :  Enrichment Plot      #>    This function generates various types of plots for enrichment (over-representation) analysis. #> -  ClonalPositionalPlot :  ClonalPositionalPlot      #>    Visualize the positional entropy, property or amino acid frequency of CDR3 sequences. #> -  ClonalCompositionPlot :  ClonalCompositionPlot      #>    Plot the composition of the clones in different samples/groups. #> -  ClonalKmerPlot :  ClonalKmerPlot      #>    Explore the k-mer frequency of CDR3 sequences. #> -  ClonalResidencyPlot :  ClonalResidencyPlot      #>    Plot the residency of the clones in different samples. #> -  CCCPlot :  Cell-Cell Communication Plot      #>    Plot the cell-cell communication. #>    See also: #>     #>     The review:    https://www.sciencedirect.com/science/article/pii/S2452310021000081    #>     The LIANA package:    https://liana-py.readthedocs.io/en/latest/notebooks/basic_usage.html#Tileplot    #>     The CCPlotR package:    https://github.com/Sarah145/CCPlotR    #>     #> -  GSEASummaryPlot :  Objects exported from other packages      #>    These objects are imported from other packages. Follow the links #>    below to see their documentation. #>     #>     #>         plotthis   GSEAPlot   ,    GSEASummaryPlot   ,    VolcanoPlot    #> -  VolcanoPlot :  Objects exported from other packages      #>    These objects are imported from other packages. Follow the links #>    below to see their documentation. #>     #>     #>         plotthis   GSEAPlot   ,    GSEASummaryPlot   ,    VolcanoPlot    #> -  ClonalVolumePlot :  ClonalVolumePlot      #>    ClonalVolumePlot #> -  SpatDimPlot :  Plot categories for spatial data      #>    Plot categories for spatial data #> -  ClonalStatPlot :  ClonalStatPlot      #>    Visualize the statistics of the clones. #> -  ClonalDynamicsPlot :  ClonalDynamicsPlot      #>    This function is deprecated. Please use    ClonalStatPlot()    instead. #> -  CellVelocityPlot :  Cell Velocity Plot      #>    This function creates a cell velocity plot for a Seurat object, #>    a Giotto object, a path to an .h5ad file or an opened    H5File    by    hdf5r    package. #>    It allows for various customizations such as grouping by metadata, #>    adding edges between cell neighbors, highlighting specific cells, and more. #>    This function is a wrapper around    plotthis::VelocityPlot()   , which provides a #>    flexible way to visualize cell velocities in reduced dimensions. This function #>    extracts the cell embeddings and velocity embeddings from the Seurat or Giotto object #>    and passes them to    plotthis::VelocityPlot()   . #> -  FeatureStatPlot :  Feature statistic plot      #>    This function creates various types of feature statistic plots for a Seurat object, a Giotto object, #>    a path to an .h5ad file or an opened    H5File    by    hdf5r    package. #>    It allows for plotting features such as gene expression, scores, or other metadata across different groups or conditions. #>    The function supports multiple plot types including violin, box, bar, ridge, dimension reduction, correlation, heatmap, and dot plots. #>    It can also handle multiple features and supports faceting, splitting, and grouping by metadata columns. #> -  ClonalGeneUsagePlot :  ClonalGeneUsagePlot      #>    ClonalGeneUsagePlot #> -  ClonalAbundancePlot :  ClonalAbundancePlot      #>    Plot the count or density of the clones at different abundance levels. #> -  SpatFeaturePlot :  Plot features for spatial data      #>    The features can include  expression, dimension reduction components, metadata, etc #> -  ClonalRarefactionPlot :  ClonalRarefactionPlot      #>    Plot the rarefaction curves #> -  ClonalLengthPlot :  ClonalLengthPlot      #>    Plot the length distribution of the CDR3 sequences #> -  ClonalOverlapPlot :  ClonalOverlapPlot      #>    Plot the overlap of the clones in different samples/groups. #> -  ClonalDiversityPlot :  ClonalDiversityPlot      #>    Plot the clonal diversities of the samples/groups. #> -  GSEAPlot :  Objects exported from other packages      #>    These objects are imported from other packages. Follow the links #>    below to see their documentation. #>     #>     #>         plotthis   GSEAPlot   ,    GSEASummaryPlot   ,    VolcanoPlot    #> -  CellDimPlot :  Cell Dimension Reduction Plot      #>    This function creates a dimension reduction plot for a Seurat object #>    a Giotto object, a path to an .h5ad file or an opened    H5File    by    hdf5r    package. #>    It allows for various customizations such as grouping by metadata, #>    adding edges between cell neighbors, highlighting specific cells, and more. #>    This function is a wrapper around    plotthis::DimPlot()   , which provides a #>    flexible way to visualize cell clusters in reduced dimensions. This function #>    extracts the necessary data from the Seurat or Giotto object and passes it to #>    plotthis::DimPlot()   . #> -  ClustreePlot :  Clustree plot      #>    This function generates a clustree plot from a data frame or a Seurat object. #> -  ListTools :  List all available tools #>    List all available tools that can be used to handle the chat request. #> -  ListData :  List all available data objects #>    List all available data objects that can be used to handle the chat request. # or you can ask the LLM to list the available functions # chat$ask(\"List the available functions for visualizing data.\")"},{"path":"https://pwwang.github.io/scplotter/articles/Visualizing_data_with_LLMs.html","id":"visualize-the-data","dir":"Articles","previous_headings":"","what":"Visualize the data","title":"Visualizing data with LLMs","text":"can visualize data using ask() method. LLM automatically detect data function used visualization.","code":"chat$ask(\"Generate a cell-cell communication plot for the cellphonedb_res data.\") #> Tool identified:  CCCPlot  #> Data object identified:  scplotter::cellphonedb_res  #> Running tool:  CCCPlot #> Warning in wrap$modify_fn(prompt_text, llm_provider): The 'skimr' package is #> required to skim dataframes. Skim summary of dataframes currently not shown in #> prompt #> [1] \"list(source = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, ...\" # Previous conversation is memorized chat$ask(\"Do a heatmap instead\") #> Tool identified:  CCCPlot  #> Data object identified:  scplotter::cellphonedb_res  #> Running tool:  CCCPlot #> Warning in wrap$modify_fn(prompt_text, llm_provider): The 'skimr' package is #> required to skim dataframes. Skim summary of dataframes currently not shown in #> prompt #> [1] \"list()\\nlist()\\n<environment>\\n<environment>\\nlist()\\nlist()\\n<environment>\\n<environment>\\n<environment>...\" chat$ask(\"Add a title to the plot: 'Cell-Cell Communication Plot'\") #> Tool identified:  CCCPlot  #> Data object identified:  scplotter::cellphonedb_res  #> Running tool:  CCCPlot #> Warning in wrap$modify_fn(prompt_text, llm_provider): The 'skimr' package is #> required to skim dataframes. Skim summary of dataframes currently not shown in #> prompt #> [1] \"list()\\nlist()\\n<environment>\\n<environment>\\nlist()\\nlist()\\n<environment>\\n<environment>\\n<environment>...\" # To fetch the previous conversation # Note that the response from the LLM is simplified in the history chat$get_history() #> [1] \"User: Generate a cell-cell communication plot for the cellphonedb_res data.\"                                                                                             #> [2] \"Assistant: tool - CCCPlot; data - scplotter::cellphonedb_res; code - CCCPlot(data = cellphonedb_res, plot_type = \\\"dot\\\")\"                                               #> [3] \"User: Do a heatmap instead\"                                                                                                                                              #> [4] \"Assistant: tool - CCCPlot; data - scplotter::cellphonedb_res; code - CCCPlot(data = cellphonedb_res, plot_type = \\\"heatmap\\\")\"                                           #> [5] \"User: Add a title to the plot: 'Cell-Cell Communication Plot'\"                                                                                                           #> [6] \"Assistant: tool - CCCPlot; data - scplotter::cellphonedb_res; code - CCCPlot(data = cellphonedb_res, plot_type = \\\"heatmap\\\", title = \\\"Cell-Cell Communication Plot\\\")\"  # To clear the history chat$clear_history()"},{"path":"https://pwwang.github.io/scplotter/articles/Visualizing_data_with_LLMs.html","id":"debug-and-improve-the-prompt","dir":"Articles","previous_headings":"","what":"Debug and improve the prompt","title":"Visualizing data with LLMs","text":"can set verbose TRUE conversations constructing chat object. print prompt response LLM.  debug single conversation, can set verbose TRUE ask() method.","code":"chat <- SCPlotterChat$new(     provider = provider,     verbose = TRUE ) chat$ask(\"Generate a cell-cell communication plot for the cellphonedb_res data.\") #> --- Sending request to LLM provider (gpt-4o-mini): --- #> Based on the following prompt and identify the tool that can be used to handle the request. #> Please only answer with the name of the tool from the listed available ones.  #> If no proper tool is identified from the prompt, use the last mentioned tool in the chat history. #> If no tool is found in the chat history, just answer \"None\". #>  #> --- Prompt --- #> Generate a cell-cell communication plot for the cellphonedb_res data. #>  #> --- Available Tools --- #> - CellStatPlot: Cell statistics plot   #>    This function creates a plot to visualize the statistics of cells in a Seurat object, a Giotto object, #>    a path to an .h5ad file or an opened    H5File    by    hdf5r    package. #>    It can create various types of plots, including bar plots, circos plots, pie charts, pies (heatmap with cell_type = 'pie'), ring/donut plots, trend plots #>    area plots, sankey/alluvial plots, heatmaps, radar plots, spider plots, violin plots, and box plots. #>    The function allows for grouping, splitting, and faceting the data based on metadata columns. #>    It also supports calculating fractions of cells based on specified groupings.#' #>  #> - EnrichmentPlot: Enrichment Plot   #>    This function generates various types of plots for enrichment (over-representation) analysis. #>  #> - ClonalPositionalPlot: ClonalPositionalPlot   #>    Visualize the positional entropy, property or amino acid frequency of CDR3 sequences. #>  #> - ClonalCompositionPlot: ClonalCompositionPlot   #>    Plot the composition of the clones in different samples/groups. #>  #> - ClonalKmerPlot: ClonalKmerPlot   #>    Explore the k-mer frequency of CDR3 sequences. #>  #> - ClonalResidencyPlot: ClonalResidencyPlot   #>    Plot the residency of the clones in different samples. #>  #> - CCCPlot: Cell-Cell Communication Plot   #>    Plot the cell-cell communication. #>    See also: #>     #>     The review:    https://www.sciencedirect.com/science/article/pii/S2452310021000081    #>     The LIANA package:    https://liana-py.readthedocs.io/en/latest/notebooks/basic_usage.html#Tileplot    #>     The CCPlotR package:    https://github.com/Sarah145/CCPlotR    #>     #>  #> - GSEASummaryPlot: Objects exported from other packages   #>    These objects are imported from other packages. Follow the links #>    below to see their documentation. #>     #>     #>         plotthis   GSEAPlot   ,    GSEASummaryPlot   ,    VolcanoPlot    #>  #> - VolcanoPlot: Objects exported from other packages   #>    These objects are imported from other packages. Follow the links #>    below to see their documentation. #>     #>     #>         plotthis   GSEAPlot   ,    GSEASummaryPlot   ,    VolcanoPlot    #>  #> - ClonalVolumePlot: ClonalVolumePlot   #>    ClonalVolumePlot #>  #> - SpatDimPlot: Plot categories for spatial data   #>    Plot categories for spatial data #>  #> - ClonalStatPlot: ClonalStatPlot   #>    Visualize the statistics of the clones. #>  #> - ClonalDynamicsPlot: ClonalDynamicsPlot   #>    This function is deprecated. Please use    ClonalStatPlot()    instead. #>  #> - CellVelocityPlot: Cell Velocity Plot   #>    This function creates a cell velocity plot for a Seurat object, #>    a Giotto object, a path to an .h5ad file or an opened    H5File    by    hdf5r    package. #>    It allows for various customizations such as grouping by metadata, #>    adding edges between cell neighbors, highlighting specific cells, and more. #>    This function is a wrapper around    plotthis::VelocityPlot()   , which provides a #>    flexible way to visualize cell velocities in reduced dimensions. This function #>    extracts the cell embeddings and velocity embeddings from the Seurat or Giotto object #>    and passes them to    plotthis::VelocityPlot()   . #>  #> - FeatureStatPlot: Feature statistic plot   #>    This function creates various types of feature statistic plots for a Seurat object, a Giotto object, #>    a path to an .h5ad file or an opened    H5File    by    hdf5r    package. #>    It allows for plotting features such as gene expression, scores, or other metadata across different groups or conditions. #>    The function supports multiple plot types including violin, box, bar, ridge, dimension reduction, correlation, heatmap, and dot plots. #>    It can also handle multiple features and supports faceting, splitting, and grouping by metadata columns. #>  #> - ClonalGeneUsagePlot: ClonalGeneUsagePlot   #>    ClonalGeneUsagePlot #>  #> - ClonalAbundancePlot: ClonalAbundancePlot   #>    Plot the count or density of the clones at different abundance levels. #>  #> - SpatFeaturePlot: Plot features for spatial data   #>    The features can include  expression, dimension reduction components, metadata, etc #>  #> - ClonalRarefactionPlot: ClonalRarefactionPlot   #>    Plot the rarefaction curves #>  #> - ClonalLengthPlot: ClonalLengthPlot   #>    Plot the length distribution of the CDR3 sequences #>  #> - ClonalOverlapPlot: ClonalOverlapPlot   #>    Plot the overlap of the clones in different samples/groups. #>  #> - ClonalDiversityPlot: ClonalDiversityPlot   #>    Plot the clonal diversities of the samples/groups. #>  #> - GSEAPlot: Objects exported from other packages   #>    These objects are imported from other packages. Follow the links #>    below to see their documentation. #>     #>     #>         plotthis   GSEAPlot   ,    GSEASummaryPlot   ,    VolcanoPlot    #>  #> - CellDimPlot: Cell Dimension Reduction Plot   #>    This function creates a dimension reduction plot for a Seurat object #>    a Giotto object, a path to an .h5ad file or an opened    H5File    by    hdf5r    package. #>    It allows for various customizations such as grouping by metadata, #>    adding edges between cell neighbors, highlighting specific cells, and more. #>    This function is a wrapper around    plotthis::DimPlot()   , which provides a #>    flexible way to visualize cell clusters in reduced dimensions. This function #>    extracts the necessary data from the Seurat or Giotto object and passes it to #>    plotthis::DimPlot()   . #>  #> - ClustreePlot: Clustree plot   #>    This function generates a clustree plot from a data frame or a Seurat object. #>  #> - ListTools: List all available tools #> List all available tools that can be used to handle the chat request. #>  #> - ListData: List all available data objects #> List all available data objects that can be used to handle the chat request. #> --- Receiving response from LLM provider: --- #> CCCPlot #> Tool identified:  CCCPlot #> --- Sending request to LLM provider (gpt-4o-mini): --- #> Based on the following prompt, identify the name of the data object that is mentioned in the prompt. #> The name should be one of the available ones listed. #> If no data object is found based on the prompt, use the last mentioned data object in the chat history. #> If no data object is found in the chat history, just answer \"None\". #>  #> --- Prompt --- #> Generate a cell-cell communication plot for the cellphonedb_res data. #>  #> -- Available Data Objects --- #> - scplotter::cellphonedb_res: A toy example of CellPhoneDB output from LIANA #> - scplotter::ifnb_sub: A subsetted version of 'ifnb' datasets #> - scplotter::pancreas_sub: A subsetted version of mouse 'pancreas' datasets #> - Seurat::cc.genes: Cell cycle genes #> - Seurat::cc.genes.updated.2019: Cell cycle genes: 2019 update #> - SeuratObject::pbmc_small: A small example version of the PBMC dataset #> - scRepertoire::contig_list: A list of 8 single-cell T cell receptor sequences runs. #> - scRepertoire::mini_contig_list: Processed subset of 'contig_list' #> - scRepertoire::scRep_example: A Seurat object of 500 single T cells, #> --- Receiving response from LLM provider: --- #> scplotter::cellphonedb_res #> Data object identified:  scplotter::cellphonedb_res  #> Running tool:  CCCPlot #> Warning in wrap$modify_fn(prompt_text, llm_provider): The 'skimr' package is #> required to skim dataframes. Skim summary of dataframes currently not shown in #> prompt #> --- Sending request to LLM provider (gpt-4o-mini): --- #> Based on the following prompt and the given tool information, generate the code to run the tool. #> The tool or function to be used is: CCCPlot. The data object to be used is: cellphonedb_res. #> Don't quote the data name when using it. The code should be valid R code. #> Only answer with the code that is wrapped between between ```r and ``` to run the tool. #> If there is not enough information in the prompt to run the tool, also refer to the chat history. #>  #> --- Prompt --- #> Generate a cell-cell communication plot for the cellphonedb_res data. #>  #> --- Tool Information --- #> - title #>   Cell-Cell Communication Plot #> - description #>    #>    Plot the cell-cell communication. #>    See also: #>     #>     The review:  https://www.sciencedirect.com/science/article/pii/S2452310021000081  #>     The LIANA package:  https://liana-py.readthedocs.io/en/latest/notebooks/basic_usage.html#Tileplot  #>     The CCPlotR package:  https://github.com/Sarah145/CCPlotR  #>     #>    #> - usage #>    #>   CCCPlot( #>     data, #>     plot_type = c(\"dot\", \"network\", \"chord\", \"circos\", \"heatmap\", \"sankey\", \"alluvial\", #>       \"box\", \"violin\", \"ridge\"), #>     method = c(\"aggregation\", \"interaction\"), #>     magnitude = waiver(), #>     specificity = waiver(), #>     magnitude_agg = length, #>     magnitude_name = \"No. of interactions\", #>     meta_specificity = \"sumlog\", #>     split_by = NULL, #>     x_text_angle = 90, #>     link_curvature = 0.2, #>     link_alpha = 0.6, #>     facet_by = NULL, #>     show_row_names = TRUE, #>     show_column_names = TRUE, #>     ... #>   ) #>    #> - arguments #>   - data: A data frame with the cell-cell communication data. #>   A typical data frame should have the following columns: #>    #>    source The source cell type. #>    target The target cell type. #>    ligand The ligand gene. #>    receptor The receptor gene. #>    ligand_means The mean expression of the ligand gene per cell type. #>    receptor_means The mean expression of the receptor gene per cell type. #>    ligand_props The proportion of cells that express the entity. #>    receptor_props The proportion of cells that express the entity. #>    <magnitude> The magnitude of the communication. #>    <specificity> The specificity of the communication. #>   Depends on the plot_type, some columns are optional. But the source, target, #>   ligand, receptor and <magnitude> are required. #>    #>   - plot_type: The type of plot to use. Default is \"dot\". #>   Possible values are \"network\", \"chord\", \"circos\", \"heatmap\", \"sankey\", \"alluvial\", \"dot\", #>   \"box\", \"violin\" and \"ridge\". #>   For \"box\", \"violin\" and \"ridge\", the method should be \"interaction\". #>    #>    network: A network plot with the source and target cells as the nodes and the communication as the edges. #>    chord: A chord plot with the source and target cells as the nodes and the communication as the chords. #>    circos: Alias of \"chord\". #>    heatmap: A heatmap plot with the source and target cells as the rows and columns. #>    sankey: A sankey plot with the source and target cells as the nodes and the communication as the flows. #>    alluvial: Alias of \"sankey\". #>    dot: A dot plot with the source and target cells as the nodes and the communication as the dots. #>    box: Box plots for source cell types. Each x is a target cell type and the values will be #>   the interaction strengths of the ligand-receptor pairs. #>    violin: Violin plots for source cell types. Each x is a target cell type and the values will be #>   the interaction strengths of the ligand-receptor pairs. #>    ridge: Ridge plots for source cell types. Each row is a target cell type and the values will be #>   the interaction strengths of the ligand-receptor pairs. #>    #>   - method: The method to determine the plot entities. #>    #>    aggregation: Aggregate the ligand-receptor pairs interactions for each source-target pair. #>   Only the source / target pairs will be plotted. #>    interaction: Plot the ligand-receptor pairs interactions directly. #>   The ligand-receptor pairs will also be plotted. #>    #>   - magnitude: The column name in the data to use as the magnitude of the communication. #>   By default, the second last column will be used. #>   See li.mt.show_methods() for the available methods in LIANA. #>   or https://liana-py.readthedocs.io/en/latest/notebooks/basic_usage.html#Tileplot #>   - specificity: The column name in the data to use as the specificity of the communication. #>   By default, the last column will be used. #>   If the method doesn't have a specificity, set it to NULL. #>   - magnitude_agg: A function to aggregate the magnitude of the communication. #>   Default is length. #>   - magnitude_name: The name of the magnitude in the plot. #>   Default is \"No. of interactions\". #>   - meta_specificity: The method to calculate the specificity when there are multiple #>   ligand-receptor pairs interactions. Default is \"sumlog\". #>   It should be one of the methods in the metap package. #>   - split_by: A character vector of column names to split the plots. Default is NULL. #>   - x_text_angle: The angle of the x-axis text. Default is 90. #>   Only used when plot_type is \"dot\". #>   - link_curvature: The curvature of the links. Default is 0.2. #>   Only used when plot_type is \"network\". #>   - link_alpha: The transparency of the links. Default is 0.6. #>   Only used when plot_type is \"network\". #>   - facet_by: A character vector of column names to facet the plots. Default is NULL. #>   It should always be NULL. #>   - show_row_names: Whether to show the row names in the heatmap. Default is TRUE. #>   Only used when plot_type is \"heatmap\". #>   - show_column_names: Whether to show the column names in the heatmap. Default is TRUE. #>   Only used when plot_type is \"heatmap\". #>   - ...: Other arguments passed to the specific plot function. #>    #>    For Network, see plotthis::Network(). #>     #>       [...] can be: #>       - links: A data frame containing the links between nodes. #>       - nodes: A data frame containing the nodes. #>       This is optional. The names of the nodes are extracted from the links data frame. #>       If \"@nodes\" is provided, the nodes data frame will be extracted from the attribute nodes of the links data frame. #>       - split_by_sep: The separator for multiple split_by columns. See split_by #>       - split_nodes: A logical value specifying whether to split the nodes data. #>       If TRUE, the nodes data will also be split by the split_by column. #>       - from: A character string specifying the column name of the links data frame for the source nodes. #>       Default is the first column of the links data frame. #>       - from_sep: A character string to concatenate the columns in from, if multiple columns are provided. #>       - to: A character string specifying the column name of the links data frame for the target nodes. #>       Default is the second column of the links data frame. #>       - to_sep: A character string to concatenate the columns in to, if multiple columns are provided. #>       - node_by: A character string specifying the column name of the nodes data frame for the node names. #>       Default is the first column of the nodes data frame. #>       - node_by_sep: A character string to concatenate the columns in node_by, if multiple columns are provided. #>       - link_weight_by: A numeric value or a character string specifying the column name of the links data frame for the link weight. #>       If a numeric value is provided, all links will have the same weight. #>       This determines the width of the links. #>       - link_weight_name: A character string specifying the name of the link weight in the legend. #>       - link_type_by: A character string specifying the type of the links. #>       This can be \"solid\", \"dashed\", \"dotted\", or a column name from the links data frame. #>       It has higher priority when it is a column name. #>       - link_type_name: A character string specifying the name of the link type in the legend. #>       - node_size_by: A numeric value or a character string specifying the column name of the nodes data frame for the node size. #>       If a numeric value is provided, all nodes will have the same size. #>       - node_size_name: A character string specifying the name of the node size in the legend. #>       - node_color_by: A character string specifying the color of the nodes. #>       This can be a color name, a hex code, or a column name from the nodes data frame. #>       It has higher priority when it is a column name. #>       - node_color_name: A character string specifying the name of the node color in the legend. #>       - node_shape_by: A numeric value or a character string specifying the column name of the nodes data frame for the node shape. #>       If a numeric value is provided, all nodes will have the same shape. #>       - node_shape_name: A character string specifying the name of the node shape in the legend. #>       - node_fill_by: A character string specifying the fill color of the nodes. #>       This can be a color name, a hex code, or a column name from the nodes data frame. #>       It has higher priority when it is a column name. #>       - node_fill_name: A character string specifying the name of the node fill in the legend. #>       - node_alpha: A numeric value specifying the transparency of the nodes. #>       It only works when the nodes are filled. #>       - node_stroke: A numeric value specifying the stroke of the nodes. #>       - cluster_scale: A character string specifying how to scale the clusters. #>       It can be \"fill\", \"color\", or \"shape\". #>       - node_size_range: A numeric vector specifying the range of the node size. #>       - link_weight_range: A numeric vector specifying the range of the link weight. #>       - link_arrow_offset: A numeric value specifying the offset of the link arrows. #>       So that they won't overlap with the nodes. #>       - link_color_by: A character string specifying the colors of the link. It can be: #>        #>        \"from\" means the color of the link is determined by the source node. #>        \"to\" means the color of the link is determined by the target node. #>        Otherwise, the color of the link is determined by the column name from the links data frame. #>        #>       - link_color_name: A character string specifying the name of the link color in the legend. #>       Only used when link_color_by is a column name. #>       - palette: A character string specifying the palette to use. #>       A named list or vector can be used to specify the palettes for different split_by values. #>       - palcolor: A character string specifying the color to use in the palette. #>       A named list can be used to specify the colors for different split_by values. #>       If some values are missing, the values from the palette will be used (palcolor will be NULL for those values). #>       - link_palette: A character string specifying the palette of the links. #>       When link_color_by is \"from\" or \"to\", the palette of the links defaults to the palette of the nodes. #>       - link_palcolor: A character vector specifying the colors of the link palette. #>       When link_color_by is \"from\" or \"to\", the colors of the link palette defaults to the colors of the node palette. #>       - directed: A logical value specifying whether the graph is directed. #>       - layout: A character string specifying the layout of the graph. #>       It can be \"circle\", \"tree\", \"grid\", or a layout function from igraph. #>       - cluster: A character string specifying the clustering method. #>       It can be \"none\", \"fast_greedy\", \"walktrap\", \"edge_betweenness\", \"infomap\", or a clustering function from igraph. #>       - add_mark: A logical value specifying whether to add mark for the clusters to the plot. #>       - mark_expand: A unit value specifying the expansion of the mark. #>       - mark_type: A character string specifying the type of the mark. #>       It can be \"hull\", \"ellipse\", \"rect\", \"circle\", or a mark function from ggforce. #>       - mark_alpha: A numeric value specifying the transparency of the mark. #>       - mark_linetype: A numeric value specifying the line type of the mark. #>       - add_label: A logical value specifying whether to add label to the nodes to the plot. #>       - label_size: A numeric value specifying the size of the label. #>       - label_fg: A character string specifying the foreground color of the label. #>       - label_bg: A character string specifying the background color of the label. #>       - label_bg_r: A numeric value specifying the background ratio of the label. #>       - arrow: An arrow object for the links. #>       - title: A character string specifying the title of the plot. #>       A function can be used to generate the title based on the default title. #>       This is useful when split_by is used and the title needs to be dynamic. #>       - subtitle: A character string specifying the subtitle of the plot. #>       - xlab: A character string specifying the x-axis label. #>       - ylab: A character string specifying the y-axis label. #>       - aspect.ratio: A numeric value specifying the aspect ratio of the plot. #>       - theme: A character string or a theme class (i.e. ggplot2::theme_classic) specifying the theme to use. #>       Default is \"theme_this\". #>       - theme_args: A list of arguments to pass to the theme function. #>       - legend.position: A character string specifying the position of the legend. #>       if waiver(), for single groups, the legend will be \"none\", otherwise \"right\". #>       - legend.direction: A character string specifying the direction of the legend. #>       - seed: The random seed to use. Default is 8525. #>       - combine: Whether to combine the plots into one when facet is FALSE. Default is TRUE. #>       - nrow: A numeric value specifying the number of rows in the facet. #>       - ncol: A numeric value specifying the number of columns in the facet. #>       - byrow: A logical value indicating whether to fill the plots by row. #>       - axes: A string specifying how axes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axes in individual plots. #>        'collect' will remove duplicated axes when placed in the same run of rows or columns of the layout. #>        'collect_x' and 'collect_y' will remove duplicated x-axes in the columns or duplicated y-axes in the rows respectively. #>        #>       - axis_titles: A string specifying how axis titltes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axis titles in individual plots. #>        'collect' will remove duplicated titles in one direction and merge titles in the opposite direction. #>        'collect_x' and 'collect_y' control this for x-axis titles and y-axis titles respectively. #>        #>       - guides: A string specifying how guides should be treated in the layout. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'collect' will collect guides below to the given nesting level, removing duplicates. #>        'keep' will stop collection at this level and let guides be placed alongside their plot. #>        'auto' will allow guides to be collected if a upper level tries, but place them alongside the plot if not. #>        #>       - design: Specification of the location of areas in the layout, passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. When specified, nrow, ncol, and byrow are ignored. #>       See patchwork::wrap_plots() for more details. #>   For ChordPlot, see plotthis::ChordPlot(). #>     #>       [...] can be: #>       - y: A character string specifying the column name of the data frame to plot for the y-axis. #>       - from: A character string of the column name to plot for the source. #>       A character/factor column is expected. #>       - from_sep: A character string to concatenate the columns in from, if multiple columns are provided. #>       - to: A character string of the column name to plot for the target. #>       A character/factor column is expected. #>       - to_sep: A character string to concatenate the columns in to, if multiple columns are provided. #>       - split_by_sep: The separator for multiple split_by columns. See split_by #>       - flip: A logical value to flip the source and target. #>       - links_color: A character string to specify the color of the links. #>       Either \"from\" or \"to\". #>       - theme: A character string or a theme class (i.e. ggplot2::theme_classic) specifying the theme to use. #>       Default is \"theme_this\". #>       - theme_args: A list of arguments to pass to the theme function. #>       - palette: A character string specifying the palette to use. #>       A named list or vector can be used to specify the palettes for different split_by values. #>       - palcolor: A character string specifying the color to use in the palette. #>       A named list can be used to specify the colors for different split_by values. #>       If some values are missing, the values from the palette will be used (palcolor will be NULL for those values). #>       - alpha: A numeric value specifying the transparency of the plot. #>       - labels_rot: A logical value to rotate the labels by 90 degrees. #>       - title: A character string specifying the title of the plot. #>       A function can be used to generate the title based on the default title. #>       This is useful when split_by is used and the title needs to be dynamic. #>       - subtitle: A character string specifying the subtitle of the plot. #>       - seed: The random seed to use. Default is 8525. #>       - combine: Whether to combine the plots into one when facet is FALSE. Default is TRUE. #>       - nrow: A numeric value specifying the number of rows in the facet. #>       - ncol: A numeric value specifying the number of columns in the facet. #>       - byrow: A logical value indicating whether to fill the plots by row. #>       - axes: A string specifying how axes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axes in individual plots. #>        'collect' will remove duplicated axes when placed in the same run of rows or columns of the layout. #>        'collect_x' and 'collect_y' will remove duplicated x-axes in the columns or duplicated y-axes in the rows respectively. #>        #>       - axis_titles: A string specifying how axis titltes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axis titles in individual plots. #>        'collect' will remove duplicated titles in one direction and merge titles in the opposite direction. #>        'collect_x' and 'collect_y' control this for x-axis titles and y-axis titles respectively. #>        #>       - guides: A string specifying how guides should be treated in the layout. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'collect' will collect guides below to the given nesting level, removing duplicates. #>        'keep' will stop collection at this level and let guides be placed alongside their plot. #>        'auto' will allow guides to be collected if a upper level tries, but place them alongside the plot if not. #>        #>       - design: Specification of the location of areas in the layout, passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. When specified, nrow, ncol, and byrow are ignored. #>       See patchwork::wrap_plots() for more details. #>   For Heatmap, see plotthis::Heatmap(). #>     #>       [...] can be: #>       - values_by: A character of column name in data that contains the values to be plotted. #>       This is required when in_form is \"long\". For other formats, the values are pivoted into a column named by values_by. #>       - values_fill: A value to fill in the missing values in the heatmap. #>       When there is missing value in the data, the cluster_rows and cluster_columns will fail. #>       - name: A character string to name the heatmap (will be used to rename values_by). #>       - in_form: The format of the data. Can be one of \"matrix\", \"long\", \"wide-rows\", \"wide-columns\", or \"auto\". #>       Defaults to \"auto\". #>       - split_by_sep: A character string to concat multiple columns in split_by. #>       - rows_by: A vector of column names in data that contains the row information. #>       This is used to create the rows of the heatmap. #>       When in_form is \"long\" or \"wide-columns\", this is requied, and multiple columns can be specified, #>       which will be concatenated by rows_by_sep into a single column. #>       - rows_by_sep: A character string to concat multiple columns in rows_by. #>       - rows_split_by: A character of column name in data that contains the split information for rows. #>       - rows_split_by_sep: A character string to concat multiple columns in rows_split_by. #>       - columns_by: A vector of column names in data that contains the column information. #>       This is used to create the columns of the heatmap. #>       When in_form is \"long\" or \"wide-rows\", this is required, and multiple columns can be specified, #>       which will be concatenated by columns_by_sep into a single column. #>       - columns_by_sep: A character string to concat multiple columns in columns_by. #>       - columns_split_by: A character of column name in data that contains the split information for columns. #>       - columns_split_by_sep: A character string to concat multiple columns in columns_split_by. #>       - rows_data: A data frame containing additional data for rows, which can be used to add annotations to the heatmap. #>       It will be joined to the main data by rows_by and split_by if split_by exists in rows_data. #>       This is useful for adding additional information to the rows of the heatmap. #>       - columns_data: A data frame containing additional data for columns, which can be used to add annotations to the heatmap. #>       It will be joined to the main data by columns_by and split_by if split_by exists in columns_data. #>       This is useful for adding additional information to the columns of the heatmap. #>       - columns_name: A character string to rename the column created by columns_by, which will be reflected in the name of the annotation or legend. #>       - columns_split_name: A character string to rename the column created by columns_split_by, which will be reflected in the name of the annotation or legend. #>       - rows_name: A character string to rename the column created by rows_by, which will be reflected in the name of the annotation or legend. #>       - rows_split_name: A character string to rename the column created by rows_split_by, which will be reflected in the name of the annotation or legend. #>       - palette: A character string specifying the palette of the heatmap cells. #>       - palcolor: A character vector of colors to override the palette of the heatmap cells. #>       - rows_palette: A character string specifying the palette of the row group annotation. #>       The default is \"Paired\". #>       - rows_palcolor: A character vector of colors to override the palette of the row group annotation. #>       - rows_split_palette: A character string specifying the palette of the row split annotation. #>       The default is \"simspec\". #>       - rows_split_palcolor: A character vector of colors to override the palette of the row split annotation. #>       - columns_palette: A character string specifying the palette of the column group annotation. #>       The default is \"Paired\". #>       - columns_palcolor: A character vector of colors to override the palette of the column group annotation. #>       - columns_split_palette: A character string specifying the palette of the column split annotation. #>       The default is \"simspec\". #>       - columns_split_palcolor: A character vector of colors to override the palette of the column split annotation. #>       - pie_size_name: A character string specifying the name of the legend for the pie size. #>       - pie_size: A numeric value or a function specifying the size of the pie chart. #>       If it is a function, the function should take count as the argument and return the size. #>       - pie_values: A function or character that can be converted to a function by match.arg() #>       to calculate the values for the pie chart. Default is \"length\". #>       The function should take a vector of values as the argument and return a single value, for each #>       group in pie_group_by. #>       - pie_name: A character string to rename the column created by pie_group_by, which will be reflected in the name of the annotation or legend. #>       - pie_group_by: A character of column name in data that contains the group information for pie charts. #>       This is used to create pie charts in the heatmap when cell_type is \"pie\". #>       - pie_group_by_sep: A character string to concat multiple columns in pie_group_by. #>       - pie_palette: A character string specifying the palette of the pie chart. #>       - pie_palcolor: A character vector of colors to override the palette of the pie chart. #>       - bars_sample: An integer specifying the number of samples to draw the bars. #>       - label: A function to calculate the labels for the heatmap cells. #>       It can take either 1, 3, or 5 arguments. The first argument is the aggregated values. #>       If it takes 3 arguments, the second and third arguments are the row and column indices. #>       If it takes 5 arguments, the second and third arguments are the row and column indices, #>       the fourth and fifth arguments are the row and column names. #>       The function should return a character vector of the same length as the aggregated values. #>       If the function returns NA, no label will be shown for that cell. #>       - label_size: A numeric value specifying the size of the labels when cell_type = \"label\". #>       - violin_fill: A character vector of colors to override the fill color of the violin plot. #>       If NULL, the fill color will be the same as the annotion. #>       - boxplot_fill: A character vector of colors to override the fill color of the boxplot. #>       If NULL, the fill color will be the same as the annotion. #>       - dot_size: A numeric value specifying the size of the dot or a function to calculate the size #>       from the values in the cell or a function to calculate the size from the values in the cell. #>       - dot_size_name: A character string specifying the name of the legend for the dot size. #>       If NULL, the dot size legend will not be shown. #>       - legend_items: A numeric vector with names to specifiy the items in the main legend. #>       The names will be working as the labels of the legend items. #>       - legend_discrete: A logical value indicating whether the main legend is discrete. #>       - legend.position: A character string specifying the position of the legend. #>       if waiver(), for single groups, the legend will be \"none\", otherwise \"right\". #>       - legend.direction: A character string specifying the direction of the legend. #>       - lower_quantile, upper_quantile, lower_cutoff, upper_cutoff: Vector of minimum and maximum cutoff values or quantile values for each feature. #>       It's applied to aggregated values when aggregated values are used (e.g. plot_type tile, label, etc). #>       It's applied to raw values when raw values are used (e.g. plot_type bars, etc). #>       - add_bg: A logical value indicating whether to add a background to the heatmap. #>       Does not work with cell_type = \"bars\" or cell_type = \"tile\". #>       - bg_alpha: A numeric value between 0 and 1 specifying the transparency of the background. #>       - add_reticle: A logical value indicating whether to add a reticle to the heatmap. #>       - reticle_color: A character string specifying the color of the reticle. #>       - column_name_annotation: A logical value indicating whether to add the column annotation for the column names. #>       which is a simple annotaion indicating the column names. #>       - column_name_legend: A logical value indicating whether to show the legend of the column name annotation. #>       - row_name_annotation: A logical value indicating whether to add the row annotation for the row names. #>       which is a simple annotaion indicating the row names. #>       - row_name_legend: A logical value indicating whether to show the legend of the row name annotation. #>       - cluster_columns: A logical value indicating whether to cluster the columns. #>       If TRUE and columns_split_by is provided, the clustering will only be applied to the columns within the same split. #>       - cluster_rows: A logical value indicating whether to cluster the rows. #>       If TRUE and rows_split_by is provided, the clustering will only be applied to the rows within the same split. #>       - border: A logical value indicating whether to draw the border of the heatmap. #>       If TRUE, the borders of the slices will be also drawn. #>       - title: The global (column) title of the heatmap #>       - column_title: A character string/vector of the column name(s) to use as the title of the column group annotation. #>       - row_title: A character string/vector of the column name(s) to use as the title of the row group annotation. #>       - na_col: A character string specifying the color for missing values. #>       The default is \"grey85\". #>       - row_names_side: A character string specifying the side of the row names. #>       The default is \"right\". #>       - column_names_side: A character string specifying the side of the column names. #>       The default is \"bottom\". #>       - column_annotation: A character string/vector of the column name(s) to use as the column annotation. #>       Or a list with the keys as the names of the annotation and the values as the column names. #>       - column_annotation_side: A character string specifying the side of the column annotation. #>       Could be a list with the keys as the names of the annotation and the values as the sides. #>       - column_annotation_palette: A character string specifying the palette of the column annotation. #>       The default is \"Paired\". #>       Could be a list with the keys as the names of the annotation and the values as the palettes. #>       - column_annotation_palcolor: A character vector of colors to override the palette of the column annotation. #>       Could be a list with the keys as the names of the annotation and the values as the palcolors. #>       - column_annotation_type: A character string specifying the type of the column annotation. #>       The default is \"auto\". Other options are \"simple\", \"pie\", \"ring\", \"bar\", \"violin\", \"boxplot\", \"density\". #>       Could be a list with the keys as the names of the annotation and the values as the types. #>       If the type is \"auto\", the type will be determined by the type and number of the column data. #>       - column_annotation_params: A list of parameters passed to the annotation function. #>       Could be a list with the keys as the names of the annotation and the values as the parameters. #>       - column_annotation_agg: A function to aggregate the values in the column annotation. #>       - row_annotation: A character string/vector of the column name(s) to use as the row annotation. #>       Or a list with the keys as the names of the annotation and the values as the column names. #>       - row_annotation_side: A character string specifying the side of the row annotation. #>       Could be a list with the keys as the names of the annotation and the values as the sides. #>       - row_annotation_palette: A character string specifying the palette of the row annotation. #>       The default is \"Paired\". #>       Could be a list with the keys as the names of the annotation and the values as the palettes. #>       - row_annotation_palcolor: A character vector of colors to override the palette of the row annotation. #>       Could be a list with the keys as the names of the annotation and the values as the palcolors. #>       - row_annotation_type: A character string specifying the type of the row annotation. #>       The default is \"auto\". Other options are \"simple\", \"pie\", \"ring\", \"bar\", \"violin\", \"boxplot\", \"density\". #>       Could be a list with the keys as the names of the annotation and the values as the types. #>       If the type is \"auto\", the type will be determined by the type and number of the row data. #>       - row_annotation_params: A list of parameters passed to the annotation function. #>       Could be a list with the keys as the names of the annotation and the values as the parameters. #>       - row_annotation_agg: A function to aggregate the values in the row annotation. #>       - flip: A logical value indicating whether to flip the heatmap. #>       The idea is that, you can simply set flip = TRUE to flip the heatmap. #>       You don't need to swap the arguments related to rows and columns, except those you specify via ... #>       that are passed to ComplexHeatmap::Heatmap() directly. #>       - alpha: A numeric value between 0 and 1 specifying the transparency of the heatmap cells. #>       - seed: The random seed to use. Default is 8525. #>       - layer_fun_callback: A function to add additional layers to the heatmap. #>       The function should have the following arguments: j, i, x, y, w, h, fill, sr and sc. #>       Please also refer to the layer_fun argument in ComplexHeatmap::Heatmap. #>       - cell_type: A character string specifying the type of the heatmap cells. #>       The default is values. Other options are \"bars\", \"label\", \"dot\", \"violin\", \"boxplot\". #>       Note that for pie chart, the values under columns specified by rows will not be used directly. Instead, the values #>       will just be counted in different pie_group_by groups. NA values will not be counted. #>       - cell_agg: A function to aggregate the values in the cell, for the cell type \"tile\" and \"label\". #>       The default is mean. #>       - combine: Whether to combine the plots into one when facet is FALSE. Default is TRUE. #>       - nrow: A numeric value specifying the number of rows in the facet. #>       - ncol: A numeric value specifying the number of columns in the facet. #>       - byrow: A logical value indicating whether to fill the plots by row. #>       - axes: A string specifying how axes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axes in individual plots. #>        'collect' will remove duplicated axes when placed in the same run of rows or columns of the layout. #>        'collect_x' and 'collect_y' will remove duplicated x-axes in the columns or duplicated y-axes in the rows respectively. #>        #>       - axis_titles: A string specifying how axis titltes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axis titles in individual plots. #>        'collect' will remove duplicated titles in one direction and merge titles in the opposite direction. #>        'collect_x' and 'collect_y' control this for x-axis titles and y-axis titles respectively. #>        #>       - guides: A string specifying how guides should be treated in the layout. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'collect' will collect guides below to the given nesting level, removing duplicates. #>        'keep' will stop collection at this level and let guides be placed alongside their plot. #>        'auto' will allow guides to be collected if a upper level tries, but place them alongside the plot if not. #>        #>       - design: Specification of the location of areas in the layout, passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. When specified, nrow, ncol, and byrow are ignored. #>       See patchwork::wrap_plots() for more details. #>   For SankeyPlot, see plotthis::SankeyPlot(). #>     #>       [...] can be: #>       - in_form: A character string to specify the format of the data. #>       Possible values are \"auto\", \"long\", \"lodes\", \"wide\", \"alluvia\", and \"counts\". #>       - x: A character string specifying the column name of the data frame to plot for the x-axis. #>       - x_sep: A character string to concatenate the columns in x, if multiple columns are provided. #>       - y: A character string specifying the column name of the data frame to plot for the y-axis. #>       - stratum: A character string of the column name to group the nodes for each x. #>       See data for more details. #>       - stratum_sep: A character string to concatenate the columns in stratum, if multiple columns are provided. #>       - alluvium: A character string of the column name to define the links. #>       See data for more details. #>       - alluvium_sep: A character string to concatenate the columns in alluvium, if multiple columns are provided. #>       - split_by_sep: The separator for multiple split_by columns. See split_by #>       - keep_empty: A logical value indicating whether to keep empty groups. #>       If FALSE, empty groups will be removed. #>       - flow: A logical value to use ggalluvial::geom_flow instead of ggalluvial::geom_alluvium. #>       - expand: The values to expand the x and y axes. It is like CSS padding. #>       When a single value is provided, it is used for both axes on both sides. #>       When two values are provided, the first value is used for the top/bottom side and the second value is used for the left/right side. #>       When three values are provided, the first value is used for the top side, the second value is used for the left/right side, and the third value is used for the bottom side. #>       When four values are provided, the values are used for the top, right, bottom, and left sides, respectively. #>       You can also use a named vector to specify the values for each side. #>       When the axis is discrete, the values will be applied as 'add' to the 'expansion' function. #>       When the axis is continuous, the values will be applied as 'mult' to the 'expansion' function. #>       See also https://ggplot2.tidyverse.org/reference/expansion.html #>       - nodes_legend: Controls how the legend of nodes will be shown. Possible values are: #>        #>        \"merge\": Merge the legends of nodes. That is only one legend will be shown for all nodes. #>        \"separate\": Show the legends of nodes separately. That is, nodes on each x will have their own legend. #>        \"none\": Do not show the legend of nodes. #>        \"auto\": Automatically determine how to show the legend. #>       When nodes_label is TRUE, \"none\" will apply. #>       When nodes_label is FALSE, and if stratum is the same as links_fill_by, \"none\" will apply. #>       If there is any overlapping values between the nodes on different x, #>       \"merge\" will apply. Otherwise, \"separate\" will apply. #>        #>       - nodes_color: A character string to color the nodes. #>       Use a special value \".fill\" to use the same color as the fill. #>       - links_fill_by: A character string of the column name to fill the links. #>       - links_fill_by_sep: A character string to concatenate the columns in links_fill_by, if multiple columns are provided. #>       - links_name: A character string to name the legend of links. #>       - links_color: A character string to color the borders of links. #>       Use a special value \".fill\" to use the same color as the fill. #>       - nodes_palette: A character string to specify the palette of nodes fill. #>       - nodes_palcolor: A character vector to specify the colors of nodes fill. #>       - nodes_alpha: A numeric value to specify the transparency of nodes fill. #>       - nodes_label: A logical value to show the labels on the nodes. #>       - nodes_label_miny: A numeric value to specify the minimum y (frequency) to show the labels. #>       - nodes_width: A numeric value to specify the width of nodes. #>       - links_palette: A character string to specify the palette of links fill. #>       - links_palcolor: A character vector to specify the colors of links fill. #>       - links_alpha: A numeric value to specify the transparency of links fill. #>       - legend.box: A character string to specify the box of the legend, either \"vertical\" or \"horizontal\". #>       - aspect.ratio: A numeric value specifying the aspect ratio of the plot. #>       - legend.position: A character string specifying the position of the legend. #>       if waiver(), for single groups, the legend will be \"none\", otherwise \"right\". #>       - legend.direction: A character string specifying the direction of the legend. #>       - flip: A logical value to flip the plot. #>       - theme: A character string or a theme class (i.e. ggplot2::theme_classic) specifying the theme to use. #>       Default is \"theme_this\". #>       - theme_args: A list of arguments to pass to the theme function. #>       - title: A character string specifying the title of the plot. #>       A function can be used to generate the title based on the default title. #>       This is useful when split_by is used and the title needs to be dynamic. #>       - subtitle: A character string specifying the subtitle of the plot. #>       - xlab: A character string specifying the x-axis label. #>       - ylab: A character string specifying the y-axis label. #>       - facet_scales: Whether to scale the axes of facets. Default is \"fixed\" #>       Other options are \"free\", \"free_x\", \"free_y\". See ggplot2::facet_wrap #>       - facet_ncol: A numeric value specifying the number of columns in the facet. #>       When facet_by is a single column and facet_wrap is used. #>       - facet_nrow: A numeric value specifying the number of rows in the facet. #>       When facet_by is a single column and facet_wrap is used. #>       - facet_byrow: A logical value indicating whether to fill the plots by row. Default is TRUE. #>       - seed: The random seed to use. Default is 8525. #>       - combine: Whether to combine the plots into one when facet is FALSE. Default is TRUE. #>       - nrow: A numeric value specifying the number of rows in the facet. #>       - ncol: A numeric value specifying the number of columns in the facet. #>       - byrow: A logical value indicating whether to fill the plots by row. #>       - axes: A string specifying how axes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axes in individual plots. #>        'collect' will remove duplicated axes when placed in the same run of rows or columns of the layout. #>        'collect_x' and 'collect_y' will remove duplicated x-axes in the columns or duplicated y-axes in the rows respectively. #>        #>       - axis_titles: A string specifying how axis titltes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axis titles in individual plots. #>        'collect' will remove duplicated titles in one direction and merge titles in the opposite direction. #>        'collect_x' and 'collect_y' control this for x-axis titles and y-axis titles respectively. #>        #>       - guides: A string specifying how guides should be treated in the layout. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'collect' will collect guides below to the given nesting level, removing duplicates. #>        'keep' will stop collection at this level and let guides be placed alongside their plot. #>        'auto' will allow guides to be collected if a upper level tries, but place them alongside the plot if not. #>        #>       - design: Specification of the location of areas in the layout, passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. When specified, nrow, ncol, and byrow are ignored. #>       See patchwork::wrap_plots() for more details. #>   For DotPlot, see plotthis::DotPlot(). #>    #>       [...] can be: #>       - x: A character vector specifying the column to use for the x-axis. #>       A numeric column is expected. #>       - y: A character vector specifying the column to use for the y-axis. #>       A factor/character column is expected. #>       - x_sep: A character vector to concatenate multiple columns in x. Default is \"_\". #>       - y_sep: A character vector to concatenate multiple columns in y. Default is \"_\". #>       - flip: A logical value indicating whether to flip the x and y axes. Default is FALSE. #>       - split_by_sep: The separator for multiple split_by columns. See split_by #>       - size_name: A character vector specifying the name for the size legend. #>       - fill_name: A character vector specifying the name for the fill legend. #>       - fill_cutoff_name: A character vector specifying the name for the fill cutoff legend. #>       - add_bg: A logical value indicating whether to add a background color to the plot. Default is FALSE. #>       - bg_palette: A character vector specifying the palette for the background color. Default is \"stripe\". #>       - bg_palcolor: A character vector specifying the color for the background color. #>       - bg_alpha: A numeric value specifying the alpha for the background color. Default is 0.2. #>       - bg_direction: A character vector specifying the direction for the background color. Default is \"vertical\". #>       Other options are \"horizontal\". \"h\" and \"v\" are also accepted. #>       - size_by: Which column to use as the size of the dots. It must be a numeric column. #>       If not provided, the size will be the count of the instances for each 'y' in 'x'. #>       For 'ScatterPlot', it can be a single numeric value to specify the size of the dots. #>       - fill_by: Which column to use as the fill the dots. It must be a numeric column. #>       If not provided, all dots will be filled with the same color at the middle of the palette. #>       - fill_cutoff: A numeric value specifying the cutoff for the fill column. #>       - fill_reverse: A logical value indicating whether to reverse the fill direction. Default is FALSE. #>       By default, the fill direction is \"up\". If TRUE, the fill direction is \"down\". #>       When the direction is \"up\", the values less than the cutoff will be filled with grey. #>       When the direction is \"down\", the values greater than the cutoff will be filled with grey. #>       - theme: A character string or a theme class (i.e. ggplot2::theme_classic) specifying the theme to use. #>       Default is \"theme_this\". #>       - theme_args: A list of arguments to pass to the theme function. #>       - palette: A character string specifying the palette to use. #>       A named list or vector can be used to specify the palettes for different split_by values. #>       - palcolor: A character string specifying the color to use in the palette. #>       A named list can be used to specify the colors for different split_by values. #>       If some values are missing, the values from the palette will be used (palcolor will be NULL for those values). #>       - alpha: A numeric value specifying the transparency of the plot. #>       - facet_scales: Whether to scale the axes of facets. Default is \"fixed\" #>       Other options are \"free\", \"free_x\", \"free_y\". See ggplot2::facet_wrap #>       - facet_ncol: A numeric value specifying the number of columns in the facet. #>       When facet_by is a single column and facet_wrap is used. #>       - facet_nrow: A numeric value specifying the number of rows in the facet. #>       When facet_by is a single column and facet_wrap is used. #>       - facet_byrow: A logical value indicating whether to fill the plots by row. Default is TRUE. #>       - seed: The random seed to use. Default is 8525. #>       - aspect.ratio: A numeric value specifying the aspect ratio of the plot. #>       - legend.position: A character string specifying the position of the legend. #>       if waiver(), for single groups, the legend will be \"none\", otherwise \"right\". #>       - legend.direction: A character string specifying the direction of the legend. #>       - title: A character string specifying the title of the plot. #>       A function can be used to generate the title based on the default title. #>       This is useful when split_by is used and the title needs to be dynamic. #>       - subtitle: A character string specifying the subtitle of the plot. #>       - xlab: A character string specifying the x-axis label. #>       - ylab: A character string specifying the y-axis label. #>       - keep_empty: A logical value indicating whether to keep empty groups. #>       If FALSE, empty groups will be removed. #>       - combine: Whether to combine the plots into one when facet is FALSE. Default is TRUE. #>       - nrow: A numeric value specifying the number of rows in the facet. #>       - ncol: A numeric value specifying the number of columns in the facet. #>       - byrow: A logical value indicating whether to fill the plots by row. #>       - axes: A string specifying how axes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axes in individual plots. #>        'collect' will remove duplicated axes when placed in the same run of rows or columns of the layout. #>        'collect_x' and 'collect_y' will remove duplicated x-axes in the columns or duplicated y-axes in the rows respectively. #>        #>       - axis_titles: A string specifying how axis titltes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axis titles in individual plots. #>        'collect' will remove duplicated titles in one direction and merge titles in the opposite direction. #>        'collect_x' and 'collect_y' control this for x-axis titles and y-axis titles respectively. #>        #>       - guides: A string specifying how guides should be treated in the layout. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'collect' will collect guides below to the given nesting level, removing duplicates. #>        'keep' will stop collection at this level and let guides be placed alongside their plot. #>        'auto' will allow guides to be collected if a upper level tries, but place them alongside the plot if not. #>        #>       - design: Specification of the location of areas in the layout, passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. When specified, nrow, ncol, and byrow are ignored. #>       See patchwork::wrap_plots() for more details. #>    #> - value #>    #>   A ggplot object or a list if combine is FALSE #>    #> - examples #>    #>    #>   set.seed(8525) #>   data(cellphonedb_res) #>   CCCPlot(data = cellphonedb_res, plot_type = \"network\", legend.position = \"none\", #>     theme = \"theme_blank\", theme_args = list(add_coord = FALSE)) #>   CCCPlot(cellphonedb_res, plot_type = \"chord\") #>   CCCPlot(cellphonedb_res, plot_type = \"heatmap\") #>   CCCPlot(cellphonedb_res, plot_type = \"dot\", #>     magnitude_agg = mean, magnitude_name = \"Average Interaction Strength\") #>   CCCPlot(cellphonedb_res, plot_type = \"sankey\") #>    #>   cellphonedb_res_sub <- cellphonedb_res[ #>     cellphonedb_res$source %in% c(\"Dendritic\", \"CD14+ Monocyte\"),] #>   CCCPlot(cellphonedb_res_sub, plot_type = \"dot\", method = \"interaction\") #>   CCCPlot(cellphonedb_res_sub, plot_type = \"network\", method = \"interaction\", #>     node_size_by = 1) #>   CCCPlot(cellphonedb_res_sub, plot_type = \"heatmap\", method = \"interaction\", #>     palette = \"Reds\") #>   CCCPlot(cellphonedb_res_sub, plot_type = \"box\", method = \"interaction\") #>   CCCPlot(cellphonedb_res_sub, plot_type = \"violin\", method = \"interaction\", #>     add_box = TRUE) #>   CCCPlot(cellphonedb_res_sub, plot_type = \"ridge\", method = \"interaction\") #>    #>    #>  #>  #> You must code in the programming language 'R' to answer this prompt. #> You can use functions from these packages: scplotter. #> You may not install or load any additional packages. #> These objects already exist in the R session: #>  #> Object_name, Type #> cellphonedb_res, data.frame. #>  #> Do not define these objects in your R code. #> The R code should produce an object that answers the prompt. #> --- Receiving response from LLM provider: --- #> ```r #> CCCPlot(cellphonedb_res, plot_type = \"dot\") #> ``` #> [1] \"list(source = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, ...\" chat <- SCPlotterChat$new(     provider = provider,     verbose = FALSE ) chat$ask(\"Generate a cell-cell communication plot for the cellphonedb_res data.\", verbose = TRUE) #> --- Sending request to LLM provider (gpt-4o-mini): --- #> Based on the following prompt and identify the tool that can be used to handle the request. #> Please only answer with the name of the tool from the listed available ones.  #> If no proper tool is identified from the prompt, use the last mentioned tool in the chat history. #> If no tool is found in the chat history, just answer \"None\". #>  #> --- Prompt --- #> Generate a cell-cell communication plot for the cellphonedb_res data. #>  #> --- Available Tools --- #> - CellStatPlot: Cell statistics plot   #>    This function creates a plot to visualize the statistics of cells in a Seurat object, a Giotto object, #>    a path to an .h5ad file or an opened    H5File    by    hdf5r    package. #>    It can create various types of plots, including bar plots, circos plots, pie charts, pies (heatmap with cell_type = 'pie'), ring/donut plots, trend plots #>    area plots, sankey/alluvial plots, heatmaps, radar plots, spider plots, violin plots, and box plots. #>    The function allows for grouping, splitting, and faceting the data based on metadata columns. #>    It also supports calculating fractions of cells based on specified groupings.#' #>  #> - EnrichmentPlot: Enrichment Plot   #>    This function generates various types of plots for enrichment (over-representation) analysis. #>  #> - ClonalPositionalPlot: ClonalPositionalPlot   #>    Visualize the positional entropy, property or amino acid frequency of CDR3 sequences. #>  #> - ClonalCompositionPlot: ClonalCompositionPlot   #>    Plot the composition of the clones in different samples/groups. #>  #> - ClonalKmerPlot: ClonalKmerPlot   #>    Explore the k-mer frequency of CDR3 sequences. #>  #> - ClonalResidencyPlot: ClonalResidencyPlot   #>    Plot the residency of the clones in different samples. #>  #> - CCCPlot: Cell-Cell Communication Plot   #>    Plot the cell-cell communication. #>    See also: #>     #>     The review:    https://www.sciencedirect.com/science/article/pii/S2452310021000081    #>     The LIANA package:    https://liana-py.readthedocs.io/en/latest/notebooks/basic_usage.html#Tileplot    #>     The CCPlotR package:    https://github.com/Sarah145/CCPlotR    #>     #>  #> - GSEASummaryPlot: Objects exported from other packages   #>    These objects are imported from other packages. Follow the links #>    below to see their documentation. #>     #>     #>         plotthis   GSEAPlot   ,    GSEASummaryPlot   ,    VolcanoPlot    #>  #> - VolcanoPlot: Objects exported from other packages   #>    These objects are imported from other packages. Follow the links #>    below to see their documentation. #>     #>     #>         plotthis   GSEAPlot   ,    GSEASummaryPlot   ,    VolcanoPlot    #>  #> - ClonalVolumePlot: ClonalVolumePlot   #>    ClonalVolumePlot #>  #> - SpatDimPlot: Plot categories for spatial data   #>    Plot categories for spatial data #>  #> - ClonalStatPlot: ClonalStatPlot   #>    Visualize the statistics of the clones. #>  #> - ClonalDynamicsPlot: ClonalDynamicsPlot   #>    This function is deprecated. Please use    ClonalStatPlot()    instead. #>  #> - CellVelocityPlot: Cell Velocity Plot   #>    This function creates a cell velocity plot for a Seurat object, #>    a Giotto object, a path to an .h5ad file or an opened    H5File    by    hdf5r    package. #>    It allows for various customizations such as grouping by metadata, #>    adding edges between cell neighbors, highlighting specific cells, and more. #>    This function is a wrapper around    plotthis::VelocityPlot()   , which provides a #>    flexible way to visualize cell velocities in reduced dimensions. This function #>    extracts the cell embeddings and velocity embeddings from the Seurat or Giotto object #>    and passes them to    plotthis::VelocityPlot()   . #>  #> - FeatureStatPlot: Feature statistic plot   #>    This function creates various types of feature statistic plots for a Seurat object, a Giotto object, #>    a path to an .h5ad file or an opened    H5File    by    hdf5r    package. #>    It allows for plotting features such as gene expression, scores, or other metadata across different groups or conditions. #>    The function supports multiple plot types including violin, box, bar, ridge, dimension reduction, correlation, heatmap, and dot plots. #>    It can also handle multiple features and supports faceting, splitting, and grouping by metadata columns. #>  #> - ClonalGeneUsagePlot: ClonalGeneUsagePlot   #>    ClonalGeneUsagePlot #>  #> - ClonalAbundancePlot: ClonalAbundancePlot   #>    Plot the count or density of the clones at different abundance levels. #>  #> - SpatFeaturePlot: Plot features for spatial data   #>    The features can include  expression, dimension reduction components, metadata, etc #>  #> - ClonalRarefactionPlot: ClonalRarefactionPlot   #>    Plot the rarefaction curves #>  #> - ClonalLengthPlot: ClonalLengthPlot   #>    Plot the length distribution of the CDR3 sequences #>  #> - ClonalOverlapPlot: ClonalOverlapPlot   #>    Plot the overlap of the clones in different samples/groups. #>  #> - ClonalDiversityPlot: ClonalDiversityPlot   #>    Plot the clonal diversities of the samples/groups. #>  #> - GSEAPlot: Objects exported from other packages   #>    These objects are imported from other packages. Follow the links #>    below to see their documentation. #>     #>     #>         plotthis   GSEAPlot   ,    GSEASummaryPlot   ,    VolcanoPlot    #>  #> - CellDimPlot: Cell Dimension Reduction Plot   #>    This function creates a dimension reduction plot for a Seurat object #>    a Giotto object, a path to an .h5ad file or an opened    H5File    by    hdf5r    package. #>    It allows for various customizations such as grouping by metadata, #>    adding edges between cell neighbors, highlighting specific cells, and more. #>    This function is a wrapper around    plotthis::DimPlot()   , which provides a #>    flexible way to visualize cell clusters in reduced dimensions. This function #>    extracts the necessary data from the Seurat or Giotto object and passes it to #>    plotthis::DimPlot()   . #>  #> - ClustreePlot: Clustree plot   #>    This function generates a clustree plot from a data frame or a Seurat object. #>  #> - ListTools: List all available tools #> List all available tools that can be used to handle the chat request. #>  #> - ListData: List all available data objects #> List all available data objects that can be used to handle the chat request. #> --- Receiving response from LLM provider: --- #> CCCPlot #> Tool identified:  CCCPlot #> --- Sending request to LLM provider (gpt-4o-mini): --- #> Based on the following prompt, identify the name of the data object that is mentioned in the prompt. #> The name should be one of the available ones listed. #> If no data object is found based on the prompt, use the last mentioned data object in the chat history. #> If no data object is found in the chat history, just answer \"None\". #>  #> --- Prompt --- #> Generate a cell-cell communication plot for the cellphonedb_res data. #>  #> -- Available Data Objects --- #> - scplotter::cellphonedb_res: A toy example of CellPhoneDB output from LIANA #> - scplotter::ifnb_sub: A subsetted version of 'ifnb' datasets #> - scplotter::pancreas_sub: A subsetted version of mouse 'pancreas' datasets #> - Seurat::cc.genes: Cell cycle genes #> - Seurat::cc.genes.updated.2019: Cell cycle genes: 2019 update #> - SeuratObject::pbmc_small: A small example version of the PBMC dataset #> - scRepertoire::contig_list: A list of 8 single-cell T cell receptor sequences runs. #> - scRepertoire::mini_contig_list: Processed subset of 'contig_list' #> - scRepertoire::scRep_example: A Seurat object of 500 single T cells, #> --- Receiving response from LLM provider: --- #> scplotter::cellphonedb_res #> Data object identified:  scplotter::cellphonedb_res  #> Running tool:  CCCPlot #> Warning in wrap$modify_fn(prompt_text, llm_provider): The 'skimr' package is #> required to skim dataframes. Skim summary of dataframes currently not shown in #> prompt #> --- Sending request to LLM provider (gpt-4o-mini): --- #> Based on the following prompt and the given tool information, generate the code to run the tool. #> The tool or function to be used is: CCCPlot. The data object to be used is: cellphonedb_res. #> Don't quote the data name when using it. The code should be valid R code. #> Only answer with the code that is wrapped between between ```r and ``` to run the tool. #> If there is not enough information in the prompt to run the tool, also refer to the chat history. #>  #> --- Prompt --- #> Generate a cell-cell communication plot for the cellphonedb_res data. #>  #> --- Tool Information --- #> - title #>   Cell-Cell Communication Plot #> - description #>    #>    Plot the cell-cell communication. #>    See also: #>     #>     The review:  https://www.sciencedirect.com/science/article/pii/S2452310021000081  #>     The LIANA package:  https://liana-py.readthedocs.io/en/latest/notebooks/basic_usage.html#Tileplot  #>     The CCPlotR package:  https://github.com/Sarah145/CCPlotR  #>     #>    #> - usage #>    #>   CCCPlot( #>     data, #>     plot_type = c(\"dot\", \"network\", \"chord\", \"circos\", \"heatmap\", \"sankey\", \"alluvial\", #>       \"box\", \"violin\", \"ridge\"), #>     method = c(\"aggregation\", \"interaction\"), #>     magnitude = waiver(), #>     specificity = waiver(), #>     magnitude_agg = length, #>     magnitude_name = \"No. of interactions\", #>     meta_specificity = \"sumlog\", #>     split_by = NULL, #>     x_text_angle = 90, #>     link_curvature = 0.2, #>     link_alpha = 0.6, #>     facet_by = NULL, #>     show_row_names = TRUE, #>     show_column_names = TRUE, #>     ... #>   ) #>    #> - arguments #>   - data: A data frame with the cell-cell communication data. #>   A typical data frame should have the following columns: #>    #>    source The source cell type. #>    target The target cell type. #>    ligand The ligand gene. #>    receptor The receptor gene. #>    ligand_means The mean expression of the ligand gene per cell type. #>    receptor_means The mean expression of the receptor gene per cell type. #>    ligand_props The proportion of cells that express the entity. #>    receptor_props The proportion of cells that express the entity. #>    <magnitude> The magnitude of the communication. #>    <specificity> The specificity of the communication. #>   Depends on the plot_type, some columns are optional. But the source, target, #>   ligand, receptor and <magnitude> are required. #>    #>   - plot_type: The type of plot to use. Default is \"dot\". #>   Possible values are \"network\", \"chord\", \"circos\", \"heatmap\", \"sankey\", \"alluvial\", \"dot\", #>   \"box\", \"violin\" and \"ridge\". #>   For \"box\", \"violin\" and \"ridge\", the method should be \"interaction\". #>    #>    network: A network plot with the source and target cells as the nodes and the communication as the edges. #>    chord: A chord plot with the source and target cells as the nodes and the communication as the chords. #>    circos: Alias of \"chord\". #>    heatmap: A heatmap plot with the source and target cells as the rows and columns. #>    sankey: A sankey plot with the source and target cells as the nodes and the communication as the flows. #>    alluvial: Alias of \"sankey\". #>    dot: A dot plot with the source and target cells as the nodes and the communication as the dots. #>    box: Box plots for source cell types. Each x is a target cell type and the values will be #>   the interaction strengths of the ligand-receptor pairs. #>    violin: Violin plots for source cell types. Each x is a target cell type and the values will be #>   the interaction strengths of the ligand-receptor pairs. #>    ridge: Ridge plots for source cell types. Each row is a target cell type and the values will be #>   the interaction strengths of the ligand-receptor pairs. #>    #>   - method: The method to determine the plot entities. #>    #>    aggregation: Aggregate the ligand-receptor pairs interactions for each source-target pair. #>   Only the source / target pairs will be plotted. #>    interaction: Plot the ligand-receptor pairs interactions directly. #>   The ligand-receptor pairs will also be plotted. #>    #>   - magnitude: The column name in the data to use as the magnitude of the communication. #>   By default, the second last column will be used. #>   See li.mt.show_methods() for the available methods in LIANA. #>   or https://liana-py.readthedocs.io/en/latest/notebooks/basic_usage.html#Tileplot #>   - specificity: The column name in the data to use as the specificity of the communication. #>   By default, the last column will be used. #>   If the method doesn't have a specificity, set it to NULL. #>   - magnitude_agg: A function to aggregate the magnitude of the communication. #>   Default is length. #>   - magnitude_name: The name of the magnitude in the plot. #>   Default is \"No. of interactions\". #>   - meta_specificity: The method to calculate the specificity when there are multiple #>   ligand-receptor pairs interactions. Default is \"sumlog\". #>   It should be one of the methods in the metap package. #>   - split_by: A character vector of column names to split the plots. Default is NULL. #>   - x_text_angle: The angle of the x-axis text. Default is 90. #>   Only used when plot_type is \"dot\". #>   - link_curvature: The curvature of the links. Default is 0.2. #>   Only used when plot_type is \"network\". #>   - link_alpha: The transparency of the links. Default is 0.6. #>   Only used when plot_type is \"network\". #>   - facet_by: A character vector of column names to facet the plots. Default is NULL. #>   It should always be NULL. #>   - show_row_names: Whether to show the row names in the heatmap. Default is TRUE. #>   Only used when plot_type is \"heatmap\". #>   - show_column_names: Whether to show the column names in the heatmap. Default is TRUE. #>   Only used when plot_type is \"heatmap\". #>   - ...: Other arguments passed to the specific plot function. #>    #>    For Network, see plotthis::Network(). #>     #>       [...] can be: #>       - links: A data frame containing the links between nodes. #>       - nodes: A data frame containing the nodes. #>       This is optional. The names of the nodes are extracted from the links data frame. #>       If \"@nodes\" is provided, the nodes data frame will be extracted from the attribute nodes of the links data frame. #>       - split_by_sep: The separator for multiple split_by columns. See split_by #>       - split_nodes: A logical value specifying whether to split the nodes data. #>       If TRUE, the nodes data will also be split by the split_by column. #>       - from: A character string specifying the column name of the links data frame for the source nodes. #>       Default is the first column of the links data frame. #>       - from_sep: A character string to concatenate the columns in from, if multiple columns are provided. #>       - to: A character string specifying the column name of the links data frame for the target nodes. #>       Default is the second column of the links data frame. #>       - to_sep: A character string to concatenate the columns in to, if multiple columns are provided. #>       - node_by: A character string specifying the column name of the nodes data frame for the node names. #>       Default is the first column of the nodes data frame. #>       - node_by_sep: A character string to concatenate the columns in node_by, if multiple columns are provided. #>       - link_weight_by: A numeric value or a character string specifying the column name of the links data frame for the link weight. #>       If a numeric value is provided, all links will have the same weight. #>       This determines the width of the links. #>       - link_weight_name: A character string specifying the name of the link weight in the legend. #>       - link_type_by: A character string specifying the type of the links. #>       This can be \"solid\", \"dashed\", \"dotted\", or a column name from the links data frame. #>       It has higher priority when it is a column name. #>       - link_type_name: A character string specifying the name of the link type in the legend. #>       - node_size_by: A numeric value or a character string specifying the column name of the nodes data frame for the node size. #>       If a numeric value is provided, all nodes will have the same size. #>       - node_size_name: A character string specifying the name of the node size in the legend. #>       - node_color_by: A character string specifying the color of the nodes. #>       This can be a color name, a hex code, or a column name from the nodes data frame. #>       It has higher priority when it is a column name. #>       - node_color_name: A character string specifying the name of the node color in the legend. #>       - node_shape_by: A numeric value or a character string specifying the column name of the nodes data frame for the node shape. #>       If a numeric value is provided, all nodes will have the same shape. #>       - node_shape_name: A character string specifying the name of the node shape in the legend. #>       - node_fill_by: A character string specifying the fill color of the nodes. #>       This can be a color name, a hex code, or a column name from the nodes data frame. #>       It has higher priority when it is a column name. #>       - node_fill_name: A character string specifying the name of the node fill in the legend. #>       - node_alpha: A numeric value specifying the transparency of the nodes. #>       It only works when the nodes are filled. #>       - node_stroke: A numeric value specifying the stroke of the nodes. #>       - cluster_scale: A character string specifying how to scale the clusters. #>       It can be \"fill\", \"color\", or \"shape\". #>       - node_size_range: A numeric vector specifying the range of the node size. #>       - link_weight_range: A numeric vector specifying the range of the link weight. #>       - link_arrow_offset: A numeric value specifying the offset of the link arrows. #>       So that they won't overlap with the nodes. #>       - link_color_by: A character string specifying the colors of the link. It can be: #>        #>        \"from\" means the color of the link is determined by the source node. #>        \"to\" means the color of the link is determined by the target node. #>        Otherwise, the color of the link is determined by the column name from the links data frame. #>        #>       - link_color_name: A character string specifying the name of the link color in the legend. #>       Only used when link_color_by is a column name. #>       - palette: A character string specifying the palette to use. #>       A named list or vector can be used to specify the palettes for different split_by values. #>       - palcolor: A character string specifying the color to use in the palette. #>       A named list can be used to specify the colors for different split_by values. #>       If some values are missing, the values from the palette will be used (palcolor will be NULL for those values). #>       - link_palette: A character string specifying the palette of the links. #>       When link_color_by is \"from\" or \"to\", the palette of the links defaults to the palette of the nodes. #>       - link_palcolor: A character vector specifying the colors of the link palette. #>       When link_color_by is \"from\" or \"to\", the colors of the link palette defaults to the colors of the node palette. #>       - directed: A logical value specifying whether the graph is directed. #>       - layout: A character string specifying the layout of the graph. #>       It can be \"circle\", \"tree\", \"grid\", or a layout function from igraph. #>       - cluster: A character string specifying the clustering method. #>       It can be \"none\", \"fast_greedy\", \"walktrap\", \"edge_betweenness\", \"infomap\", or a clustering function from igraph. #>       - add_mark: A logical value specifying whether to add mark for the clusters to the plot. #>       - mark_expand: A unit value specifying the expansion of the mark. #>       - mark_type: A character string specifying the type of the mark. #>       It can be \"hull\", \"ellipse\", \"rect\", \"circle\", or a mark function from ggforce. #>       - mark_alpha: A numeric value specifying the transparency of the mark. #>       - mark_linetype: A numeric value specifying the line type of the mark. #>       - add_label: A logical value specifying whether to add label to the nodes to the plot. #>       - label_size: A numeric value specifying the size of the label. #>       - label_fg: A character string specifying the foreground color of the label. #>       - label_bg: A character string specifying the background color of the label. #>       - label_bg_r: A numeric value specifying the background ratio of the label. #>       - arrow: An arrow object for the links. #>       - title: A character string specifying the title of the plot. #>       A function can be used to generate the title based on the default title. #>       This is useful when split_by is used and the title needs to be dynamic. #>       - subtitle: A character string specifying the subtitle of the plot. #>       - xlab: A character string specifying the x-axis label. #>       - ylab: A character string specifying the y-axis label. #>       - aspect.ratio: A numeric value specifying the aspect ratio of the plot. #>       - theme: A character string or a theme class (i.e. ggplot2::theme_classic) specifying the theme to use. #>       Default is \"theme_this\". #>       - theme_args: A list of arguments to pass to the theme function. #>       - legend.position: A character string specifying the position of the legend. #>       if waiver(), for single groups, the legend will be \"none\", otherwise \"right\". #>       - legend.direction: A character string specifying the direction of the legend. #>       - seed: The random seed to use. Default is 8525. #>       - combine: Whether to combine the plots into one when facet is FALSE. Default is TRUE. #>       - nrow: A numeric value specifying the number of rows in the facet. #>       - ncol: A numeric value specifying the number of columns in the facet. #>       - byrow: A logical value indicating whether to fill the plots by row. #>       - axes: A string specifying how axes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axes in individual plots. #>        'collect' will remove duplicated axes when placed in the same run of rows or columns of the layout. #>        'collect_x' and 'collect_y' will remove duplicated x-axes in the columns or duplicated y-axes in the rows respectively. #>        #>       - axis_titles: A string specifying how axis titltes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axis titles in individual plots. #>        'collect' will remove duplicated titles in one direction and merge titles in the opposite direction. #>        'collect_x' and 'collect_y' control this for x-axis titles and y-axis titles respectively. #>        #>       - guides: A string specifying how guides should be treated in the layout. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'collect' will collect guides below to the given nesting level, removing duplicates. #>        'keep' will stop collection at this level and let guides be placed alongside their plot. #>        'auto' will allow guides to be collected if a upper level tries, but place them alongside the plot if not. #>        #>       - design: Specification of the location of areas in the layout, passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. When specified, nrow, ncol, and byrow are ignored. #>       See patchwork::wrap_plots() for more details. #>   For ChordPlot, see plotthis::ChordPlot(). #>     #>       [...] can be: #>       - y: A character string specifying the column name of the data frame to plot for the y-axis. #>       - from: A character string of the column name to plot for the source. #>       A character/factor column is expected. #>       - from_sep: A character string to concatenate the columns in from, if multiple columns are provided. #>       - to: A character string of the column name to plot for the target. #>       A character/factor column is expected. #>       - to_sep: A character string to concatenate the columns in to, if multiple columns are provided. #>       - split_by_sep: The separator for multiple split_by columns. See split_by #>       - flip: A logical value to flip the source and target. #>       - links_color: A character string to specify the color of the links. #>       Either \"from\" or \"to\". #>       - theme: A character string or a theme class (i.e. ggplot2::theme_classic) specifying the theme to use. #>       Default is \"theme_this\". #>       - theme_args: A list of arguments to pass to the theme function. #>       - palette: A character string specifying the palette to use. #>       A named list or vector can be used to specify the palettes for different split_by values. #>       - palcolor: A character string specifying the color to use in the palette. #>       A named list can be used to specify the colors for different split_by values. #>       If some values are missing, the values from the palette will be used (palcolor will be NULL for those values). #>       - alpha: A numeric value specifying the transparency of the plot. #>       - labels_rot: A logical value to rotate the labels by 90 degrees. #>       - title: A character string specifying the title of the plot. #>       A function can be used to generate the title based on the default title. #>       This is useful when split_by is used and the title needs to be dynamic. #>       - subtitle: A character string specifying the subtitle of the plot. #>       - seed: The random seed to use. Default is 8525. #>       - combine: Whether to combine the plots into one when facet is FALSE. Default is TRUE. #>       - nrow: A numeric value specifying the number of rows in the facet. #>       - ncol: A numeric value specifying the number of columns in the facet. #>       - byrow: A logical value indicating whether to fill the plots by row. #>       - axes: A string specifying how axes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axes in individual plots. #>        'collect' will remove duplicated axes when placed in the same run of rows or columns of the layout. #>        'collect_x' and 'collect_y' will remove duplicated x-axes in the columns or duplicated y-axes in the rows respectively. #>        #>       - axis_titles: A string specifying how axis titltes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axis titles in individual plots. #>        'collect' will remove duplicated titles in one direction and merge titles in the opposite direction. #>        'collect_x' and 'collect_y' control this for x-axis titles and y-axis titles respectively. #>        #>       - guides: A string specifying how guides should be treated in the layout. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'collect' will collect guides below to the given nesting level, removing duplicates. #>        'keep' will stop collection at this level and let guides be placed alongside their plot. #>        'auto' will allow guides to be collected if a upper level tries, but place them alongside the plot if not. #>        #>       - design: Specification of the location of areas in the layout, passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. When specified, nrow, ncol, and byrow are ignored. #>       See patchwork::wrap_plots() for more details. #>   For Heatmap, see plotthis::Heatmap(). #>     #>       [...] can be: #>       - values_by: A character of column name in data that contains the values to be plotted. #>       This is required when in_form is \"long\". For other formats, the values are pivoted into a column named by values_by. #>       - values_fill: A value to fill in the missing values in the heatmap. #>       When there is missing value in the data, the cluster_rows and cluster_columns will fail. #>       - name: A character string to name the heatmap (will be used to rename values_by). #>       - in_form: The format of the data. Can be one of \"matrix\", \"long\", \"wide-rows\", \"wide-columns\", or \"auto\". #>       Defaults to \"auto\". #>       - split_by_sep: A character string to concat multiple columns in split_by. #>       - rows_by: A vector of column names in data that contains the row information. #>       This is used to create the rows of the heatmap. #>       When in_form is \"long\" or \"wide-columns\", this is requied, and multiple columns can be specified, #>       which will be concatenated by rows_by_sep into a single column. #>       - rows_by_sep: A character string to concat multiple columns in rows_by. #>       - rows_split_by: A character of column name in data that contains the split information for rows. #>       - rows_split_by_sep: A character string to concat multiple columns in rows_split_by. #>       - columns_by: A vector of column names in data that contains the column information. #>       This is used to create the columns of the heatmap. #>       When in_form is \"long\" or \"wide-rows\", this is required, and multiple columns can be specified, #>       which will be concatenated by columns_by_sep into a single column. #>       - columns_by_sep: A character string to concat multiple columns in columns_by. #>       - columns_split_by: A character of column name in data that contains the split information for columns. #>       - columns_split_by_sep: A character string to concat multiple columns in columns_split_by. #>       - rows_data: A data frame containing additional data for rows, which can be used to add annotations to the heatmap. #>       It will be joined to the main data by rows_by and split_by if split_by exists in rows_data. #>       This is useful for adding additional information to the rows of the heatmap. #>       - columns_data: A data frame containing additional data for columns, which can be used to add annotations to the heatmap. #>       It will be joined to the main data by columns_by and split_by if split_by exists in columns_data. #>       This is useful for adding additional information to the columns of the heatmap. #>       - columns_name: A character string to rename the column created by columns_by, which will be reflected in the name of the annotation or legend. #>       - columns_split_name: A character string to rename the column created by columns_split_by, which will be reflected in the name of the annotation or legend. #>       - rows_name: A character string to rename the column created by rows_by, which will be reflected in the name of the annotation or legend. #>       - rows_split_name: A character string to rename the column created by rows_split_by, which will be reflected in the name of the annotation or legend. #>       - palette: A character string specifying the palette of the heatmap cells. #>       - palcolor: A character vector of colors to override the palette of the heatmap cells. #>       - rows_palette: A character string specifying the palette of the row group annotation. #>       The default is \"Paired\". #>       - rows_palcolor: A character vector of colors to override the palette of the row group annotation. #>       - rows_split_palette: A character string specifying the palette of the row split annotation. #>       The default is \"simspec\". #>       - rows_split_palcolor: A character vector of colors to override the palette of the row split annotation. #>       - columns_palette: A character string specifying the palette of the column group annotation. #>       The default is \"Paired\". #>       - columns_palcolor: A character vector of colors to override the palette of the column group annotation. #>       - columns_split_palette: A character string specifying the palette of the column split annotation. #>       The default is \"simspec\". #>       - columns_split_palcolor: A character vector of colors to override the palette of the column split annotation. #>       - pie_size_name: A character string specifying the name of the legend for the pie size. #>       - pie_size: A numeric value or a function specifying the size of the pie chart. #>       If it is a function, the function should take count as the argument and return the size. #>       - pie_values: A function or character that can be converted to a function by match.arg() #>       to calculate the values for the pie chart. Default is \"length\". #>       The function should take a vector of values as the argument and return a single value, for each #>       group in pie_group_by. #>       - pie_name: A character string to rename the column created by pie_group_by, which will be reflected in the name of the annotation or legend. #>       - pie_group_by: A character of column name in data that contains the group information for pie charts. #>       This is used to create pie charts in the heatmap when cell_type is \"pie\". #>       - pie_group_by_sep: A character string to concat multiple columns in pie_group_by. #>       - pie_palette: A character string specifying the palette of the pie chart. #>       - pie_palcolor: A character vector of colors to override the palette of the pie chart. #>       - bars_sample: An integer specifying the number of samples to draw the bars. #>       - label: A function to calculate the labels for the heatmap cells. #>       It can take either 1, 3, or 5 arguments. The first argument is the aggregated values. #>       If it takes 3 arguments, the second and third arguments are the row and column indices. #>       If it takes 5 arguments, the second and third arguments are the row and column indices, #>       the fourth and fifth arguments are the row and column names. #>       The function should return a character vector of the same length as the aggregated values. #>       If the function returns NA, no label will be shown for that cell. #>       - label_size: A numeric value specifying the size of the labels when cell_type = \"label\". #>       - violin_fill: A character vector of colors to override the fill color of the violin plot. #>       If NULL, the fill color will be the same as the annotion. #>       - boxplot_fill: A character vector of colors to override the fill color of the boxplot. #>       If NULL, the fill color will be the same as the annotion. #>       - dot_size: A numeric value specifying the size of the dot or a function to calculate the size #>       from the values in the cell or a function to calculate the size from the values in the cell. #>       - dot_size_name: A character string specifying the name of the legend for the dot size. #>       If NULL, the dot size legend will not be shown. #>       - legend_items: A numeric vector with names to specifiy the items in the main legend. #>       The names will be working as the labels of the legend items. #>       - legend_discrete: A logical value indicating whether the main legend is discrete. #>       - legend.position: A character string specifying the position of the legend. #>       if waiver(), for single groups, the legend will be \"none\", otherwise \"right\". #>       - legend.direction: A character string specifying the direction of the legend. #>       - lower_quantile, upper_quantile, lower_cutoff, upper_cutoff: Vector of minimum and maximum cutoff values or quantile values for each feature. #>       It's applied to aggregated values when aggregated values are used (e.g. plot_type tile, label, etc). #>       It's applied to raw values when raw values are used (e.g. plot_type bars, etc). #>       - add_bg: A logical value indicating whether to add a background to the heatmap. #>       Does not work with cell_type = \"bars\" or cell_type = \"tile\". #>       - bg_alpha: A numeric value between 0 and 1 specifying the transparency of the background. #>       - add_reticle: A logical value indicating whether to add a reticle to the heatmap. #>       - reticle_color: A character string specifying the color of the reticle. #>       - column_name_annotation: A logical value indicating whether to add the column annotation for the column names. #>       which is a simple annotaion indicating the column names. #>       - column_name_legend: A logical value indicating whether to show the legend of the column name annotation. #>       - row_name_annotation: A logical value indicating whether to add the row annotation for the row names. #>       which is a simple annotaion indicating the row names. #>       - row_name_legend: A logical value indicating whether to show the legend of the row name annotation. #>       - cluster_columns: A logical value indicating whether to cluster the columns. #>       If TRUE and columns_split_by is provided, the clustering will only be applied to the columns within the same split. #>       - cluster_rows: A logical value indicating whether to cluster the rows. #>       If TRUE and rows_split_by is provided, the clustering will only be applied to the rows within the same split. #>       - border: A logical value indicating whether to draw the border of the heatmap. #>       If TRUE, the borders of the slices will be also drawn. #>       - title: The global (column) title of the heatmap #>       - column_title: A character string/vector of the column name(s) to use as the title of the column group annotation. #>       - row_title: A character string/vector of the column name(s) to use as the title of the row group annotation. #>       - na_col: A character string specifying the color for missing values. #>       The default is \"grey85\". #>       - row_names_side: A character string specifying the side of the row names. #>       The default is \"right\". #>       - column_names_side: A character string specifying the side of the column names. #>       The default is \"bottom\". #>       - column_annotation: A character string/vector of the column name(s) to use as the column annotation. #>       Or a list with the keys as the names of the annotation and the values as the column names. #>       - column_annotation_side: A character string specifying the side of the column annotation. #>       Could be a list with the keys as the names of the annotation and the values as the sides. #>       - column_annotation_palette: A character string specifying the palette of the column annotation. #>       The default is \"Paired\". #>       Could be a list with the keys as the names of the annotation and the values as the palettes. #>       - column_annotation_palcolor: A character vector of colors to override the palette of the column annotation. #>       Could be a list with the keys as the names of the annotation and the values as the palcolors. #>       - column_annotation_type: A character string specifying the type of the column annotation. #>       The default is \"auto\". Other options are \"simple\", \"pie\", \"ring\", \"bar\", \"violin\", \"boxplot\", \"density\". #>       Could be a list with the keys as the names of the annotation and the values as the types. #>       If the type is \"auto\", the type will be determined by the type and number of the column data. #>       - column_annotation_params: A list of parameters passed to the annotation function. #>       Could be a list with the keys as the names of the annotation and the values as the parameters. #>       - column_annotation_agg: A function to aggregate the values in the column annotation. #>       - row_annotation: A character string/vector of the column name(s) to use as the row annotation. #>       Or a list with the keys as the names of the annotation and the values as the column names. #>       - row_annotation_side: A character string specifying the side of the row annotation. #>       Could be a list with the keys as the names of the annotation and the values as the sides. #>       - row_annotation_palette: A character string specifying the palette of the row annotation. #>       The default is \"Paired\". #>       Could be a list with the keys as the names of the annotation and the values as the palettes. #>       - row_annotation_palcolor: A character vector of colors to override the palette of the row annotation. #>       Could be a list with the keys as the names of the annotation and the values as the palcolors. #>       - row_annotation_type: A character string specifying the type of the row annotation. #>       The default is \"auto\". Other options are \"simple\", \"pie\", \"ring\", \"bar\", \"violin\", \"boxplot\", \"density\". #>       Could be a list with the keys as the names of the annotation and the values as the types. #>       If the type is \"auto\", the type will be determined by the type and number of the row data. #>       - row_annotation_params: A list of parameters passed to the annotation function. #>       Could be a list with the keys as the names of the annotation and the values as the parameters. #>       - row_annotation_agg: A function to aggregate the values in the row annotation. #>       - flip: A logical value indicating whether to flip the heatmap. #>       The idea is that, you can simply set flip = TRUE to flip the heatmap. #>       You don't need to swap the arguments related to rows and columns, except those you specify via ... #>       that are passed to ComplexHeatmap::Heatmap() directly. #>       - alpha: A numeric value between 0 and 1 specifying the transparency of the heatmap cells. #>       - seed: The random seed to use. Default is 8525. #>       - layer_fun_callback: A function to add additional layers to the heatmap. #>       The function should have the following arguments: j, i, x, y, w, h, fill, sr and sc. #>       Please also refer to the layer_fun argument in ComplexHeatmap::Heatmap. #>       - cell_type: A character string specifying the type of the heatmap cells. #>       The default is values. Other options are \"bars\", \"label\", \"dot\", \"violin\", \"boxplot\". #>       Note that for pie chart, the values under columns specified by rows will not be used directly. Instead, the values #>       will just be counted in different pie_group_by groups. NA values will not be counted. #>       - cell_agg: A function to aggregate the values in the cell, for the cell type \"tile\" and \"label\". #>       The default is mean. #>       - combine: Whether to combine the plots into one when facet is FALSE. Default is TRUE. #>       - nrow: A numeric value specifying the number of rows in the facet. #>       - ncol: A numeric value specifying the number of columns in the facet. #>       - byrow: A logical value indicating whether to fill the plots by row. #>       - axes: A string specifying how axes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axes in individual plots. #>        'collect' will remove duplicated axes when placed in the same run of rows or columns of the layout. #>        'collect_x' and 'collect_y' will remove duplicated x-axes in the columns or duplicated y-axes in the rows respectively. #>        #>       - axis_titles: A string specifying how axis titltes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axis titles in individual plots. #>        'collect' will remove duplicated titles in one direction and merge titles in the opposite direction. #>        'collect_x' and 'collect_y' control this for x-axis titles and y-axis titles respectively. #>        #>       - guides: A string specifying how guides should be treated in the layout. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'collect' will collect guides below to the given nesting level, removing duplicates. #>        'keep' will stop collection at this level and let guides be placed alongside their plot. #>        'auto' will allow guides to be collected if a upper level tries, but place them alongside the plot if not. #>        #>       - design: Specification of the location of areas in the layout, passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. When specified, nrow, ncol, and byrow are ignored. #>       See patchwork::wrap_plots() for more details. #>   For SankeyPlot, see plotthis::SankeyPlot(). #>     #>       [...] can be: #>       - in_form: A character string to specify the format of the data. #>       Possible values are \"auto\", \"long\", \"lodes\", \"wide\", \"alluvia\", and \"counts\". #>       - x: A character string specifying the column name of the data frame to plot for the x-axis. #>       - x_sep: A character string to concatenate the columns in x, if multiple columns are provided. #>       - y: A character string specifying the column name of the data frame to plot for the y-axis. #>       - stratum: A character string of the column name to group the nodes for each x. #>       See data for more details. #>       - stratum_sep: A character string to concatenate the columns in stratum, if multiple columns are provided. #>       - alluvium: A character string of the column name to define the links. #>       See data for more details. #>       - alluvium_sep: A character string to concatenate the columns in alluvium, if multiple columns are provided. #>       - split_by_sep: The separator for multiple split_by columns. See split_by #>       - keep_empty: A logical value indicating whether to keep empty groups. #>       If FALSE, empty groups will be removed. #>       - flow: A logical value to use ggalluvial::geom_flow instead of ggalluvial::geom_alluvium. #>       - expand: The values to expand the x and y axes. It is like CSS padding. #>       When a single value is provided, it is used for both axes on both sides. #>       When two values are provided, the first value is used for the top/bottom side and the second value is used for the left/right side. #>       When three values are provided, the first value is used for the top side, the second value is used for the left/right side, and the third value is used for the bottom side. #>       When four values are provided, the values are used for the top, right, bottom, and left sides, respectively. #>       You can also use a named vector to specify the values for each side. #>       When the axis is discrete, the values will be applied as 'add' to the 'expansion' function. #>       When the axis is continuous, the values will be applied as 'mult' to the 'expansion' function. #>       See also https://ggplot2.tidyverse.org/reference/expansion.html #>       - nodes_legend: Controls how the legend of nodes will be shown. Possible values are: #>        #>        \"merge\": Merge the legends of nodes. That is only one legend will be shown for all nodes. #>        \"separate\": Show the legends of nodes separately. That is, nodes on each x will have their own legend. #>        \"none\": Do not show the legend of nodes. #>        \"auto\": Automatically determine how to show the legend. #>       When nodes_label is TRUE, \"none\" will apply. #>       When nodes_label is FALSE, and if stratum is the same as links_fill_by, \"none\" will apply. #>       If there is any overlapping values between the nodes on different x, #>       \"merge\" will apply. Otherwise, \"separate\" will apply. #>        #>       - nodes_color: A character string to color the nodes. #>       Use a special value \".fill\" to use the same color as the fill. #>       - links_fill_by: A character string of the column name to fill the links. #>       - links_fill_by_sep: A character string to concatenate the columns in links_fill_by, if multiple columns are provided. #>       - links_name: A character string to name the legend of links. #>       - links_color: A character string to color the borders of links. #>       Use a special value \".fill\" to use the same color as the fill. #>       - nodes_palette: A character string to specify the palette of nodes fill. #>       - nodes_palcolor: A character vector to specify the colors of nodes fill. #>       - nodes_alpha: A numeric value to specify the transparency of nodes fill. #>       - nodes_label: A logical value to show the labels on the nodes. #>       - nodes_label_miny: A numeric value to specify the minimum y (frequency) to show the labels. #>       - nodes_width: A numeric value to specify the width of nodes. #>       - links_palette: A character string to specify the palette of links fill. #>       - links_palcolor: A character vector to specify the colors of links fill. #>       - links_alpha: A numeric value to specify the transparency of links fill. #>       - legend.box: A character string to specify the box of the legend, either \"vertical\" or \"horizontal\". #>       - aspect.ratio: A numeric value specifying the aspect ratio of the plot. #>       - legend.position: A character string specifying the position of the legend. #>       if waiver(), for single groups, the legend will be \"none\", otherwise \"right\". #>       - legend.direction: A character string specifying the direction of the legend. #>       - flip: A logical value to flip the plot. #>       - theme: A character string or a theme class (i.e. ggplot2::theme_classic) specifying the theme to use. #>       Default is \"theme_this\". #>       - theme_args: A list of arguments to pass to the theme function. #>       - title: A character string specifying the title of the plot. #>       A function can be used to generate the title based on the default title. #>       This is useful when split_by is used and the title needs to be dynamic. #>       - subtitle: A character string specifying the subtitle of the plot. #>       - xlab: A character string specifying the x-axis label. #>       - ylab: A character string specifying the y-axis label. #>       - facet_scales: Whether to scale the axes of facets. Default is \"fixed\" #>       Other options are \"free\", \"free_x\", \"free_y\". See ggplot2::facet_wrap #>       - facet_ncol: A numeric value specifying the number of columns in the facet. #>       When facet_by is a single column and facet_wrap is used. #>       - facet_nrow: A numeric value specifying the number of rows in the facet. #>       When facet_by is a single column and facet_wrap is used. #>       - facet_byrow: A logical value indicating whether to fill the plots by row. Default is TRUE. #>       - seed: The random seed to use. Default is 8525. #>       - combine: Whether to combine the plots into one when facet is FALSE. Default is TRUE. #>       - nrow: A numeric value specifying the number of rows in the facet. #>       - ncol: A numeric value specifying the number of columns in the facet. #>       - byrow: A logical value indicating whether to fill the plots by row. #>       - axes: A string specifying how axes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axes in individual plots. #>        'collect' will remove duplicated axes when placed in the same run of rows or columns of the layout. #>        'collect_x' and 'collect_y' will remove duplicated x-axes in the columns or duplicated y-axes in the rows respectively. #>        #>       - axis_titles: A string specifying how axis titltes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axis titles in individual plots. #>        'collect' will remove duplicated titles in one direction and merge titles in the opposite direction. #>        'collect_x' and 'collect_y' control this for x-axis titles and y-axis titles respectively. #>        #>       - guides: A string specifying how guides should be treated in the layout. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'collect' will collect guides below to the given nesting level, removing duplicates. #>        'keep' will stop collection at this level and let guides be placed alongside their plot. #>        'auto' will allow guides to be collected if a upper level tries, but place them alongside the plot if not. #>        #>       - design: Specification of the location of areas in the layout, passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. When specified, nrow, ncol, and byrow are ignored. #>       See patchwork::wrap_plots() for more details. #>   For DotPlot, see plotthis::DotPlot(). #>    #>       [...] can be: #>       - x: A character vector specifying the column to use for the x-axis. #>       A numeric column is expected. #>       - y: A character vector specifying the column to use for the y-axis. #>       A factor/character column is expected. #>       - x_sep: A character vector to concatenate multiple columns in x. Default is \"_\". #>       - y_sep: A character vector to concatenate multiple columns in y. Default is \"_\". #>       - flip: A logical value indicating whether to flip the x and y axes. Default is FALSE. #>       - split_by_sep: The separator for multiple split_by columns. See split_by #>       - size_name: A character vector specifying the name for the size legend. #>       - fill_name: A character vector specifying the name for the fill legend. #>       - fill_cutoff_name: A character vector specifying the name for the fill cutoff legend. #>       - add_bg: A logical value indicating whether to add a background color to the plot. Default is FALSE. #>       - bg_palette: A character vector specifying the palette for the background color. Default is \"stripe\". #>       - bg_palcolor: A character vector specifying the color for the background color. #>       - bg_alpha: A numeric value specifying the alpha for the background color. Default is 0.2. #>       - bg_direction: A character vector specifying the direction for the background color. Default is \"vertical\". #>       Other options are \"horizontal\". \"h\" and \"v\" are also accepted. #>       - size_by: Which column to use as the size of the dots. It must be a numeric column. #>       If not provided, the size will be the count of the instances for each 'y' in 'x'. #>       For 'ScatterPlot', it can be a single numeric value to specify the size of the dots. #>       - fill_by: Which column to use as the fill the dots. It must be a numeric column. #>       If not provided, all dots will be filled with the same color at the middle of the palette. #>       - fill_cutoff: A numeric value specifying the cutoff for the fill column. #>       - fill_reverse: A logical value indicating whether to reverse the fill direction. Default is FALSE. #>       By default, the fill direction is \"up\". If TRUE, the fill direction is \"down\". #>       When the direction is \"up\", the values less than the cutoff will be filled with grey. #>       When the direction is \"down\", the values greater than the cutoff will be filled with grey. #>       - theme: A character string or a theme class (i.e. ggplot2::theme_classic) specifying the theme to use. #>       Default is \"theme_this\". #>       - theme_args: A list of arguments to pass to the theme function. #>       - palette: A character string specifying the palette to use. #>       A named list or vector can be used to specify the palettes for different split_by values. #>       - palcolor: A character string specifying the color to use in the palette. #>       A named list can be used to specify the colors for different split_by values. #>       If some values are missing, the values from the palette will be used (palcolor will be NULL for those values). #>       - alpha: A numeric value specifying the transparency of the plot. #>       - facet_scales: Whether to scale the axes of facets. Default is \"fixed\" #>       Other options are \"free\", \"free_x\", \"free_y\". See ggplot2::facet_wrap #>       - facet_ncol: A numeric value specifying the number of columns in the facet. #>       When facet_by is a single column and facet_wrap is used. #>       - facet_nrow: A numeric value specifying the number of rows in the facet. #>       When facet_by is a single column and facet_wrap is used. #>       - facet_byrow: A logical value indicating whether to fill the plots by row. Default is TRUE. #>       - seed: The random seed to use. Default is 8525. #>       - aspect.ratio: A numeric value specifying the aspect ratio of the plot. #>       - legend.position: A character string specifying the position of the legend. #>       if waiver(), for single groups, the legend will be \"none\", otherwise \"right\". #>       - legend.direction: A character string specifying the direction of the legend. #>       - title: A character string specifying the title of the plot. #>       A function can be used to generate the title based on the default title. #>       This is useful when split_by is used and the title needs to be dynamic. #>       - subtitle: A character string specifying the subtitle of the plot. #>       - xlab: A character string specifying the x-axis label. #>       - ylab: A character string specifying the y-axis label. #>       - keep_empty: A logical value indicating whether to keep empty groups. #>       If FALSE, empty groups will be removed. #>       - combine: Whether to combine the plots into one when facet is FALSE. Default is TRUE. #>       - nrow: A numeric value specifying the number of rows in the facet. #>       - ncol: A numeric value specifying the number of columns in the facet. #>       - byrow: A logical value indicating whether to fill the plots by row. #>       - axes: A string specifying how axes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axes in individual plots. #>        'collect' will remove duplicated axes when placed in the same run of rows or columns of the layout. #>        'collect_x' and 'collect_y' will remove duplicated x-axes in the columns or duplicated y-axes in the rows respectively. #>        #>       - axis_titles: A string specifying how axis titltes should be treated. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'keep' will retain all axis titles in individual plots. #>        'collect' will remove duplicated titles in one direction and merge titles in the opposite direction. #>        'collect_x' and 'collect_y' control this for x-axis titles and y-axis titles respectively. #>        #>       - guides: A string specifying how guides should be treated in the layout. Passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. #>       Options are: #>        #>        'collect' will collect guides below to the given nesting level, removing duplicates. #>        'keep' will stop collection at this level and let guides be placed alongside their plot. #>        'auto' will allow guides to be collected if a upper level tries, but place them alongside the plot if not. #>        #>       - design: Specification of the location of areas in the layout, passed to patchwork::wrap_plots(). #>       Only relevant when split_by is used and combine is TRUE. When specified, nrow, ncol, and byrow are ignored. #>       See patchwork::wrap_plots() for more details. #>    #> - value #>    #>   A ggplot object or a list if combine is FALSE #>    #> - examples #>    #>    #>   set.seed(8525) #>   data(cellphonedb_res) #>   CCCPlot(data = cellphonedb_res, plot_type = \"network\", legend.position = \"none\", #>     theme = \"theme_blank\", theme_args = list(add_coord = FALSE)) #>   CCCPlot(cellphonedb_res, plot_type = \"chord\") #>   CCCPlot(cellphonedb_res, plot_type = \"heatmap\") #>   CCCPlot(cellphonedb_res, plot_type = \"dot\", #>     magnitude_agg = mean, magnitude_name = \"Average Interaction Strength\") #>   CCCPlot(cellphonedb_res, plot_type = \"sankey\") #>    #>   cellphonedb_res_sub <- cellphonedb_res[ #>     cellphonedb_res$source %in% c(\"Dendritic\", \"CD14+ Monocyte\"),] #>   CCCPlot(cellphonedb_res_sub, plot_type = \"dot\", method = \"interaction\") #>   CCCPlot(cellphonedb_res_sub, plot_type = \"network\", method = \"interaction\", #>     node_size_by = 1) #>   CCCPlot(cellphonedb_res_sub, plot_type = \"heatmap\", method = \"interaction\", #>     palette = \"Reds\") #>   CCCPlot(cellphonedb_res_sub, plot_type = \"box\", method = \"interaction\") #>   CCCPlot(cellphonedb_res_sub, plot_type = \"violin\", method = \"interaction\", #>     add_box = TRUE) #>   CCCPlot(cellphonedb_res_sub, plot_type = \"ridge\", method = \"interaction\") #>    #>    #>  #>  #> You must code in the programming language 'R' to answer this prompt. #> You can use functions from these packages: scplotter. #> You may not install or load any additional packages. #> These objects already exist in the R session: #>  #> Object_name, Type #> cellphonedb_res, data.frame. #>  #> Do not define these objects in your R code. #> The R code should produce an object that answers the prompt. #> --- Receiving response from LLM provider: --- #> ```r #> CCCPlot(data = cellphonedb_res, plot_type = \"dot\") #> ``` #> [1] \"list(source = c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, ...\""},{"path":"https://pwwang.github.io/scplotter/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Panwen Wang. Author, maintainer.","code":""},{"path":"https://pwwang.github.io/scplotter/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang P (2025). scplotter: Publication Quality Plots Single Cell Data Analysis. R package version 0.5.3https://github.com/pwwang/scplotter https://pwwang.github.io/scplotter/, https://github.com/pwwang/scplotter    https://pwwang.github.io/scplotter/.","code":"@Manual{,   title = {scplotter: Publication Quality Plots for Single Cell Data Analysis},   author = {Panwen Wang},   year = {2025},   note = {R package version 0.5.3https://github.com/pwwang/scplotter     https://pwwang.github.io/scplotter/},   url = {https://github.com/pwwang/scplotter     https://pwwang.github.io/scplotter/}, }"},{"path":"https://pwwang.github.io/scplotter/index.html","id":"scplotter-","dir":"","previous_headings":"","what":"Publication Quality Plots for Single Cell Data Analysis","title":"Publication Quality Plots for Single Cell Data Analysis","text":"scplotter R package built upon plotthis. provides set functions visualize single-cell sequencing data easy efficient way.","code":""},{"path":"https://pwwang.github.io/scplotter/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Publication Quality Plots for Single Cell Data Analysis","text":"","code":"remotes::install_github(\"pwwang/scplotter\") # or devtools::install_github(\"pwwang/scplotter\") # or using conda $ conda install pwwang::r-scplotter"},{"path":[]},{"path":"https://pwwang.github.io/scplotter/index.html","id":"scrna-seq","dir":"","previous_headings":"Gallery","what":"scRNA-seq","title":"Publication Quality Plots for Single Cell Data Analysis","text":"CellDimPlot  CellStatPlot  ClustreePlot | CellVelocityPlot  FeatureStatPlot  EnrichmentPlot  GSEASummaryPlot | GSEAPlot  VolcanoPlot  CCCPlot (Cell-Cell Communication Plot)","code":""},{"path":"https://pwwang.github.io/scplotter/index.html","id":"sctcr-seqscbcr-seq","dir":"","previous_headings":"Gallery","what":"scTCR-seq/scBCR-seq","title":"Publication Quality Plots for Single Cell Data Analysis","text":"ClonalVolumePlot | ClonalAbundancePlot | ClonalResidencyPlot | ClonalDynamicsPlot | ClonalCompositionPlot | ClonalOverlapPlot | ClonalGeneUsagePlot  ClonalRarefactionPlot | ClonalGeneUsagePlot | ClonalDiversityPlot | ClonalPositionalPlot","code":""},{"path":"https://pwwang.github.io/scplotter/index.html","id":"spatial-data","dir":"","previous_headings":"","what":"Spatial data","title":"Publication Quality Plots for Single Cell Data Analysis","text":"SpatDimPlot | SpatFeaturePlot","code":""},{"path":"https://pwwang.github.io/scplotter/index.html","id":"visualization-with-llms","dir":"","previous_headings":"","what":"Visualization with LLMs","title":"Publication Quality Plots for Single Cell Data Analysis","text":"","code":"provider <- tidyprompt::llm_provider_openai(api_key = Sys.getenv(\"OPENAI_API_KEY\")) chat <- SCPlotterChat$new(provider = provider) chat$ask(\"Generate a cell-cell communication plot for the cellphonedb_res data.\") # Tool identified:  CCCPlot # Data object identified:  cellphonedb_res # Running tool:  CCCPlot chat$ask(\"Do a heatmap instead\") # Tool identified:  CCCPlot # Data object identified:  cellphonedb_res # Running tool:  CCCPlot"},{"path":"https://pwwang.github.io/scplotter/index.html","id":"credits","dir":"","previous_headings":"","what":"Credits","title":"Publication Quality Plots for Single Cell Data Analysis","text":"scplotter built upon following fantastic packages: plotthis core plotting functions. tidyprompt LLM interface. Seurat Seurat object support. LIANA cell-cell communication analysis. scRepertoire TCR/BCR repertoire analysis. Giotto spatial data analysis.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/CCCPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell-Cell Communication Plot — CCCPlot","title":"Cell-Cell Communication Plot — CCCPlot","text":"Plot cell-cell communication. See also: review: https://www.sciencedirect.com/science/article/pii/S2452310021000081 LIANA package: https://liana-py.readthedocs.io/en/latest/notebooks/basic_usage.html#Tileplot CCPlotR package: https://github.com/Sarah145/CCPlotR","code":""},{"path":"https://pwwang.github.io/scplotter/reference/CCCPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell-Cell Communication Plot — CCCPlot","text":"","code":"CCCPlot(   data,   plot_type = c(\"dot\", \"network\", \"chord\", \"circos\", \"heatmap\", \"sankey\", \"alluvial\",     \"box\", \"violin\", \"ridge\"),   method = c(\"aggregation\", \"interaction\"),   magnitude = waiver(),   specificity = waiver(),   magnitude_agg = length,   magnitude_name = \"No. of interactions\",   meta_specificity = \"sumlog\",   split_by = NULL,   x_text_angle = 90,   link_curvature = 0.2,   link_alpha = 0.6,   facet_by = NULL,   show_row_names = TRUE,   show_column_names = TRUE,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/CCCPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cell-Cell Communication Plot — CCCPlot","text":"data data frame cell-cell communication data. typical data frame following columns: source source cell type. target target cell type. ligand ligand gene. receptor receptor gene. ligand_means mean expression ligand gene per cell type. receptor_means mean expression receptor gene per cell type. ligand_props proportion cells express entity. receptor_props proportion cells express entity. <magnitude> magnitude communication. <specificity> specificity communication. Depends plot_type, columns optional. source, target, ligand, receptor <magnitude> required. plot_type type plot use. Default \"dot\". Possible values \"network\", \"chord\", \"circos\", \"heatmap\", \"sankey\", \"alluvial\", \"dot\", \"box\", \"violin\" \"ridge\". \"box\", \"violin\" \"ridge\", method \"interaction\". network: network plot source target cells nodes communication edges. chord: chord plot source target cells nodes communication chords. circos: Alias \"chord\". heatmap: heatmap plot source target cells rows columns. sankey: sankey plot source target cells nodes communication flows. alluvial: Alias \"sankey\". dot: dot plot source target cells nodes communication dots. box: Box plots source cell types. x target cell type values interaction strengths ligand-receptor pairs. violin: Violin plots source cell types. x target cell type values interaction strengths ligand-receptor pairs. ridge: Ridge plots source cell types. row target cell type values interaction strengths ligand-receptor pairs. method method determine plot entities. aggregation: Aggregate ligand-receptor pairs interactions source-target pair. source / target pairs plotted. interaction: Plot ligand-receptor pairs interactions directly. ligand-receptor pairs also plotted. magnitude column name data use magnitude communication. default, second last column used. See li.mt.show_methods() available methods LIANA. https://liana-py.readthedocs.io/en/latest/notebooks/basic_usage.html#Tileplot specificity column name data use specificity communication. default, last column used. method specificity, set NULL. magnitude_agg function aggregate magnitude communication. Default length. magnitude_name name magnitude plot. Default \". interactions\". meta_specificity method calculate specificity multiple ligand-receptor pairs interactions. Default \"sumlog\". one methods metap package. split_by character vector column names split plots. Default NULL. x_text_angle angle x-axis text. Default 90. used plot_type \"dot\". link_curvature curvature links. Default 0.2. used plot_type \"network\". link_alpha transparency links. Default 0.6. used plot_type \"network\". facet_by character vector column names facet plots. Default NULL. always NULL. show_row_names Whether show row names heatmap. Default TRUE. used plot_type \"heatmap\". show_column_names Whether show column names heatmap. Default TRUE. used plot_type \"heatmap\". ... arguments passed specific plot function. Network, see plotthis::Network(). ChordPlot, see plotthis::ChordPlot(). Heatmap, see plotthis::Heatmap(). SankeyPlot, see plotthis::SankeyPlot(). DotPlot, see plotthis::DotPlot().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/CCCPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cell-Cell Communication Plot — CCCPlot","text":"ggplot object list combine FALSE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/CCCPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cell-Cell Communication Plot — CCCPlot","text":"","code":"# \\donttest{ set.seed(8525) data(cellphonedb_res) CCCPlot(data = cellphonedb_res, plot_type = \"network\", legend.position = \"none\",   theme = \"theme_blank\", theme_args = list(add_coord = FALSE))  CCCPlot(cellphonedb_res, plot_type = \"chord\")  CCCPlot(cellphonedb_res, plot_type = \"heatmap\")  CCCPlot(cellphonedb_res, plot_type = \"dot\",   magnitude_agg = mean, magnitude_name = \"Average Interaction Strength\")  CCCPlot(cellphonedb_res, plot_type = \"sankey\") #> Missing alluvia for some stratum combinations.   cellphonedb_res_sub <- cellphonedb_res[   cellphonedb_res$source %in% c(\"Dendritic\", \"CD14+ Monocyte\"),] CCCPlot(cellphonedb_res_sub, plot_type = \"dot\", method = \"interaction\") #> Multiple columns are provided in 'y'. They will be concatenated into one column.  CCCPlot(cellphonedb_res_sub, plot_type = \"network\", method = \"interaction\",   node_size_by = 1)  CCCPlot(cellphonedb_res_sub, plot_type = \"heatmap\", method = \"interaction\",   palette = \"Reds\")  CCCPlot(cellphonedb_res_sub, plot_type = \"box\", method = \"interaction\")  CCCPlot(cellphonedb_res_sub, plot_type = \"violin\", method = \"interaction\",   add_box = TRUE)  CCCPlot(cellphonedb_res_sub, plot_type = \"ridge\", method = \"interaction\") #> Picking joint bandwidth of 0.285 #> Picking joint bandwidth of 0.311 #> Picking joint bandwidth of 0.285 #> Picking joint bandwidth of 0.311  # }"},{"path":"https://pwwang.github.io/scplotter/reference/CellDimPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell Dimension Reduction Plot — CellDimPlot","title":"Cell Dimension Reduction Plot — CellDimPlot","text":"function creates dimension reduction plot Seurat object Giotto object, path .h5ad file opened H5File hdf5r package. allows various customizations grouping metadata, adding edges cell neighbors, highlighting specific cells, . function wrapper around plotthis::DimPlot(), provides flexible way visualize cell clusters reduced dimensions. function extracts necessary data Seurat Giotto object passes plotthis::DimPlot().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/CellDimPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell Dimension Reduction Plot — CellDimPlot","text":"","code":"CellDimPlot(   object,   reduction = NULL,   graph = NULL,   group_by = NULL,   spat_unit = NULL,   feat_type = NULL,   velocity = NULL,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/CellDimPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cell Dimension Reduction Plot — CellDimPlot","text":"object seurat object, giotto object, path .h5ad file opened H5File hdf5r package. reduction Name reduction plot (example, \"umap\"). graph Specify graph name add edges cell neighbors plot. group_by character vector column name(s) group data. Default NULL. spat_unit spatial unit use plot. applied Giotto objects. feat_type feature type features (e.g. \"rna\", \"dna\", \"protein\"), applied Giotto objects. velocity name velocity reduction plot cell velocities. typically \"stochastic_\", \"deterministic_\", \"dynamical_\". ... arguments passed plotthis::DimPlot().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/CellDimPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cell Dimension Reduction Plot — CellDimPlot","text":"ggplot object list combine FALSE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/CellDimPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cell Dimension Reduction Plot — CellDimPlot","text":"See https://pwwang.github.io/scplotter/articles/Giotto_CODEX.html https://pwwang.github.io/scplotter/articles/Giotto_seqFISH.html https://pwwang.github.io/scplotter/articles/Giotto_SlideSeq.html https://pwwang.github.io/scplotter/articles/Giotto_Spatial_CITE-Seq.html https://pwwang.github.io/scplotter/articles/Giotto_Visium.html https://pwwang.github.io/scplotter/articles/Giotto_VisiumHD.html https://pwwang.github.io/scplotter/articles/Giotto_Xenium.html examples using function Giotto object. see: https://pwwang.github.io/scplotter/articles/Working_with_anndata_h5ad_files.html examples using function .h5ad files.","code":""},{"path":[]},{"path":"https://pwwang.github.io/scplotter/reference/CellDimPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cell Dimension Reduction Plot — CellDimPlot","text":"","code":"# \\donttest{ data(pancreas_sub) CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"UMAP\")  CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"UMAP\",             theme = \"theme_blank\")  CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"UMAP\",             palette = \"seurat\", theme = \"theme_blank\")  CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"UMAP\",             theme = ggplot2::theme_classic, theme_args = list(base_size = 16))  CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"UMAP\",             raster = TRUE, raster_dpi = 30)   # Highlight cells CellDimPlot(pancreas_sub,   group_by = \"SubCellType\", reduction = \"UMAP\",   highlight = 'SubCellType == \"Epsilon\"' )  CellDimPlot(pancreas_sub,   group_by = \"SubCellType\", split_by = \"Phase\", reduction = \"UMAP\",   highlight = TRUE, theme = \"theme_blank\", legend.position = \"none\" )  CellDimPlot(pancreas_sub,   group_by = \"SubCellType\", facet_by = \"Phase\", reduction = \"UMAP\",   highlight = TRUE, theme = \"theme_blank\", legend.position = \"none\" )   # Add group labels CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"UMAP\",             label = TRUE)  CellDimPlot(pancreas_sub,   group_by = \"SubCellType\", reduction = \"UMAP\",   label = TRUE, label_fg = \"orange\", label_bg = \"red\", label_size = 5 )  CellDimPlot(pancreas_sub,   group_by = \"SubCellType\", reduction = \"UMAP\",   label = TRUE, label_insitu = TRUE )  CellDimPlot(pancreas_sub,   group_by = \"SubCellType\", reduction = \"UMAP\",   label = TRUE, label_insitu = TRUE, label_repel = TRUE,   label_segment_color = \"red\" )   # Add various shape of marks CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"UMAP\",             add_mark = TRUE)  CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"UMAP\",             add_mark = TRUE, mark_expand = grid::unit(1, \"mm\"))  CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"UMAP\",             add_mark = TRUE, mark_alpha = 0.3)  CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"UMAP\",             add_mark = TRUE, mark_linetype = 2)  CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"UMAP\",             add_mark = TRUE, mark_type = \"ellipse\")  CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"UMAP\",             add_mark = TRUE, mark_type = \"rect\")  CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"UMAP\",             add_mark = TRUE, mark_type = \"circle\")   # Add a density layer CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"UMAP\",             add_density = TRUE)  CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"UMAP\",             add_density = TRUE, density_filled = TRUE) #> Warning: Removed 396 rows containing missing values or values outside the scale range #> (`geom_raster()`). #> Warning: Removed 396 rows containing missing values or values outside the scale range #> (`geom_raster()`).  CellDimPlot(pancreas_sub,   group_by = \"SubCellType\", reduction = \"UMAP\",   add_density = TRUE, density_filled = TRUE, density_filled_palette = \"Blues\",   highlight = TRUE ) #> Warning: Removed 396 rows containing missing values or values outside the scale range #> (`geom_raster()`). #> Warning: Removed 396 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # Add statistical charts CellDimPlot(pancreas_sub,   group_by = \"CellType\", reduction = \"UMAP\", stat_by = \"Phase\")  CellDimPlot(pancreas_sub,   group_by = \"CellType\", reduction = \"UMAP\", stat_by = \"Phase\",   stat_plot_type = \"ring\", stat_plot_label = TRUE, stat_plot_size = 0.15)  CellDimPlot(pancreas_sub,   group_by = \"CellType\", reduction = \"UMAP\", stat_by = \"Phase\",   stat_plot_type = \"bar\", stat_type = \"count\")  CellDimPlot(pancreas_sub,   group_by = \"CellType\", reduction = \"UMAP\", stat_by = \"Phase\",   stat_plot_type = \"line\", stat_type = \"count\", stat_args = list(point_size = 1))   # Chane the plot type from point to the hexagonal bin CellDimPlot(pancreas_sub, group_by = \"CellType\", reduction = \"UMAP\",             hex = TRUE) #> Warning: Removed 5 rows containing missing values or values outside the scale range #> (`geom_hex()`). #> Warning: Removed 5 rows containing missing values or values outside the scale range #> (`geom_hex()`).  CellDimPlot(pancreas_sub, group_by = \"CellType\", reduction = \"UMAP\",             hex = TRUE, hex_bins = 20) #> Warning: Removed 4 rows containing missing values or values outside the scale range #> (`geom_hex()`). #> Warning: Removed 4 rows containing missing values or values outside the scale range #> (`geom_hex()`).  CellDimPlot(pancreas_sub, group_by = \"CellType\", reduction = \"UMAP\",             hex = TRUE, hex_count = FALSE) #> Warning: Removed 5 rows containing missing values or values outside the scale range #> (`geom_hex()`). #> Warning: Removed 5 rows containing missing values or values outside the scale range #> (`geom_hex()`).   # Show neighbors graphs on the plot CellDimPlot(pancreas_sub, group_by = \"CellType\", reduction = \"UMAP\",             graph = \"RNA_nn\")  CellDimPlot(pancreas_sub, group_by = \"CellType\", reduction = \"UMAP\",             graph = \"RNA_snn\", edge_color = \"grey80\")   # Show lineages on the plot based on the pseudotime CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"UMAP\",             lineages = paste0(\"Lineage\", 1:3)) #> Warning: Removed 8 rows containing missing values or values outside the scale range #> (`geom_path()`). #> Warning: Removed 8 rows containing missing values or values outside the scale range #> (`geom_path()`).  CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"UMAP\",             lineages = paste0(\"Lineage\", 1:3), lineages_whiskers = TRUE) #> Warning: Removed 8 rows containing missing values or values outside the scale range #> (`geom_segment()`). #> Warning: Removed 8 rows containing missing values or values outside the scale range #> (`geom_path()`). #> Warning: Removed 8 rows containing missing values or values outside the scale range #> (`geom_path()`).  CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"UMAP\",             lineages = paste0(\"Lineage\", 1:3), lineages_span = 0.1)   # Velocity CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"PCA\",   velocity = \"stochastic_PCA\") #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_segment()`).  CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"PCA\",   velocity = \"stochastic_PCA\", velocity_plot_type = \"grid\", pt_alpha = 0.5) #> Warning: Removed 15 rows containing missing values or values outside the scale range #> (`geom_segment()`).  CellDimPlot(pancreas_sub, group_by = \"SubCellType\", reduction = \"PCA\",   velocity = \"stochastic_PCA\", velocity_plot_type = \"stream\", pt_alpha = 0.5)  # }"},{"path":"https://pwwang.github.io/scplotter/reference/CellStatPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell statistics plot — CellStatPlot","title":"Cell statistics plot — CellStatPlot","text":"function creates plot visualize statistics cells Seurat object, Giotto object, path .h5ad file opened H5File hdf5r package. can create various types plots, including bar plots, circos plots, pie charts, pies (heatmap cell_type = 'pie'), ring/donut plots, trend plots area plots, sankey/alluvial plots, heatmaps, radar plots, spider plots, violin plots, box plots. function allows grouping, splitting, faceting data based metadata columns. also supports calculating fractions cells based specified groupings.#'","code":""},{"path":"https://pwwang.github.io/scplotter/reference/CellStatPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell statistics plot — CellStatPlot","text":"","code":"CellStatPlot(   object,   ident = NULL,   group_by = NULL,   group_by_sep = \"_\",   spat_unit = NULL,   feat_type = NULL,   split_by = NULL,   split_by_sep = \"_\",   facet_by = NULL,   rows_by = NULL,   columns_split_by = NULL,   frac = c(\"none\", \"group\", \"ident\", \"cluster\", \"all\"),   rows_name = NULL,   name = NULL,   plot_type = c(\"bar\", \"circos\", \"pie\", \"pies\", \"ring\", \"donut\", \"trend\", \"area\",     \"sankey\", \"alluvial\", \"heatmap\", \"radar\", \"spider\", \"violin\", \"box\"),   swap = FALSE,   ylab = NULL,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/CellStatPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cell statistics plot — CellStatPlot","text":"object Seurat object, Giotto object, path h5ad file opened H5File (hdf5r package) object data frame (internal use) containing cell metadata. ident column cell identities. .e. clusters. Default: NULL NULL, active identity Seurat object name \"Identity\" used. 'pies', used pie_group_by. 'heatmap' plot, used rows_by heatmap. group_by column name meta data group cells. Default: NULL work columns plot_type: heatmap. violin/box plot, 2 group_by columns allowed concatenated. first one used break values groups, second one works group_by argument plotthis::ViolinPlot/plotthis::BoxPlot. group_by_sep separator use combining multiple columns group_by. Default: \"_\" 'sankey'/'heatmap' plot, multiple columns combined, used node. spat_unit spatial unit use plot. applied Giotto objects. feat_type feature type features (e.g. \"rna\", \"dna\", \"protein\"), applied Giotto objects. split_by column name meta data split cells. Default: NULL split plotted separate plot. split_by_sep separator use combining multiple columns split_by. Default: \"_\" facet_by column name meta data facet plots. Default: NULL available 'circos', 'sankey', 'heatmap' plots. rows_by column names data used rows 'pies' (heatmap cell_type = 'pie'). Default: NULL. available 'pies' plot. values matter, indicate cells overlapping columns distributed different ident values. columns_split_by column name meta data split columns 'pies'/'heatmap' plot. Default: NULL frac way calculating fraction. Default \"none\". Possible values \"group\", \"ident\", \"cluster\", \"\", \"none\". Note fractions calculated split facet group split_by facet_by specified. group: calculate fraction group. total fraction cells idents group 1. group-specified, . ident: calculate fraction ident. total fraction cells groups ident 1. works group-specified. cluster: alias ident. : calculate fraction cells. none: calculate fraction, use number cells instead. rows_name name rows 'pies'/'heatmap' plot. Default NULL. name name 'pies'/'heatmap' plot, shown name main legend. Default NULL. plot_type type plot use. Default \"bar\". Possible values \"bar\", \"circos\", \"pie\", \"pies\", \"ring\"/\"donut\", \"trend\", \"area\", \"heatmap\", \"sankey\"/\"alluvial\", \"radar\" \"spider\". 'pie' vs 'pies': 'pie' plot plot single pie chart group, 'pies' plot plot multiple pie charts group split. 'pies' basically heatmap 'cell_type = \"pie\"'. swap Whether swap cluster group, , using group x-axis cluster fill plot. circos plot, transposed, arrows drawn idents (ident) groups (group_by). works group_by specified. 'pies' plot, swap group_by ident. 'heatmap' plot, swap group_by columns_split_by. Note different flip. flip used transpose plot. swap used swap x group_by plotting. ylab y-axis label. Default NULL. ... arguments passed specific plot function. bar plot, see plotthis::BarPlot(). circos plot, see plotthis::CircosPlot(). pie chart, see plotthis::PieChart(). pies plot, see plotthis::Heatmap(). heatmap plot, see plotthis::Heatmap(). ring/donut plot, see plotthis::RingPlot(). trend plot, see plotthis::TrendPlot(). area plot, see plotthis::AreaPlot(). sankey/alluvial plot, see plotthis::SankeyPlot(). radar plot, see plotthis::RadarPlot(). spider plot, see plotthis::SpiderPlot(). violin plot, see plotthis::ViolinPlot(). box plot, see plotthis::BoxPlot().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/CellStatPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cell statistics plot — CellStatPlot","text":"ggplot object list combine FALSE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/CellStatPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cell statistics plot — CellStatPlot","text":"See: https://pwwang.github.io/scplotter/articles/Giotto_Xenium.html examples using function Giotto object. see: https://pwwang.github.io/scplotter/articles/Working_with_anndata_h5ad_files.html examples using function .h5ad files.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/CellStatPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cell statistics plot — CellStatPlot","text":"","code":"# \\donttest{ # library(patchwork) data(ifnb_sub)  # Bar plot p1 <- CellStatPlot(ifnb_sub) p2 <- CellStatPlot(ifnb_sub, group_by = \"stim\") p3 <- CellStatPlot(ifnb_sub, group_by = \"stim\", palette = \"Set2\") p4 <- CellStatPlot(ifnb_sub, group_by = \"stim\", position = \"stack\") (p1 | p2) / (p3 | p4)   # Fraction of cells p1 <- CellStatPlot(ifnb_sub, group_by = \"stim\", frac = \"group\",                    ident = \"seurat_annotations\", x_text_angle = 60) p2 <- CellStatPlot(ifnb_sub, group_by = \"stim\", frac = \"group\") p3 <- CellStatPlot(ifnb_sub, group_by = \"stim\", frac = \"ident\",                    position = \"stack\", alpha = .6) p4 <- CellStatPlot(ifnb_sub, group_by = \"stim\", frac = \"group\",                    swap = TRUE, position = \"stack\") (p1 | p2) / (p3 | p4)   # Splitting/Facetting the plot CellStatPlot(ifnb_sub, split_by = \"stim\")  CellStatPlot(ifnb_sub, facet_by = \"stim\")  CellStatPlot(ifnb_sub, facet_by = \"stim\", facet_nrow = 2)   # Circos plot CellStatPlot(ifnb_sub, group_by = \"stim\", plot_type = \"circos\")  CellStatPlot(ifnb_sub, group_by = \"stim\", ident = \"seurat_annotations\",              plot_type = \"circos\", labels_rot = TRUE)   # Pie plot CellStatPlot(ifnb_sub, plot_type = \"pie\")  CellStatPlot(ifnb_sub, plot_type = \"pie\", split_by = \"stim\")   # Ring plot CellStatPlot(ifnb_sub, plot_type = \"ring\", group_by = \"stim\",              palette = \"Spectral\") #> 'frac' is forced to 'group' for 'ring' plot.   # Trend plot CellStatPlot(ifnb_sub, plot_type = \"trend\", frac = \"group\",              x_text_angle = 90, group_by = c(\"stim\", \"seurat_annotations\")) #> Multiple columns are provided in 'group_by'. They will be concatenated into one column.   # Sankey plot CellStatPlot(ifnb_sub, plot_type = \"sankey\", group_by = c(\"seurat_clusters\", \"stim\"),              links_alpha = .6) #> Missing alluvia for some stratum combinations.  CellStatPlot(ifnb_sub, plot_type = \"sankey\", links_alpha = .6,              group_by = c(\"stim\", \"seurat_annotations\", \"orig.ident\")) #> Missing alluvia for some stratum combinations.  CellStatPlot(ifnb_sub, plot_type = \"sankey\", links_alpha = .6,              group_by = c(\"seurat_clusters\", \"stim\", \"seurat_annotations\", \"orig.ident\")) #> Missing alluvia for some stratum combinations.   # Area plot CellStatPlot(ifnb_sub, plot_type = \"area\", frac = \"group\", x_text_angle = 90,              group_by = \"seurat_annotations\", split_by = \"stim\")   # Pies # Simulate some sets of cells (e.g. clones) ifnb_sub$r1 <- ifelse(ifnb_sub$seurat_clusters %in% c(\"0\", \"1\", \"2\"), 1, 0) ifnb_sub$r2 <- sample(c(1, 0), ncol(ifnb_sub), prob = c(0.5, 0.5), replace = TRUE) ifnb_sub$r3 <- sample(c(1, 0), ncol(ifnb_sub), prob = c(0.7, 0.3), replace = TRUE) CellStatPlot(ifnb_sub, plot_type = \"pies\", group_by = \"stim\", rows_name = \"Clones\",    rows_by = c(\"r1\", \"r2\", \"r3\"), show_row_names = TRUE, add_reticle = TRUE,    show_column_names = TRUE, column_names_side = \"top\", cluster_columns = FALSE,    row_names_side = \"right\", pie_size = \"identity\", pie_values = \"sum\")   # Heatmap CellStatPlot(ifnb_sub, plot_type = \"heatmap\", group_by = \"stim\", palette = \"Blues\")  CellStatPlot(ifnb_sub, plot_type = \"heatmap\", group_by = \"stim\",    frac = \"group\", columns_split_by = \"seurat_annotations\", swap = TRUE)   # Radar plot/Spider plot pr <- CellStatPlot(ifnb_sub, plot_type = \"radar\", group_by = \"stim\") ps <- CellStatPlot(ifnb_sub, plot_type = \"spider\", group_by = \"stim\") pr | ps   # Box/Violin plot ifnb_sub$group <- sample(paste0(\"g\", 1:10), nrow(ifnb_sub), replace = TRUE) CellStatPlot(ifnb_sub, group_by = c(\"group\", \"stim\"), frac = \"group\",    plot_type = \"violin\", add_box = TRUE, ident = \"seurat_annotations\",    x_text_angle = 60, comparisons = TRUE, aspect.ratio = 0.8)  # }"},{"path":"https://pwwang.github.io/scplotter/reference/CellVelocityPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Cell Velocity Plot — CellVelocityPlot","title":"Cell Velocity Plot — CellVelocityPlot","text":"function creates cell velocity plot Seurat object, Giotto object, path .h5ad file opened H5File hdf5r package. allows various customizations grouping metadata, adding edges cell neighbors, highlighting specific cells, . function wrapper around plotthis::VelocityPlot(), provides flexible way visualize cell velocities reduced dimensions. function extracts cell embeddings velocity embeddings Seurat Giotto object passes plotthis::VelocityPlot().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/CellVelocityPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cell Velocity Plot — CellVelocityPlot","text":"","code":"CellVelocityPlot(   object,   reduction,   v_reduction,   spat_unit = NULL,   feat_type = NULL,   group_by = NULL,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/CellVelocityPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cell Velocity Plot — CellVelocityPlot","text":"object seurat object, giotto object, path .h5ad file opened H5File hdf5r package. reduction Name reduction plot (example, \"umap\"). v_reduction Name velocity reduction plot (example, \"stochastic_umap\"). reduction used calculate velocity. spat_unit spatial unit use plot. applied Giotto objects. feat_type feature type features (e.g. \"rna\", \"dna\", \"protein\"), applied Giotto objects. group_by character vector metadata column name(s) group (color) data. Default NULL. ... arguments passed plotthis::VelocityPlot().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/CellVelocityPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cell Velocity Plot — CellVelocityPlot","text":"ggplot object","code":""},{"path":"https://pwwang.github.io/scplotter/reference/CellVelocityPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cell Velocity Plot — CellVelocityPlot","text":"See: https://pwwang.github.io/scplotter/articles/Working_with_anndata_h5ad_files.html examples using function .h5ad files.","code":""},{"path":[]},{"path":"https://pwwang.github.io/scplotter/reference/CellVelocityPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cell Velocity Plot — CellVelocityPlot","text":"","code":"# \\donttest{ data(pancreas_sub)  CellVelocityPlot(pancreas_sub, reduction = \"PCA\", v_reduction = \"stochastic_PCA\")  CellVelocityPlot(pancreas_sub, reduction = \"PCA\", v_reduction = \"stochastic_PCA\",  plot_type = \"grid\")  CellVelocityPlot(pancreas_sub, reduction = \"PCA\", v_reduction = \"stochastic_PCA\",  plot_type = \"stream\")  CellVelocityPlot(pancreas_sub, reduction = \"PCA\", v_reduction = \"stochastic_PCA\",  group_by = \"SubCellType\")  # }"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalAbundancePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ClonalAbundancePlot — ClonalAbundancePlot","title":"ClonalAbundancePlot — ClonalAbundancePlot","text":"Plot count density clones different abundance levels.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalAbundancePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClonalAbundancePlot — ClonalAbundancePlot","text":"","code":"ClonalAbundancePlot(   data,   clone_call = \"aa\",   chain = \"both\",   xtrans = \"log10\",   ytrans = \"identity\",   plot_type = c(\"trend\", \"histogram\", \"density\"),   binwidth = 0.1,   trend_skip_zero = TRUE,   bw = 0.5,   group_by = \"Sample\",   group_by_sep = \"_\",   facet_by = NULL,   split_by = NULL,   order = list(),   xlab = \"Abundance\",   ylab = NULL,   theme_args = list(),   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalAbundancePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ClonalAbundancePlot — ClonalAbundancePlot","text":"data product scRepertoire::combineTCR, scRepertoire::combineTCR, scRepertoire::combineExpression. clone_call call clone - VDJC gene (gene), CDR3 nucleotide (nt), CDR3 amino acid (aa), VDJC gene + CDR3 nucleotide (strict) custom variable data chain indicate specific chain used - e.g. \"\", \"TRA\", \"TRG\", \"IGH\", \"IGL\" xtrans transformation apply x-axis. Default \"log10\". ytrans transformation apply y-axis. Default \"identity\". plot_type type plot use. Default \"trend\". Possible values \"trend\", \"histogram\" \"density\". binwidth binwidth histogram plot. Default 0.1. trend_skip_zero Whether skip zero values trend line. Default TRUE. bw smoothing bandwidth used density plots. Default 0.5. group_by column name meta data group cells. Default: \"Sample\" group_by_sep separator use combining group_by columns. Default: \"_\" facet_by column name meta data facet plots. Default: NULL split_by column name meta data split plots. Default: NULL order order x-axis items groups. Default empty list. list values. names column names, values order. xlab x-axis label. Default \"Abundance\". ylab y-axis label. Default \"Number Clones\" trend histogram, \"Density Clones\" density. theme_args theme arguments passed plot function. ... arguments passed specific plot function. trend plot, see plotthis::Histogram(). histogram plot, see plotthis::Histogram(). density plot, see plotthis::DensityPlot().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalAbundancePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ClonalAbundancePlot — ClonalAbundancePlot","text":"ggplot object list combine FALSE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalAbundancePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ClonalAbundancePlot — ClonalAbundancePlot","text":"","code":"# \\donttest{ set.seed(8525) data(contig_list, package = \"scRepertoire\") data <- scRepertoire::combineTCR(contig_list) data <- scRepertoire::addVariable(data,     variable.name = \"Type\",     variables = sample(c(\"B\", \"L\"), 8, replace = TRUE) ) data <- scRepertoire::addVariable(data,     variable.name = \"Sex\",     variables = sample(c(\"M\", \"F\"), 8, replace = TRUE) )  ClonalAbundancePlot(data) #> Warning: Removed 104 rows containing missing values or values outside the scale range #> (`geom_line()`).  ClonalAbundancePlot(data, ytrans = \"log10\") #> Warning: log-10 transformation introduced infinite values. #> Warning: Removed 104 rows containing missing values or values outside the scale range #> (`geom_line()`).  ClonalAbundancePlot(data, plot_type = \"histogram\")  ClonalAbundancePlot(data, plot_type = \"histogram\", add_trend = TRUE, trend_skip_zero = TRUE) #> Warning: Removed 104 rows containing missing values or values outside the scale range #> (`geom_line()`).  ClonalAbundancePlot(data, plot_type = \"density\")  # }"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalCompositionPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ClonalCompositionPlot — ClonalCompositionPlot","title":"ClonalCompositionPlot — ClonalCompositionPlot","text":"Plot composition clones different samples/groups.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalCompositionPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClonalCompositionPlot — ClonalCompositionPlot","text":"","code":"ClonalCompositionPlot(   data,   clone_call = \"aa\",   chain = \"both\",   method = c(\"homeostasis\", \"homeo\", \"rel\", \"top\", \"rare\"),   clone_split = NULL,   scale = TRUE,   facet_by = NULL,   group_by = NULL,   split_by = NULL,   xlab = NULL,   ylab = NULL,   plot_type = c(\"bar\", \"ring\", \"box\", \"violin\"),   order = list(),   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalCompositionPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ClonalCompositionPlot — ClonalCompositionPlot","text":"data product scRepertoire::combineTCR, scRepertoire::combineTCR, scRepertoire::combineExpression. clone_call call clone - VDJC gene (gene), CDR3 nucleotide (nt), CDR3 amino acid (aa), VDJC gene + CDR3 nucleotide (strict) custom variable data chain indicate specific chain used - e.g. \"\", \"TRA\", \"TRG\", \"IGH\", \"IGL\" method method plot use. Default \"homeostasis\". Possible values \"homeostasis\", \"homeo\", \"rel\", \"top\", \"rare\". \"homeostasis\" - Plot homeostasis/relative abundance clones. clone_split fraction clones sample. \"homeo\" - \"homeostasis\". \"rel\" - \"homeostasis\". \"top\" - Plot top clones. clone_split indexes cut clones. \"rare\" - Plot rare clones. clone_split clone sizes. clone_split split clones. Default NULL. \"homeostasis\", \"homeo\", \"rel\" - Default list(Rare = 1e-04, Small = 0.001, Medium = 0.01, Large = 0.1, Hyperexpanded = 1). \"top\" - Default c(10, 100, 1000, 10000, 30000, 100000). \"rare\" - Default c(1, 3, 10, 30, 100). scale Whether scale values y-axis. Default TRUE. TRUE: values group (x-axis) scaled 1. FALSE: scaling. \"sample\"/\"Sample\": values sample scaled 1. facet_by column name meta data facet plots. Default: NULL group_by column name meta data group cells. Default: NULL split_by column name meta data split plots. Default: NULL xlab x-axis label. Default NULL. ylab y-axis label. Default NULL. plot_type type plot use. Default \"bar\". Possible values \"bar\", \"ring\", \"box\", \"violin\". order order x-axis items groups. Default empty list. list values. names column names, values order. ... arguments passed specific plot function. bar plot, see plotthis::BarPlot(). ring plot, see plotthis::RingPlot(). box plot, see plotthis::BoxPlot(). violin plot, see plotthis::ViolinPlot().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalCompositionPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ClonalCompositionPlot — ClonalCompositionPlot","text":"ggplot object list combine FALSE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalCompositionPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ClonalCompositionPlot — ClonalCompositionPlot","text":"","code":"# \\donttest{ set.seed(8525) data(contig_list, package = \"scRepertoire\") data <- scRepertoire::combineTCR(contig_list,     samples = c(\"P17B\", \"P17L\", \"P18B\", \"P18L\", \"P19B\",\"P19L\", \"P20B\", \"P20L\")) data <- scRepertoire::addVariable(data,     variable.name = \"Type\",     variables = rep(c(\"B\", \"L\"), 4) ) data <- scRepertoire::addVariable(data,     variable.name = \"Subject\",     variables = rep(c(\"P17\", \"P18\", \"P19\", \"P20\"), each = 2) )  ClonalCompositionPlot(data)  ClonalCompositionPlot(data, method = \"top\")  ClonalCompositionPlot(data, plot_type = \"ring\")  ClonalCompositionPlot(data, group_by = \"Type\", plot_type = \"box\", comparison = TRUE,  clone_split = list(Small = 0.001, Medium = 0.01, Large = 0.1, Hyperexpanded = 1))  ClonalCompositionPlot(data, group_by = \"Type\", plot_type = \"violin\", add_box = TRUE,  add_bg = TRUE)  ClonalCompositionPlot(data, method = \"rare\")  # }"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalDiversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the clonal diversities. — ClonalDiversity","title":"Calculate the clonal diversities. — ClonalDiversity","text":"Calculate clonal diversities.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalDiversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the clonal diversities. — ClonalDiversity","text":"","code":"ClonalDiversity(   input.data,   cloneCall = \"gene\",   chain = \"both\",   method = c(\"shannon\", \"gini.coeff\", \"inv.simpson\", \"norm.entropy\", \"gini.simpson\",     \"chao1\", \"ACE\", \"d50\", \"dXX\"),   d = 50,   group_by = NULL,   n_boots = 0 )"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalDiversityPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ClonalDiversityPlot — ClonalDiversityPlot","title":"ClonalDiversityPlot — ClonalDiversityPlot","text":"Plot clonal diversities samples/groups.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalDiversityPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClonalDiversityPlot — ClonalDiversityPlot","text":"","code":"ClonalDiversityPlot(   data,   clone_call = \"gene\",   chain = \"both\",   method = c(\"shannon\", \"gini.coeff\", \"inv.simpson\", \"norm.entropy\", \"gini.simpson\",     \"chao1\", \"ACE\", \"d50\", \"dXX\"),   d = 50,   plot_type = c(\"bar\", \"box\", \"violin\"),   position = \"dodge\",   group_by = NULL,   facet_by = NULL,   split_by = NULL,   xlab = NULL,   ylab = NULL,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalDiversityPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ClonalDiversityPlot — ClonalDiversityPlot","text":"data product scRepertoire::combineTCR, scRepertoire::combineTCR, scRepertoire::combineExpression. clone_call call clone - VDJC gene (gene), CDR3 nucleotide (nt), CDR3 amino acid (aa), VDJC gene + CDR3 nucleotide (strict) custom variable data chain indicate specific chain used - e.g. \"\", \"TRA\", \"TRG\", \"IGH\", \"IGL\" method method calculate diversity. Options \"shannon\" (default), \"inv.simpson\", \"norm.entropy\", \"gini.simpson\", \"chao1\", \"ACE\", \"gini.coeff\", \"d50\" \"dXX\". See scRepertoire::clonalDiversity details. last 3 methods supported scplotter : \"gini.coeff\" - Gini Coefficient. measure inequality distribution clones. 0 indicates perfect equality, 1 indicates perfect inequality. \"d50\" - number clones make 50% total number clones. \"dXX\" - number clones make XX% total number clones. d percentage \"dXX\" method. Default 50. plot_type type plot. Options \"bar\", \"box\" \"violin\". position position adjustment bars. Default \"dodge\". group_by character vector column names group samples. Default NULL. facet_by character vector column names facet plots. Default NULL. split_by character vector column names split plots. Default NULL. xlab x-axis label. Default NULL. ylab y-axis label. Default NULL. ... arguments passed specific plot function. \"bar\", plotthis::BarPlot(). \"box\", plotthis::BoxPlot(). \"violin\", plotthis::ViolinPlot().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalDiversityPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ClonalDiversityPlot — ClonalDiversityPlot","text":"ggplot object list combine FALSE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalDiversityPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ClonalDiversityPlot — ClonalDiversityPlot","text":"","code":"set.seed(8525) data(contig_list, package = \"scRepertoire\") data <- scRepertoire::combineTCR(contig_list,     samples = c(\"P17B\", \"P17L\", \"P18B\", \"P18L\", \"P19B\",\"P19L\", \"P20B\", \"P20L\")) data <- scRepertoire::addVariable(data,     variable.name = \"Type\",     variables = rep(c(\"B\", \"L\"), 4) ) data <- scRepertoire::addVariable(data,     variable.name = \"Subject\",     variables = rep(c(\"P17\", \"P18\", \"P19\", \"P20\"), each = 2) )  ClonalDiversityPlot(data)  ClonalDiversityPlot(data, group_by = \"Type\")  ClonalDiversityPlot(data, group_by = \"Type\", plot_type = \"box\")  ClonalDiversityPlot(data, group_by = \"Type\", plot_type = \"violin\")  ClonalDiversityPlot(data, group_by = \"Type\", plot_type = \"violin\",   method = \"gini.coeff\", add_box = TRUE)  ClonalDiversityPlot(data, group_by = \"Type\", plot_type = \"violin\",   method = \"inv.simpson\", add_box = TRUE)  ClonalDiversityPlot(data, group_by = \"Type\", plot_type = \"violin\",   method = \"d50\", add_box = TRUE)"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalDynamicsPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ClonalDynamicsPlot — ClonalDynamicsPlot","title":"ClonalDynamicsPlot — ClonalDynamicsPlot","text":"function deprecated. Please use ClonalStatPlot() instead.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalDynamicsPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClonalDynamicsPlot — ClonalDynamicsPlot","text":"","code":"ClonalDynamicsPlot(data, ...)"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalDynamicsPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ClonalDynamicsPlot — ClonalDynamicsPlot","text":"data product scRepertoire::combineTCR, scRepertoire::combineTCR, scRepertoire::combineExpression. ... arguments.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalGeneUsagePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ClonalGeneUsagePlot — ClonalGeneUsagePlot","title":"ClonalGeneUsagePlot — ClonalGeneUsagePlot","text":"ClonalGeneUsagePlot","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalGeneUsagePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClonalGeneUsagePlot — ClonalGeneUsagePlot","text":"","code":"ClonalGeneUsagePlot(   data,   genes = \"TRBV\",   scale = TRUE,   top = 20,   plot_type = c(\"bar\", \"heatmap\", \"circos\", \"chord\", \"alluvial\", \"sankey\"),   group_by = \"Sample\",   facet_by = NULL,   facet_ncol = 1,   split_by = NULL,   aspect.ratio = 2/top,   theme_args = list(),   ylab = NULL,   show_row_names = TRUE,   show_column_names = TRUE,   row_annotation = NULL,   row_annotation_type = list(),   row_annotation_side = \"right\",   row_annotation_agg = list(),   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalGeneUsagePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ClonalGeneUsagePlot — ClonalGeneUsagePlot","text":"data product scRepertoire::combineTCR, scRepertoire::combineTCR, scRepertoire::combineExpression. genes prefix genes plotted. Default \"TRBV\". two sets genes provided (e.g. c(\"TRBV\", \"TRBJ\")), second dimension second set genes instead group_by variable. scale Whether use proportion scaled group count. top number top genes/genepairs plotted. plot_type type plot generated. Default \"bar\". Options \"bar\", \"heatmap\", \"circos\" (aka \"chord\"). group_by variable group data . Default \"Sample\". facet_by character vector column names facet plots. Default NULL. specified manually. facet_ncol number columns facet grid. Default 1. split_by character vector column names split plots. Default NULL. aspect.ratio aspect ratio plot. available \"bar\" plot. Default 2/top. theme_args list arguments passed ggplot2::theme function. ylab y-axis label. Default NULL. show_row_names Whether show row names heatmap. Default TRUE. show_column_names Whether show column names heatmap. Default TRUE. row_annotation list row annotations added heatmap. Default NULL. row_annotation_type list row annotation types. row_annotation_side side row annotation. Default \"right\". row_annotation_agg list row annotation aggregation functions. ... arguments passed specific plot function. \"bar\", plotthis::BarPlot(). \"heatmap\", plotthis::Heatmap(). \"circos\", plotthis::ChordPlot(). \"chord\", plotthis::ChordPlot().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalGeneUsagePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ClonalGeneUsagePlot — ClonalGeneUsagePlot","text":"ggplot object list combine FALSE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalGeneUsagePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ClonalGeneUsagePlot — ClonalGeneUsagePlot","text":"","code":"# \\donttest{ set.seed(8525) data(contig_list, package = \"scRepertoire\") data <- scRepertoire::combineTCR(contig_list,     samples = c(\"P17B\", \"P17L\", \"P18B\", \"P18L\", \"P19B\",\"P19L\", \"P20B\", \"P20L\")) data <- scRepertoire::addVariable(data,     variable.name = \"Type\",     variables = rep(c(\"B\", \"L\"), 4) ) data <- scRepertoire::addVariable(data,     variable.name = \"Subject\",     variables = rep(c(\"P17\", \"P18\", \"P19\", \"P20\"), each = 2) )  ClonalGeneUsagePlot(data)  ClonalGeneUsagePlot(data, genes = c(\"TRBJ\", \"TRBV\"))  ClonalGeneUsagePlot(data, top = 40, plot_type = \"heatmap\")  ClonalGeneUsagePlot(data, genes = c(\"TRBV\", \"TRBJ\"), plot_type = \"heatmap\")  ClonalGeneUsagePlot(data, genes = \"TRBV\", group_by = \"Type\", plot_type = \"chord\")  ClonalGeneUsagePlot(data, genes = c(\"TRBV\", \"TRBJ\"), group_by = \"Type\", plot_type = \"chord\")  ClonalGeneUsagePlot(data, genes = c(\"TRBV\", \"TRBJ\"), plot_type = \"alluvial\",      facet_scales = \"free_y\") #> Missing alluvia for some stratum combinations.  ClonalGeneUsagePlot(data, genes = c(\"TRBV\", \"TRBJ\"), plot_type = \"alluvial\",      group_by = NULL) #> Missing alluvia for some stratum combinations.  # }"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalKmerPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ClonalKmerPlot — ClonalKmerPlot","title":"ClonalKmerPlot — ClonalKmerPlot","text":"Explore k-mer frequency CDR3 sequences.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalKmerPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClonalKmerPlot — ClonalKmerPlot","text":"","code":"ClonalKmerPlot(   data,   chain = \"TRB\",   clone_call = \"aa\",   k = 3,   top = 25,   group_by = \"Sample\",   group_by_sep = \"_\",   facet_by = NULL,   split_by = NULL,   plot_type = c(\"bar\", \"line\", \"heatmap\"),   theme_args = list(),   aspect.ratio = NULL,   facet_ncol = NULL,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalKmerPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ClonalKmerPlot — ClonalKmerPlot","text":"data product scRepertoire::combineTCR, scRepertoire::combineTCR, scRepertoire::combineExpression. chain chain analyzed. Default \"TRB\". clone_call column name clone call. Default \"aa\". k length k-mer. Default 3. top number top k-mers display. Default 25. group_by variable group data . Default \"Sample\". group_by_sep separator use combining groupings. Default \"_\". facet_by character vector column names facet plots. Default NULL. split_by character vector column names split plots. Default NULL. plot_type type plot generate. Default \"bar\". \"bar\": Bar plot. \"line\": Line plot. \"heatmap\": Heatmap. theme_args list arguments passed ggplot2::theme function. aspect.ratio aspect ratio plot. Default NULL. facet_ncol number columns facet grid. Default NULL. ... arguments passed specific plot function. \"bar\", plotthis::BarPlot(). \"line\", plotthis::LinePlot(). \"heatmap\", plotthis::Heatmap().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalKmerPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ClonalKmerPlot — ClonalKmerPlot","text":"ggplot object list combine FALSE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalKmerPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ClonalKmerPlot — ClonalKmerPlot","text":"","code":"# \\donttest{ set.seed(8525) data(contig_list, package = \"scRepertoire\") data <- scRepertoire::combineTCR(contig_list,     samples = c(\"P17B\", \"P17L\", \"P18B\", \"P18L\", \"P19B\",\"P19L\", \"P20B\", \"P20L\")) data <- scRepertoire::addVariable(data,     variable.name = \"Type\",     variables = rep(c(\"B\", \"L\"), 4) ) data <- scRepertoire::addVariable(data,     variable.name = \"Subject\",     variables = rep(c(\"P17\", \"P18\", \"P19\", \"P20\"), each = 2) )  ClonalKmerPlot(data)  ClonalKmerPlot(data, group_by = \"Type\")  ClonalKmerPlot(data, group_by = \"Type\", plot_type = \"line\")  ClonalKmerPlot(data, group_by = \"Type\", plot_type = \"heatmap\")  # }"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalLengthPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ClonalLengthPlot — ClonalLengthPlot","title":"ClonalLengthPlot — ClonalLengthPlot","text":"Plot length distribution CDR3 sequences","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalLengthPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClonalLengthPlot — ClonalLengthPlot","text":"","code":"ClonalLengthPlot(   data,   clone_call = \"aa\",   chain = \"both\",   plot_type = c(\"bar\", \"box\", \"violin\", \"density\"),   x_nbreaks = 10,   group_by = \"Sample\",   order = list(),   xlab = \"Length\",   ylab = NULL,   position = \"dodge\",   facet_by = NULL,   split_by = NULL,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalLengthPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ClonalLengthPlot — ClonalLengthPlot","text":"data product scRepertoire::combineTCR, scRepertoire::combineTCR, scRepertoire::combineExpression. clone_call call clone - \"nt\" \"aa\" supported. chain indicate specific chain used - e.g. \"\", \"TRA\", \"TRB\", \"TRD\", \"TRG\", \"IGH\", \"IGL\" specify specific chain. plot_type type plot use. Default \"bar\". Possible values \"box\", \"violin\" \"density\". x_nbreaks number breaks x-axis. Default 10. group_by column name meta data group cells. Default: \"Sample\" order order groups. Default empty list. list values. names column names, values order. xlab x-axis label. ylab y-axis label. position position bars bar plot x-axis. Default \"dodge\". facet_by column name meta data facet plots. Default: NULL split_by column name meta data split plots. Default: NULL ... arguments passed specific plot function. bar plot, see plotthis::BarPlot(). box plot, see plotthis::BoxPlot(). violin plot, see plotthis::ViolinPlot(). density plot, see plotthis::DensityPlot().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalLengthPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ClonalLengthPlot — ClonalLengthPlot","text":"ggplot object list combine FALSE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalLengthPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ClonalLengthPlot — ClonalLengthPlot","text":"","code":"# \\donttest{ set.seed(8525) data(contig_list, package = \"scRepertoire\") data <- scRepertoire::combineTCR(contig_list) data <- scRepertoire::addVariable(data, variable.name = \"Type\",  variables = sample(c(\"B\", \"L\"), 8, replace = TRUE)) data <- scRepertoire::addVariable(data, variable.name = \"Sex\",  variables = sample(c(\"M\", \"F\"), 8, replace = TRUE))  ClonalLengthPlot(data)  ClonalLengthPlot(data, plot_type = \"box\")  ClonalLengthPlot(data, clone_call = \"nt\", plot_type = \"violin\", chain = \"TRB\",  group_by = \"Type\", comparisons = TRUE) #> Warning: Groups with fewer than two datapoints have been dropped. #> ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes. #> Warning: Groups with fewer than two datapoints have been dropped. #> ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes. #> Warning: Groups with fewer than two datapoints have been dropped. #> ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes. #> Warning: Groups with fewer than two datapoints have been dropped. #> ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes. #> Warning: Groups with fewer than two datapoints have been dropped. #> ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes. #> Warning: Groups with fewer than two datapoints have been dropped. #> ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.  ClonalLengthPlot(data, plot_type = \"density\", chain = \"TRA\")  # }"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalOverlapPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ClonalOverlapPlot — ClonalOverlapPlot","title":"ClonalOverlapPlot — ClonalOverlapPlot","text":"Plot overlap clones different samples/groups.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalOverlapPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClonalOverlapPlot — ClonalOverlapPlot","text":"","code":"ClonalOverlapPlot(   data,   clone_call = \"aa\",   chain = \"both\",   group_by = \"Sample\",   group_by_sep = \"_\",   full = TRUE,   split_by = NULL,   order = list(),   method = c(\"raw\", \"overlap\", \"morisita\", \"jaccard\", \"cosine\"),   palette = \"Blues\",   label_accuracy = NULL,   label_cutoff = 0.001,   cluster_rows = FALSE,   cluster_columns = FALSE,   show_row_names = TRUE,   show_column_names = TRUE,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalOverlapPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ClonalOverlapPlot — ClonalOverlapPlot","text":"data product scRepertoire::combineTCR, scRepertoire::combineTCR, scRepertoire::combineExpression. clone_call call clone - VDJC gene (gene), CDR3 nucleotide (nt), CDR3 amino acid (aa), VDJC gene + CDR3 nucleotide (strict) custom variable data chain indicate specific chain used - e.g. \"\", \"TRA\", \"TRG\", \"IGH\", \"IGL\" group_by column name meta data group cells. Default: \"Sample\" group_by_sep separator used concatenate group_by multiple columns used. full Whether plot full heatmap, just triangle. Default TRUE. split_by column name meta data split plots. Default: NULL order order groups. Default empty list. list values. names column names, values order. method method calculate overlap. Default \"raw\". \"overlap\" - overlap coefficient \"morisita\" - Morisita’s overlap index \"jaccard\" - Jaccard index \"cosine\" - cosine similarity \"raw\" - exact number overlapping clones See also scRepertoire::clonalOverlap. palette color palette use. Default \"Blues\". label_accuracy accuracy labels. Default NULL. NULL, 1 \"raw\" 0.01 methods. label_cutoff cutoff labels show. Default 1e-3. cluster_rows Whether cluster rows. Default FALSE. cluster_columns Whether cluster columns. Default FALSE. show_row_names Whether show row names. Default TRUE. show_column_names Whether show column names. Default TRUE. ... arguments passed specific plot function plotthis::Heatmap().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalOverlapPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ClonalOverlapPlot — ClonalOverlapPlot","text":"ComplexHeatmap object list combine FALSE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalOverlapPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ClonalOverlapPlot — ClonalOverlapPlot","text":"","code":"# \\donttest{ set.seed(8525) data(contig_list, package = \"scRepertoire\") data <- scRepertoire::combineTCR(contig_list,     samples = c(\"P17B\", \"P17L\", \"P18B\", \"P18L\", \"P19B\",\"P19L\", \"P20B\", \"P20L\")) data <- scRepertoire::addVariable(data,     variable.name = \"Type\",     variables = rep(c(\"B\", \"L\"), 4) ) data <- scRepertoire::addVariable(data,     variable.name = \"Subject\",     variables = rep(c(\"P17\", \"P18\", \"P19\", \"P20\"), each = 2) )  ClonalOverlapPlot(data)  ClonalOverlapPlot(data, clone_call = \"strict\", label_cutoff = 0,   label_accuracy = 0.001, method = \"morisita\", full = FALSE)  ClonalOverlapPlot(data, group_by = c(\"Subject\", \"Type\"))  ClonalOverlapPlot(data, group_by = \"Type\", split_by = \"Subject\")  # }"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalPositionalPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ClonalPositionalPlot — ClonalPositionalPlot","title":"ClonalPositionalPlot — ClonalPositionalPlot","text":"Visualize positional entropy, property amino acid frequency CDR3 sequences.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalPositionalPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClonalPositionalPlot — ClonalPositionalPlot","text":"","code":"ClonalPositionalPlot(   data,   chain = \"TRB\",   aa_length = 20,   group_by = \"Sample\",   group_by_sep = \"_\",   split_by = NULL,   method = c(\"AA\", \"shannon\", \"inv.simpson\", \"norm.entropy\", \"Atchley\", \"Kidera\",     \"stScales\", \"tScales\", \"VHSE\"),   plot_type = c(\"bar\", \"line\", \"heatmap\", \"box\", \"violin\"),   theme_args = list(),   xlab = NULL,   ylab = NULL,   facet_by = NULL,   facet_ncol = NULL,   facet_nrow = NULL,   aspect.ratio = NULL,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalPositionalPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ClonalPositionalPlot — ClonalPositionalPlot","text":"data product scRepertoire::combineTCR, scRepertoire::combineTCR, scRepertoire::combineExpression. chain chain analyzed. Default \"TRB\". aa_length length amino acid sequence. Default 20. group_by variable group data . Default \"Sample\". group_by_sep separator use combining groupings. Default \"_\". split_by variable split data . Default NULL. method method calculate positional entropy. Default \"AA\". \"AA\": Amino acid frequency. \"shannon\": Shannon entropy. \"inv.simpson\": Inverse Simpson index. \"norm.entropy\": Normalized entropy. \"Atchley\": Atchley factors. \"Kidera\": Kidera factors. \"stScales\": stScales factors. \"tScales\": tScales factors. \"VHSE\": Vectors Hydrophobic, Steric, Electronic properties. See also scRepertoire::percentAA, scRepertoire::positionalEntropy scRepertoire::positionalProperty. plot_type type plot generate. Default \"bar\". \"bar\": Bar plot. \"line\": Line plot. \"heatmap\": Heatmap. \"box\": Box plot. \"violin\": Violin plot. theme_args list arguments passed ggplot2::theme function. xlab x-axis label. Default NULL. ylab y-axis label. Default NULL. facet_by character vector column names facet plots. Default NULL. facet_ncol number columns facet grid. Default NULL. facet_nrow number rows facet grid. Default NULL. aspect.ratio aspect ratio plot. Default NULL. ... arguments passed specific plot function. \"bar\", plotthis::BarPlot(). \"line\", plotthis::LinePlot(). \"heatmap\", plotthis::Heatmap(). \"box\", plotthis::BoxPlot(). \"violin\", plotthis::ViolinPlot().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalPositionalPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ClonalPositionalPlot — ClonalPositionalPlot","text":"ggplot object list combine FALSE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalPositionalPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ClonalPositionalPlot — ClonalPositionalPlot","text":"","code":"# \\donttest{ set.seed(8525) data(contig_list, package = \"scRepertoire\") data <- scRepertoire::combineTCR(contig_list,    samples = c(\"P17B\", \"P17L\", \"P18B\", \"P18L\", \"P19B\",\"P19L\", \"P20B\", \"P20L\")) data <- scRepertoire::addVariable(data,   variable.name = \"Type\",   variables = rep(c(\"B\", \"L\"), 4) )  ClonalPositionalPlot(data)  ClonalPositionalPlot(data, method = \"shannon\")  ClonalPositionalPlot(data, method = \"norm.entropy\", plot_type = \"heatmap\")  ClonalPositionalPlot(data, method = \"Atchley\", group_by = \"Type\", plot_type = \"bar\")  ClonalPositionalPlot(data, method = \"Atchley\", plot_type = \"line\")  # }"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalRarefactionPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ClonalRarefactionPlot — ClonalRarefactionPlot","title":"ClonalRarefactionPlot — ClonalRarefactionPlot","text":"Plot rarefaction curves","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalRarefactionPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClonalRarefactionPlot — ClonalRarefactionPlot","text":"","code":"ClonalRarefactionPlot(   data,   clone_call = \"aa\",   chain = \"both\",   group_by = \"Sample\",   group_by_sep = \"_\",   n_boots = 20,   q = 0,   facet_by = NULL,   split_by = NULL,   split_by_sep = \"_\",   palette = \"Paired\",   combine = TRUE,   nrow = NULL,   ncol = NULL,   byrow = TRUE,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalRarefactionPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ClonalRarefactionPlot — ClonalRarefactionPlot","text":"data product scRepertoire::combineTCR, scRepertoire::combineTCR, scRepertoire::combineExpression. clone_call call clone - VDJC gene (gene), CDR3 nucleotide (nt), CDR3 amino acid (aa), VDJC gene + CDR3 nucleotide (strict) custom variable chain indicate specific chain used - e.g. \"\", \"TRA\", \"TRG\", \"IGH\", \"IGL\" group_by character vector column names group samples. Default \"Sample\". group_by_sep separator group_by column. Default \"_\". n_boots number bootstrap samples. Default 20. q hill number. Default 0. 0 - Species richness 1 - Shannon entropy 2 - Simpson index#' facet_by character vector column names facet plots. Default NULL. split_by character vector column names split plots. Default NULL. split_by_sep separator split_by column. Default \"_\". palette color palette use. Default \"Paired\". combine Whether combine plots single plot. Default TRUE. nrow number rows combined plot. Default NULL. ncol number columns combined plot. Default NULL. byrow Whether fill combined plot row. Default TRUE. ... arguments passed plotthis::RarefactionPlot().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalRarefactionPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ClonalRarefactionPlot — ClonalRarefactionPlot","text":"ggplot object list combine FALSE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalRarefactionPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ClonalRarefactionPlot — ClonalRarefactionPlot","text":"","code":"# \\donttest{ set.seed(8525) data(contig_list, package = \"scRepertoire\") data <- scRepertoire::combineTCR(contig_list,     samples = c(\"P17B\", \"P17L\", \"P18B\", \"P18L\", \"P19B\",\"P19L\", \"P20B\", \"P20L\")) data <- scRepertoire::addVariable(data,     variable.name = \"Type\",     variables = rep(c(\"B\", \"L\"), 4) ) data <- scRepertoire::addVariable(data,     variable.name = \"Subject\",     variables = rep(c(\"P17\", \"P18\", \"P19\", \"P20\"), each = 2) )  ClonalRarefactionPlot(data, type = 1, q = 0, n_boots = 2) #> Warning: The shape palette can deal with a maximum of 6 discrete values because more #> than 6 becomes difficult to discriminate #> ℹ you have requested 8 values. Consider specifying shapes manually if you need #>   that many of them. #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_point()`).  ClonalRarefactionPlot(data, type = 2, q = 0, n_boots = 2) #> Warning: The shape palette can deal with a maximum of 6 discrete values because more #> than 6 becomes difficult to discriminate #> ℹ you have requested 8 values. Consider specifying shapes manually if you need #>   that many of them. #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_point()`).  ClonalRarefactionPlot(data, type = 3, q = 0, n_boots = 2) #> Warning: The shape palette can deal with a maximum of 6 discrete values because more #> than 6 becomes difficult to discriminate #> ℹ you have requested 8 values. Consider specifying shapes manually if you need #>   that many of them. #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_point()`).  ClonalRarefactionPlot(data, q = 1, n_boots = 2) #> Warning: The shape palette can deal with a maximum of 6 discrete values because more #> than 6 becomes difficult to discriminate #> ℹ you have requested 8 values. Consider specifying shapes manually if you need #>   that many of them. #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_point()`).  ClonalRarefactionPlot(data, q = 1, n_boots = 2, group_by = \"Type\")  ClonalRarefactionPlot(data, n_boots = 2, split_by = \"Type\")  # }"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalResidencyPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ClonalResidencyPlot — ClonalResidencyPlot","title":"ClonalResidencyPlot — ClonalResidencyPlot","text":"Plot residency clones different samples.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalResidencyPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClonalResidencyPlot — ClonalResidencyPlot","text":"","code":"ClonalResidencyPlot(   data,   clone_call = \"aa\",   chain = \"both\",   plot_type = c(\"scatter\", \"venn\", \"upset\"),   group_by = \"Sample\",   groups = NULL,   facet_by = NULL,   split_by = NULL,   split_by_sep = \"_\",   scatter_cor = \"pearson\",   scatter_size_by = c(\"max\", \"total\"),   order = list(),   combine = TRUE,   nrow = NULL,   ncol = NULL,   byrow = TRUE,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalResidencyPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ClonalResidencyPlot — ClonalResidencyPlot","text":"data product scRepertoire::combineTCR, scRepertoire::combineTCR, scRepertoire::combineExpression. clone_call call clone - VDJC gene (gene), CDR3 nucleotide (nt), CDR3 amino acid (aa), VDJC gene + CDR3 nucleotide (strict) custom variable data chain indicate specific chain used - e.g. \"\", \"TRA\", \"TRG\", \"IGH\", \"IGL\" plot_type type plot use. Default \"scatter\". Possible values \"scatter\", \"venn\", \"upset\". group_by column name meta data group cells. Default: \"Sample\" groups groups compare. Default NULL. NULL, groups group_by compared. Note \"scatter\" plot, two groups can compared. two groups, combination pairs used. \"scatter\" plot, groups can specified comparisons separated \":\", e.g. \"L:B\", \"Y:X\". facet_by column name meta data facet plots. Default: NULL split_by column name meta data split plots. Default: NULL split_by_sep separator used concatenate split_by multiple columns used. scatter_cor correlation method use scatter plot. Default \"pearson\". scatter_size_by size points scatter plot. Default \"max\". Possible values \"max\" \"total\". \"max\" - max size clone two groups. \"total\" - total size clone two groups. order order x-axis items groups. Default empty list. list values. names column names, values order. combine Whether combine plots single plot. Default TRUE. nrow number rows combined plot. Default NULL. ncol number columns combined plot. Default NULL. byrow Whether fill combined plot row. Default TRUE. ... arguments passed specific plot function. scatter plot, see plotthis::ScatterPlot(). venn plot, see plotthis::VennDiagram(). upset plot, see plotthis::UpsetPlot().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalResidencyPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ClonalResidencyPlot — ClonalResidencyPlot","text":"ggplot object list combine FALSE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalResidencyPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ClonalResidencyPlot — ClonalResidencyPlot","text":"","code":"# \\donttest{ set.seed(8525) data(contig_list, package = \"scRepertoire\") data <- scRepertoire::combineTCR(contig_list,     samples = c(\"P17B\", \"P17L\", \"P18B\", \"P18L\", \"P19B\",\"P19L\", \"P20B\", \"P20L\")) data <- scRepertoire::addVariable(data,     variable.name = \"Type\",     variables = rep(c(\"B\", \"L\", \"X\", \"Y\"), 2) ) data <- scRepertoire::addVariable(data,     variable.name = \"Subject\",     variables = rep(c(\"P17\", \"P18\", \"P19\", \"P20\"), each = 2) )  ClonalResidencyPlot(data, groups = c(\"P18B\", \"P18L\")) #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_point()`).  ClonalResidencyPlot(data, group_by = \"Type\", groups = c(\"L\", \"B\"),  split_by = \"Subject\") #> Warning: [ClonalResidencyPlot] Not both groups 'L, B' is not present in the data for 'P18'. Skipping. #> Warning: [ClonalResidencyPlot] Not both groups 'L, B' is not present in the data for 'P20'. Skipping. #> Warning: Removed 40 rows containing missing values or values outside the scale range #> (`geom_point()`).  ClonalResidencyPlot(data, group_by = \"Type\", groups = c(\"L:B\", \"Y:X\"),  split_by = \"Subject\") #> Warning: [ClonalResidencyPlot] Not both groups 'Y, X' is not present in the data for 'P17'. Skipping. #> Warning: [ClonalResidencyPlot] Not both groups 'L, B' is not present in the data for 'P18'. Skipping. #> Warning: [ClonalResidencyPlot] Not both groups 'Y, X' is not present in the data for 'P19'. Skipping. #> Warning: [ClonalResidencyPlot] Not both groups 'L, B' is not present in the data for 'P20'. Skipping. #> Warning: Removed 40 rows containing missing values or values outside the scale range #> (`geom_point()`). #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_point()`).  ClonalResidencyPlot(data, plot_type = \"venn\", groups = c(\"B\", \"L\"),  group_by = \"Type\", split_by = \"Subject\")  ClonalResidencyPlot(data, plot_type = \"upset\", groups = c(\"P18B\", \"P18L\"))  # }"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalStatPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ClonalStatPlot — ClonalStatPlot","title":"ClonalStatPlot — ClonalStatPlot","text":"Visualize statistics clones.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalStatPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClonalStatPlot — ClonalStatPlot","text":"","code":"ClonalStatPlot(   data,   clones = NULL,   top = NULL,   orderby = NULL,   clone_call = \"aa\",   chain = \"both\",   plot_type = c(\"bar\", \"box\", \"violin\", \"heatmap\", \"pies\", \"sankey\", \"alluvial\", \"trend\"),   group_by = \"Sample\",   groups = NULL,   subgroup_by = NULL,   subgroups = NULL,   within_subgroup = match.arg(plot_type) != \"pies\",   relabel = FALSE,   facet_by = NULL,   split_by = NULL,   y = NULL,   xlab = NULL,   ylab = NULL,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalStatPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ClonalStatPlot — ClonalStatPlot","text":"data product scRepertoire::combineTCR, scRepertoire::combineTCR, scRepertoire::combineExpression. clones specific clones track. argument must provided. multiple character values provided, treated clone IDs. single character value provided parentheses, evaluated expression select clones. clones selected per subgrouping/facetting/splitting group. example, top(3) select top 3 clones facetting/splitting group. can change behavior passing groups argument explicitly. example top(3, groups = \"Sample\") select top 3 clones sample. expression, see also clone_selectors. can also named list expressions, need quoted. basic unit visualization clone groups defined names list, instead single clones. top number top clones select. Default 10. shortcut top(10) clones provided. clones provided, limit number clones selected (based orderby expression). clones list, applied clone group. orderby expression order clones . Default NULL. Note clones ordered value expression descending order. clone_call call clone - VDJC gene (gene), CDR3 nucleotide (nt), CDR3 amino acid (aa), VDJC gene + CDR3 nucleotide (strict) custom variable data chain indicate specific chain used - e.g. \"\", \"TRA\", \"TRG\", \"IGH\", \"IGL\" plot_type type plot use. Default \"bar\". Possible values \"trend\", \"sankey\", \"alluvial\" (alias \"sankey\"). group_by column name meta data group cells. Default: \"Sample\" groups groups include plot. Default NULL. NULL, groups group_by included. subgroup_by column name meta data subgroup nodes (group nodes x). Default: NULL. argument supported \"sankey\"/\"alluvial\" plot. NULL, nodes grouped/colored clones subgroups subgroups include plot. Default NULL. within_subgroup Whether select clones within subgroup. relabel Whether relabel clones. Default FALSE. clone ids, especially using CDR3 sequences, can long hard read. TRUE, clones relabeled \"clone1\", \"clone2\", etc. works visualizations single clones. facet_by column name meta data facet plots. Default: NULL. argument supported raise error provided. split_by column name meta data split plots. Default: NULL y y-axis variable use plot. Default NULL. bar plot, Either \"TotalSize\" \"Count\" can used, representing total size (# cells) selected clones number selected clones, respectively. xlab x-axis label. Default NULL. ylab y-axis label. Default NULL. ... arguments passed specific plot function. bar plot, see plotthis::BarPlot(). trend plot, see plotthis::TrendPlot(). sankey plot, see plotthis::SankeyPlot().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalStatPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ClonalStatPlot — ClonalStatPlot","text":"ggplot object list combine FALSE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalStatPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ClonalStatPlot — ClonalStatPlot","text":"","code":"# \\donttest{ set.seed(8525) data(contig_list, package = \"scRepertoire\") data <- scRepertoire::combineTCR(contig_list,     samples = c(\"P17B\", \"P17L\", \"P18B\", \"P18L\", \"P19B\",\"P19L\", \"P20B\", \"P20L\")) data <- scRepertoire::addVariable(data,     variable.name = \"Type\",     variables = rep(c(\"B\", \"L\"), 4) ) data <- scRepertoire::addVariable(data,     variable.name = \"Subject\",     variables = rep(c(\"P17\", \"P18\", \"P19\", \"P20\"), each = 2) ) # add a fake variable (e.g. cell type from scRNA-seq) data <- lapply(data, function(x) {     x$CellType <- sample(c(\"CD4\", \"CD8\", \"B\", \"NK\"), nrow(x), replace = TRUE)     # x <- x[x$CTaa == \"CAVRKTTGTASKLTF_CASSLFGDKGETQYF\", , drop = F]     return(x) })  # showing the top 10 clones in P17B and P17L ClonalStatPlot(data, group_by = \"Sample\", groups = c(\"P17B\", \"P17L\"))  # showing the top 10 clones in P17B and P17L, with the clones relabeled ClonalStatPlot(data, group_by = \"Sample\", groups = c(\"P17B\", \"P17L\"), relabel = TRUE)  # showing the top 2 clones in groups B and L, with subgroups in each group ClonalStatPlot(data, group_by = \"Type\", subgroup_by = \"Sample\", top = 2,     subgroups = c(\"P17B\", \"P17L\", \"P18B\", \"P18L\", \"P19B\",\"P19L\"), relabel = TRUE)  # showing selected clones in P17B and P17L ClonalStatPlot(data, group_by = \"Sample\", groups = c(\"P17B\", \"P17L\"),     clones = c(\"CVVSDNTGGFKTIF_CASSVRRERANTGELFF\", \"NA_CASSVRRERANTGELFF\"), relabel = TRUE)  # facetting is supported ClonalStatPlot(data, group_by = \"Subject\", groups = c(\"P17\", \"P19\"),     facet_by = \"Type\", relabel = TRUE)  # as well as splitting ClonalStatPlot(data, group_by = \"Subject\", groups = c(\"P17\", \"P19\"),     split_by = \"Type\", relabel = TRUE)  # showing shared clones between P17B and P17L (top 10 clones that are present in both samples) ClonalStatPlot(data, group_by = \"Sample\", groups = c(\"P17B\", \"P17L\"),      clones = \"shared(P17B, P17L)\", relabel = TRUE, top = 10)  # showing shared clones but with a different order ClonalStatPlot(data, group_by = \"Sample\", groups = c(\"P17B\", \"P17L\"), top = 10,      clones = \"shared(P17B, P17L)\", relabel = TRUE, orderby = \"P17B\")  # showing clones larger than 10 in P17L and ordered by the clone size in P17L descendingly ClonalStatPlot(data, group_by = \"Sample\", groups = c(\"P17B\", \"P17L\"),      clones = \"sel(P17L > 10)\", relabel = TRUE, top = 5, orderby = \"P17L\")  # using trend plot ClonalStatPlot(data, group_by = \"Sample\", groups = c(\"P17B\", \"P17L\"),     clones = sel(P17L > 10 & P17B > 0), relabel = TRUE, orderby = \"P17L\",     plot_type = \"trend\")  # using heatmap ClonalStatPlot(data, group_by = \"Sample\", groups = c(\"P17B\", \"P17L\"),     clones = sel(P17L > 10 & P17B > 0), relabel = TRUE, orderby = \"P17L\",     plot_type = \"heatmap\")  # using heatmap with subgroups ClonalStatPlot(data, group_by = \"Sample\", groups = c(\"P17B\", \"P17L\"),     clones = list(         ExpandedClonesInP17L = \"sel(P17L > 20)\",         ExpandedClonesInP17B = \"sel(P17B > 20)\"     ), subgroup_by = \"CellType\", pie_size = sqrt,     plot_type = \"pies\", show_row_names = TRUE, show_column_names = TRUE)  # using clone groups and showing dynamics using sankey plot ClonalStatPlot(data, group_by = \"Sample\", groups = c(\"P17B\", \"P17L\"),     clones = list(       \"Hyper-expanded clones in P17B\" = \"sel(P17B > 10)\",       \"Hyper-expanded clones in P17L\" = \"sel(P17L > 10)\"     ), plot_type = \"sankey\")  # }"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalVolumePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"ClonalVolumePlot — ClonalVolumePlot","title":"ClonalVolumePlot — ClonalVolumePlot","text":"ClonalVolumePlot","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalVolumePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ClonalVolumePlot — ClonalVolumePlot","text":"","code":"ClonalVolumePlot(   data,   clone_call = \"aa\",   chain = \"both\",   scale = FALSE,   plot_type = c(\"bar\", \"box\", \"violin\"),   x = \"Sample\",   group_by = NULL,   facet_by = NULL,   split_by = NULL,   order = list(),   ylab = NULL,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/ClonalVolumePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ClonalVolumePlot — ClonalVolumePlot","text":"data product scRepertoire::combineTCR, scRepertoire::combineTCR, scRepertoire::combineExpression. clone_call call clone - VDJC gene (gene), CDR3 nucleotide (nt), CDR3 amino acid (aa), VDJC gene + CDR3 nucleotide (strict) custom variable data chain indicate specific chain used - e.g. \"\", \"TRA\", \"TRG\", \"IGH\", \"IGL\" scale Whether use clone proportion clone size plot. plot_type type plot use. Default \"bar\". Possible values \"bar\", \"box\", \"violin\". \"box\" \"violin\" used, data broken Sample plotted group. x column name meta data use x-axis. Default: \"Sample\" group_by column name meta data group cells. Default: NULL facet_by column name meta data facet plots. Default: NULL split_by column name meta data split plots. Default: NULL order order x-axis items groups. Default empty list. list values. names column names, values order. ylab y-axis label. ... arguments passed specific plot function. bar plot, see plotthis::BarPlot(). box plot, see plotthis::BoxPlot(). violin plot, see plotthis::ViolinPlot().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalVolumePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ClonalVolumePlot — ClonalVolumePlot","text":"ggplot object list combine FALSE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClonalVolumePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ClonalVolumePlot — ClonalVolumePlot","text":"","code":"# \\donttest{ set.seed(8525) data(contig_list, package = \"scRepertoire\") data <- scRepertoire::combineTCR(contig_list) data <- scRepertoire::addVariable(data,     variable.name = \"Type\",     variables = sample(c(\"B\", \"L\"), 8, replace = TRUE) ) data <- scRepertoire::addVariable(data,     variable.name = \"Sex\",     variables = sample(c(\"M\", \"F\"), 8, replace = TRUE) )  ClonalVolumePlot(data)  ClonalVolumePlot(data, x = \"Type\")  ClonalVolumePlot(data, x = \"Type\", order = list(Type = c(\"L\", \"B\")))  ClonalVolumePlot(data, x = c(\"Type\", \"Sex\"), scale = TRUE) #> Multiple columns are provided in 'x'. They will be concatenated into one column.  ClonalVolumePlot(data, x = \"Type\", group_by = \"Sex\", position = \"stack\")  ClonalVolumePlot(data,     plot_type = \"box\", x = \"Type\", comparisons = TRUE,     group_by = \"Sex\" )  ClonalVolumePlot(data, plot_type = \"violin\", x = \"Type\", add_box = TRUE)   # on a Seurat object data(scRep_example, package = \"scRepertoire\") data(contig_list, package = \"scRepertoire\") combined <- scRepertoire::combineTCR(contig_list,     samples = c(\"P17B\", \"P17L\", \"P18B\", \"P18L\", \"P19B\", \"P19L\", \"P20B\", \"P20L\") ) sobj <- scRepertoire::combineExpression(combined, scRep_example) ClonalVolumePlot(sobj) #> Warning: The 'Sample' column is not found in the meta data, 'orig.indent' will be used instead.  ClonalVolumePlot(sobj, x = \"seurat_clusters\") #> Warning: The 'Sample' column is not found in the meta data, 'orig.indent' will be used instead.  ClonalVolumePlot(sobj, group_by = \"seurat_clusters\") #> Warning: The 'Sample' column is not found in the meta data, 'orig.indent' will be used instead.  ClonalVolumePlot(sobj, x = \"seurat_clusters\", plot_type = \"box\") #> Warning: The 'Sample' column is not found in the meta data, 'orig.indent' will be used instead.  # }"},{"path":"https://pwwang.github.io/scplotter/reference/ClustreePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Clustree plot — ClustreePlot","title":"Clustree plot — ClustreePlot","text":"function generates clustree plot data frame Seurat object.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClustreePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clustree plot — ClustreePlot","text":"","code":"ClustreePlot(object, ...)"},{"path":"https://pwwang.github.io/scplotter/reference/ClustreePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clustree plot — ClustreePlot","text":"object data frame Seurat object ... arguments passed plotthis::ClustreePlot()","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClustreePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clustree plot — ClustreePlot","text":"ggplot object list combine FALSE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ClustreePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clustree plot — ClustreePlot","text":"","code":"data(ifnb_sub) ClustreePlot(ifnb_sub, prefix = \"RNA_snn_res.\") #> Registered S3 method overwritten by 'gglogger': #>   method from    #>   +.gg   ggplot2"},{"path":"https://pwwang.github.io/scplotter/reference/DummyClonalScatterPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"DummyClonalScatterPlot — DummyClonalScatterPlot","title":"DummyClonalScatterPlot — DummyClonalScatterPlot","text":"Function plot scatter plot clonal data dummy group pair.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/DummyClonalScatterPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DummyClonalScatterPlot — DummyClonalScatterPlot","text":"","code":"DummyClonalScatterPlot(df, title, group_by, scatter_cor, size_by, ...)"},{"path":"https://pwwang.github.io/scplotter/reference/DummyClonalScatterPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DummyClonalScatterPlot — DummyClonalScatterPlot","text":"df data frame clonal data. data frame columns: group_by, 'count', 'fraction'.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/DummyClonalScatterPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DummyClonalScatterPlot — DummyClonalScatterPlot","text":"ggplot object","code":""},{"path":"https://pwwang.github.io/scplotter/reference/EnrichmentPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Enrichment Plot — EnrichmentPlot","title":"Enrichment Plot — EnrichmentPlot","text":"function generates various types plots enrichment (-representation) analysis.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/EnrichmentPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enrichment Plot — EnrichmentPlot","text":"","code":"EnrichmentPlot(   data,   top_term = NULL,   plot_type = c(\"bar\", \"dot\", \"lollipop\", \"network\", \"enrichmap\", \"wordcloud\",     \"comparison\", \"heatmap\"),   x_by = NULL,   size_by = NULL,   fill_cutoff_name = NULL,   fill_name = NULL,   values_fill = 0,   character_width = 50,   expand = NULL,   word_type = c(\"term\", \"feature\"),   split_by = NULL,   split_by_sep = \"_\",   facet_by = NULL,   facet_scales = NULL,   group_by = NULL,   group_by_sep = \"_\",   metric = \"p.adjust\",   cutoff = NULL,   palette = \"Spectral\",   xlab = NULL,   ylab = NULL,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/EnrichmentPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enrichment Plot — EnrichmentPlot","text":"data data frame enrichment results generated clusterProfiler, enrichR, enrichit. top_term Number top terms show plot. Default 6 plots except \"enrichmap\" 100. plot_type Type plot generate. Options \"bar\", \"dot\", \"lollipop\", \"network\", \"enrichmap\", \"wordcloud\", \"comparison\". x_by character vector column names use x-axis. Default NULL. Works \"dot\" \"lollipop\". size_by character vector column names use size points. Default NULL. Works \"comparison\", \"dot\" \"lollipop\". fill_cutoff_name legend name terms cutoff value. Default NULL. Works \"comparison\", \"dot\" \"lollipop\". fill_name legend name metric. Default NULL. Works \"comparison\", \"dot\" \"lollipop\". values_fill value fill missing values data. Default 0. Used \"heatmap\" plot. character_width width terms plot. Default 50. terms long, wrapped fit width. expand numeric vector length 1, 2 4 expand plot. Default NULL. Works \"bar\" plot. See also plotthis::BarPlot. word_type type word show wordcloud. Options \"term\" \"feature\". Default \"term\". Works \"wordcloud\". split_by character vector column names split plots. Default NULL. split_by_sep character separate split_by column names. Default \"_\". facet_by character vector column names facet plots. Default NULL. facet_scales facet scales. Default NULL. group_by character vector column names group terms. Default NULL. Works \"comparison\" \"heatmap\" plot. heatmap, used columns_by plotthis::Heatmap(). group_by_sep character concatenate group_by columns multiple columns. Default \"_\". Works \"comparison\" plot. metric column name use metric. Default \"p.adjust\". cutoff cutoff value metric mark tems plot. Default NULL. Note terms filtered value. Use top_terms filter terms. specified: 'bar' plot show line cutoff value 'dot' plot show gray dots terms cutoff value 'lollipop' plot show gray dots terms cutoff value 'comparison' plot show gray dots terms cutoff value effect 'network', 'enrichmap', 'wordcloud' plots palette color palette use plot. Default \"Spectral\". See plotthis::show_palettes available palettes. xlab x-axis label. Default NULL. ylab y-axis label. Default NULL. ... arguments passed specific plot function. \"bar\", plotthis::BarPlot(). \"dot\", plotthis::DotPlot(). \"lollipop\", plotthis::LollipopPlot(). \"network\", plotthis::EnrichNetwork(). \"enrichmap\", plotthis::EnrichMap(). \"wordcloud\", plotthis::WordCloudPlot(). \"comparison\", plotthis::DotPlot(). \"heatmap\", plotthis::Heatmap().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/EnrichmentPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Enrichment Plot — EnrichmentPlot","text":"","code":"set.seed(8525) data(enrich_example, package = \"plotthis\") enrich_example$Group <- sample(LETTERS[1:3], nrow(enrich_example), replace = TRUE) data(enrich_multidb_example, package = \"plotthis\")  EnrichmentPlot(enrich_example)  EnrichmentPlot(enrich_example, cutoff = 0.05)  EnrichmentPlot(enrich_example, palette = \"Paired\")   enrich_example$Description <- enrich_example$ID EnrichmentPlot(enrich_example, plot_type = \"heatmap\", group_by = \"Group\",  show_row_names = TRUE, show_column_names = TRUE, cutoff = 0.05)   # Multiple databases#' EnrichmentPlot(enrich_multidb_example, facet_by = \"Database\", facet_nrow = 2)   enrich_example$Group <- sample(c(\"A\", \"B\"), nrow(enrich_example), replace = TRUE) EnrichmentPlot(enrich_example, plot_type = \"comparison\", group_by = \"Group\")  EnrichmentPlot(enrich_example, plot_type = \"dot\", top_term = 10)  EnrichmentPlot(enrich_example, plot_type = \"lollipop\", top_term = 10)  EnrichmentPlot(enrich_example, plot_type = \"network\")  EnrichmentPlot(enrich_example, plot_type = \"enrichmap\")  EnrichmentPlot(enrich_example, plot_type = \"wordcloud\")  # Wordcloud with feature EnrichmentPlot(enrich_example, plot_type = \"wordcloud\", word_type = \"feature\")"},{"path":"https://pwwang.github.io/scplotter/reference/FeatureStatPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature statistic plot — FeatureStatPlot","title":"Feature statistic plot — FeatureStatPlot","text":"function creates various types feature statistic plots Seurat object, Giotto object, path .h5ad file opened H5File hdf5r package. allows plotting features gene expression, scores, metadata across different groups conditions. function supports multiple plot types including violin, box, bar, ridge, dimension reduction, correlation, heatmap, dot plots. can also handle multiple features supports faceting, splitting, grouping metadata columns.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/FeatureStatPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature statistic plot — FeatureStatPlot","text":"","code":"FeatureStatPlot(   object,   features,   plot_type = c(\"violin\", \"box\", \"bar\", \"ridge\", \"dim\", \"cor\", \"heatmap\", \"dot\"),   spat_unit = NULL,   feat_type = NULL,   reduction = NULL,   graph = NULL,   bg_cutoff = 0,   dims = 1:2,   rows_name = \"Features\",   ident = NULL,   assay = NULL,   layer = NULL,   agg = mean,   group_by = NULL,   split_by = NULL,   facet_by = NULL,   xlab = NULL,   ylab = NULL,   x_text_angle = NULL,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/FeatureStatPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature statistic plot — FeatureStatPlot","text":"object seurat object, giotto object, path .h5ad file opened H5File hdf5r package. features character vector feature names plot_type Type plot. can \"violin\", \"box\", \"bar\", \"ridge\", \"dim\", \"cor\", \"heatmap\" \"dot\" spat_unit spatial unit use plot. applied Giotto objects. feat_type feature type features (e.g. \"rna\", \"dna\", \"protein\"), applied Giotto objects. reduction Name reduction plot (example, \"umap\"), used plot_type \"dim\" can use reduction feature. graph Specify graph name add edges cell neighbors plot, used plot_type \"dim\". bg_cutoff Background cutoff dim plot, used plot_type \"dim\". dims Dimensions plot, used plot_type \"dim\". rows_name name rows heatmap, used plot_type \"heatmap\". ident column name meta data identify cells. assay assay use feature data. layer layer use feature data. agg aggregation function use bar plot. group_by column name meta data group cells. split_by Column name meta data split cells different plots. TRUE, cells split features. facet_by Column name meta data facet plots. always NULL. xlab x-axis label. ylab y-axis label. x_text_angle angle x-axis text. used plot_type \"violin\", \"bar\", \"box\". ... arguments passed plot functions. plot_type \"violin\", arguments passed plotthis::ViolinPlot(). plot_type \"box\", arguments passed plotthis::BoxPlot(). plot_type \"bar\", arguments passed plotthis::BarPlot(). plot_type \"ridge\", arguments passed plotthis::RidgePlot(). plot_type \"dim\", arguments passed plotthis::FeatureDimPlot(). plot_type \"heatmap\", arguments passed plotthis::Heatmap(). plot_type \"cor\" 2 features, arguments passed plotthis::CorPlot(). plot_type \"cor\" 2 features, arguments passed plotthis::CorPairsPlot(). plot_type \"dot\", arguments passed plotthis::Heatmap() cell_type set \"dot\".","code":""},{"path":"https://pwwang.github.io/scplotter/reference/FeatureStatPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Feature statistic plot — FeatureStatPlot","text":"ggplot object list combine FALSE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/FeatureStatPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Feature statistic plot — FeatureStatPlot","text":"See: https://pwwang.github.io/scplotter/articles/Giotto_Visium.html https://pwwang.github.io/scplotter/articles/Giotto_Xenium.html examples using function Giotto objects. see: https://pwwang.github.io/scplotter/articles/Working_with_anndata_h5ad_files.html examples using function .h5ad files.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/FeatureStatPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Feature statistic plot — FeatureStatPlot","text":"","code":"# \\donttest{ data(pancreas_sub)  FeatureStatPlot(pancreas_sub, features = c(\"G2M_score\", \"nCount_RNA\"),    ident = \"SubCellType\", facet_scales = \"free_y\")  FeatureStatPlot(pancreas_sub, features = c(\"G2M_score\", \"nCount_RNA\"),    ident = \"SubCellType\", plot_type = \"box\", facet_scales = \"free_y\")  FeatureStatPlot(pancreas_sub, features = c(\"G2M_score\", \"nCount_RNA\"),    ident = \"SubCellType\", plot_type = \"bar\", facet_scales = \"free_y\")  FeatureStatPlot(pancreas_sub, features = c(\"G2M_score\", \"nCount_RNA\"),    ident = \"SubCellType\", plot_type = \"ridge\", flip = TRUE, facet_scales = \"free_y\") #> Picking joint bandwidth of 0.0498 #> Picking joint bandwidth of 516 #> Picking joint bandwidth of 0.0498 #> Picking joint bandwidth of 516  FeatureStatPlot(pancreas_sub, features = c(\"G2M_score\", \"nCount_RNA\"),    ident = \"SubCellType\", facet_scales = \"free_y\", add_point = TRUE)  FeatureStatPlot(pancreas_sub, features = c(\"G2M_score\", \"nCount_RNA\"),    ident = \"SubCellType\", facet_scales = \"free_y\", add_trend = TRUE)  FeatureStatPlot(pancreas_sub, features = c(\"G2M_score\", \"nCount_RNA\"),    ident = \"SubCellType\", facet_scales = \"free_y\", add_stat = mean)  FeatureStatPlot(pancreas_sub, features = c(\"G2M_score\", \"nCount_RNA\"),    ident = \"SubCellType\", facet_scales = \"free_y\", group_by = \"Phase\") #> Warning: Groups with fewer than two datapoints have been dropped. #> ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes. #> Warning: Groups with fewer than two datapoints have been dropped. #> ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes. #> Warning: Groups with fewer than two datapoints have been dropped. #> ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes. #> Warning: Groups with fewer than two datapoints have been dropped. #> ℹ Set `drop = FALSE` to consider such groups for position adjustment purposes.  FeatureStatPlot(    subset(pancreas_sub,        subset = SubCellType %in% c(\"Ductal\", \"Ngn3 low EP\", \"Ngn3 high EP\")),    features = c(\"G2M_score\"),    ident = \"SubCellType\", group_by = \"Phase\", comparisons = TRUE) #> Detected more than 2 groups. Use multiple_method for comparison  FeatureStatPlot(pancreas_sub, features = c(\"Rbp4\", \"Pyy\"), ident = \"SubCellType\",    add_bg = TRUE, add_box = TRUE, stack = TRUE)  FeatureStatPlot(pancreas_sub, features = c(        \"Sox9\", \"Anxa2\", \"Bicc1\", # Ductal        \"Neurog3\", \"Hes6\", # EPs        \"Fev\", \"Neurod1\", # Pre-endocrine        \"Rbp4\", \"Pyy\", # Endocrine        \"Ins1\", \"Gcg\", \"Sst\", \"Ghrl\" # Beta, Alpha, Delta, Epsilon    ), ident = \"SubCellType\", add_bg = TRUE, stack = TRUE,    legend.position = \"top\", legend.direction = \"horizontal\")  FeatureStatPlot(pancreas_sub, plot_type = \"box\", features = c(       \"Sox9\", \"Anxa2\", \"Bicc1\", # Ductal       \"Neurog3\", \"Hes6\", # EPs       \"Fev\", \"Neurod1\", # Pre-endocrine       \"Rbp4\", \"Pyy\", # Endocrine       \"Ins1\", \"Gcg\", \"Sst\", \"Ghrl\" # Beta, Alpha, Delta, Epsilon    ), ident = \"SubCellType\", add_bg = TRUE, stack = TRUE, flip = TRUE,    legend.position = \"top\", legend.direction = \"horizontal\")  # Use splitting instead of facetting FeatureStatPlot(pancreas_sub, features = c(\"Neurog3\", \"Rbp4\", \"Ins1\"),    ident = \"CellType\", split_by = TRUE)   FeatureStatPlot(pancreas_sub, plot_type = \"dim\", features = \"G2M_score\", reduction = \"UMAP\")  FeatureStatPlot(pancreas_sub, plot_type = \"dim\", features = \"G2M_score\", reduction = \"UMAP\",    bg_cutoff = -Inf)  FeatureStatPlot(pancreas_sub, plot_type = \"dim\", features = \"G2M_score\", reduction = \"UMAP\",    theme = \"theme_blank\")  FeatureStatPlot(pancreas_sub, plot_type = \"dim\", features = \"G2M_score\", reduction = \"UMAP\",    theme = ggplot2::theme_classic, theme_args = list(base_size = 16))   # Label and highlight cell points FeatureStatPlot(pancreas_sub, plot_type = \"dim\", features = \"Rbp4\", reduction = \"UMAP\",    highlight = 'SubCellType == \"Delta\"')  FeatureStatPlot(pancreas_sub, plot_type = \"dim\",    features = \"Rbp4\", split_by = \"Phase\", reduction = \"UMAP\",    highlight = TRUE, theme = \"theme_blank\")   # Add a density layer FeatureStatPlot(pancreas_sub, plot_type = \"dim\", features = \"Rbp4\", reduction = \"UMAP\",    add_density = TRUE)  FeatureStatPlot(pancreas_sub, plot_type = \"dim\", features = \"Rbp4\", reduction = \"UMAP\",    add_density = TRUE, density_filled = TRUE) #> Warning: Removed 396 rows containing missing values or values outside the scale range #> (`geom_raster()`). #> Warning: Removed 396 rows containing missing values or values outside the scale range #> (`geom_raster()`).   # Change the plot type from point to the hexagonal bin FeatureStatPlot(pancreas_sub, plot_type = \"dim\", features = \"Rbp4\", reduction = \"UMAP\",    hex = TRUE) #> Warning: Removed 4 rows containing missing values or values outside the scale range #> (`geom_hex()`). #> Warning: Removed 4 rows containing missing values or values outside the scale range #> (`geom_hex()`).  FeatureStatPlot(pancreas_sub, plot_type = \"dim\", features = \"Rbp4\", reduction = \"UMAP\",    hex = TRUE, hex_bins = 20) #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_hex()`). #> Warning: Removed 5 rows containing missing values or values outside the scale range #> (`geom_hex()`). #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_hex()`). #> Warning: Removed 5 rows containing missing values or values outside the scale range #> (`geom_hex()`).   # Show lineages on the plot based on the pseudotime FeatureStatPlot(pancreas_sub, plot_type = \"dim\", features = \"Lineage3\", reduction = \"UMAP\",    lineages = \"Lineage3\")  FeatureStatPlot(pancreas_sub, plot_type = \"dim\", features = \"Lineage3\", reduction = \"UMAP\",    lineages = \"Lineage3\", lineages_whiskers = TRUE)  FeatureStatPlot(pancreas_sub, plot_type = \"dim\", features = \"Lineage3\", reduction = \"UMAP\",    lineages = \"Lineage3\", lineages_span = 0.1)   FeatureStatPlot(pancreas_sub, plot_type = \"dim\",   features = c(\"Sox9\", \"Anxa2\", \"Bicc1\"), reduction = \"UMAP\",   theme = \"theme_blank\",   theme_args = list(plot.subtitle = ggplot2::element_text(size = 10),      strip.text = ggplot2::element_text(size = 8)) )   # Plot multiple features with different scales endocrine_markers <- c(\"Ins1\", \"Gcg\", \"Sst\", \"Ghrl\") FeatureStatPlot(pancreas_sub, endocrine_markers, reduction = \"UMAP\", plot_type = \"dim\")  FeatureStatPlot(pancreas_sub, endocrine_markers, reduction = \"UMAP\", lower_quantile = 0,    upper_quantile = 0.8, plot_type = \"dim\")  FeatureStatPlot(pancreas_sub, endocrine_markers, reduction = \"UMAP\",    lower_cutoff = 1, upper_cutoff = 4, plot_type = \"dim\")  FeatureStatPlot(pancreas_sub, endocrine_markers, reduction = \"UMAP\", bg_cutoff = 2,    lower_cutoff = 2, upper_cutoff = 4, plot_type = \"dim\")  FeatureStatPlot(pancreas_sub, c(\"Sst\", \"Ghrl\"), split_by = \"Phase\", reduction = \"UMAP\",    plot_type = \"dim\")  FeatureStatPlot(pancreas_sub, features = c(\"G2M_score\", \"nCount_RNA\"),    ident = \"SubCellType\", plot_type = \"dim\", facet_by = \"Phase\", split_by = TRUE, ncol = 1)   # Heatmap features <- c(    \"Sox9\", \"Anxa2\", \"Bicc1\", # Ductal    \"Neurog3\", \"Hes6\", # EPs    \"Fev\", \"Neurod1\", # Pre-endocrine    \"Rbp4\", \"Pyy\", # Endocrine    \"Ins1\", \"Gcg\", \"Sst\", \"Ghrl\" # Beta, Alpha, Delta, Epsilon ) rows_data <- data.frame(    Features = features,  # 'rows_name' default is \"Features\"    group = c(        \"Ductal\", \"Ductal\", \"Ductal\", \"EPs\", \"EPs\", \"Pre-endocrine\",        \"Pre-endocrine\", \"Endocrine\", \"Endocrine\", \"Beta\", \"Alpha\", \"Delta\", \"Epsilon\"),    TF = c(TRUE, FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE,        TRUE, TRUE, TRUE),    CSPA = c(FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, TRUE, TRUE,        FALSE, FALSE, FALSE) ) FeatureStatPlot(pancreas_sub, features = features, ident = \"SubCellType\",    plot_type = \"heatmap\", name = \"Expression Level\")  FeatureStatPlot(pancreas_sub, features = features, ident = \"Phase\",    plot_type = \"heatmap\", name = \"Expression Level\", columns_split_by = \"SubCellType\")  FeatureStatPlot(pancreas_sub, features = features, ident = \"SubCellType\",    plot_type = \"heatmap\", cell_type = \"bars\", name = \"Expression Level\")  FeatureStatPlot(pancreas_sub, features = features, ident = \"SubCellType\", cell_type = \"dot\",    plot_type = \"heatmap\", name = \"Expression Level\", dot_size = function(x) sum(x > 0) / length(x),    dot_size_name = \"Percent Expressed\", add_bg = TRUE, rows_data = rows_data,    show_row_names = TRUE, rows_split_by = \"group\", cluster_rows = FALSE,    column_annotation = c(\"Phase\", \"G2M_score\"),    column_annotation_type = list(Phase = \"pie\", G2M_score = \"violin\"),    column_annotation_params = list(G2M_score = list(show_legend = FALSE)),    row_annotation = c(\"TF\", \"CSPA\"),    row_annotation_side = \"right\",    row_annotation_type = list(TF = \"simple\", CSPA = \"simple\")) #> Warning: [Heatmap] Assuming 'row_annotation_agg[\"TF\"] = dplyr::first' for the simple annotation #> Warning: [Heatmap] Assuming 'row_annotation_agg[\"CSPA\"] = dplyr::first' for the simple annotation  FeatureStatPlot(pancreas_sub, features = features, ident = \"SubCellType\", cell_type = \"dot\",    plot_type = \"heatmap\", name = \"Expression Level\", dot_size = function(x) sum(x > 0) / length(x),    dot_size_name = \"Percent Expressed\", add_bg = TRUE,    rows_data = rows_data, show_column_names = TRUE, rows_split_by = \"group\",    cluster_rows = FALSE, flip = TRUE, palette = \"YlOrRd\",    column_annotation = c(\"Phase\", \"G2M_score\"),    column_annotation_type = list(Phase = \"pie\", G2M_score = \"violin\"),    column_annotation_params = list(G2M_score = list(show_legend = FALSE)),    row_annotation = c(\"TF\", \"CSPA\"),    row_annotation_side = \"right\",    row_annotation_type = list(TF = \"simple\", CSPA = \"simple\")) #> Warning: [Heatmap] Assuming 'row_annotation_agg[\"TF\"] = dplyr::first' for the simple annotation #> Warning: [Heatmap] Assuming 'row_annotation_agg[\"CSPA\"] = dplyr::first' for the simple annotation  FeatureStatPlot(pancreas_sub, features = features, ident = \"SubCellType\", cell_type = \"violin\",    plot_type = \"heatmap\", name = \"Expression Level\", show_row_names = TRUE,    cluster_columns = FALSE, rows_split_by = \"group\", rows_data = rows_data)  FeatureStatPlot(pancreas_sub, features = features, ident = \"SubCellType\", cell_type = \"dot\",    plot_type = \"heatmap\", dot_size = function(x) sum(x > 0) / length(x),    dot_size_name = \"Percent Expressed\", palette = \"viridis\", add_reticle = TRUE,    rows_data = rows_data, name = \"Expression Level\", show_row_names = TRUE,    rows_split_by = \"group\")  # Visualize the markers for each sub-cell type (the markers can overlap) # Say: markers <- Seurat::FindAllMarkers(pancreas_sub, ident = \"SubCellType\") markers <- data.frame(     avg_log2FC = c(          3.44, 2.93, 2.72, 2.63, 2.13, 1.97, 2.96, 1.92, 5.22, 3.91, 3.64, 4.52,          3.45, 2.45, 1.75, 2.08, 9.10, 4.45, 3.61, 6.30, 4.96, 3.49, 3.91, 3.90,          10.58, 5.84, 4.73, 3.34, 7.22, 4.52, 10.10, 4.25),     cluster = factor(rep(          c(\"Ductal\", \"Ngn3 low EP\", \"Ngn3 high EP\", \"Pre-endocrine\", \"Beta\",            \"Alpha\", \"Delta\", \"Epsilon\"), each = 4),          levels = levels(pancreas_sub$SubCellType)),     gene = c(          \"Cyr61\", \"Adamts1\", \"Anxa2\", \"Bicc1\", \"1700011H14Rik\", \"Gsta3\", \"8430408G22Rik\",          \"Anxa2\", \"Ppp1r14a\", \"Btbd17\", \"Neurog3\", \"Gadd45a\", \"Fev\", \"Runx1t1\", \"Hmgn3\",          \"Cryba2\", \"Ins2\", \"Ppp1r1a\", \"Gng12\", \"Sytl4\", \"Irx1\", \"Tmem27\", \"Peg10\", \"Irx2\",          \"Sst\", \"Ptprz1\", \"Arg1\", \"Frzb\", \"Irs4\", \"Mboat4\", \"Ghrl\", \"Arg1\"     ) ) FeatureStatPlot(pancreas_sub,   features = unique(markers$gene), ident = \"SubCellType\", cell_type = \"bars\",   plot_type = \"heatmap\", rows_data = markers, rows_name = \"gene\", rows_split_by = \"cluster\",   show_row_names = TRUE, show_column_names = TRUE, name = \"Expression Level\",   cluster_rows = FALSE, cluster_columns = FALSE, rows_split_palette = \"Paired\")   # Use plot_type = \"dot\" to as a shortcut for heatmap with cell_type = \"dot\" FeatureStatPlot(pancreas_sub, features = features, ident = \"SubCellType\", plot_type = \"dot\")   named_features <- list(    Ductal = c(\"Sox9\", \"Anxa2\", \"Bicc1\"),    EPs = c(\"Neurog3\", \"Hes6\"),    `Pre-endocrine` = c(\"Fev\", \"Neurod1\"),    Endocrine = c(\"Rbp4\", \"Pyy\"),    Beta = \"Ins1\", Alpha = \"Gcg\", Delta = \"Sst\", Epsilon = \"Ghrl\" ) FeatureStatPlot(pancreas_sub, features = named_features, ident = \"SubCellType\",    plot_type = \"heatmap\", name = \"Expression Level\", show_row_names = TRUE)   # Correlation plot FeatureStatPlot(pancreas_sub, features = c(\"Pyy\", \"Rbp4\"), plot_type = \"cor\",    anno_items = c(\"eq\", \"r2\", \"spearman\"))  FeatureStatPlot(pancreas_sub, features = c(\"Ins1\", \"Gcg\", \"Sst\", \"Ghrl\"),    plot_type = \"cor\")  # }"},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":null,"dir":"Reference","previous_headings":"","what":"SCPlotterChat Class — SCPlotterChat","title":"SCPlotterChat Class — SCPlotterChat","text":"SCPlotterChat Class SCPlotterChat Class","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SCPlotterChat Class — SCPlotterChat","text":"R6 class provides chat functionality SCPlotter","code":""},{"path":[]},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"SCPlotterChat Class — SCPlotterChat","text":"SCPlotterChat$new() SCPlotterChat$clear_history() SCPlotterChat$get_history() SCPlotterChat$list_tools() SCPlotterChat$list_data() SCPlotterChat$set_data() SCPlotterChat$get_data() SCPlotterChat$ask() SCPlotterChat$clone()","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"SCPlotterChat Class — SCPlotterChat","text":"Create new instance SCPlotterChat class","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SCPlotterChat Class — SCPlotterChat","text":"","code":"SCPlotterChat$new(provider, verbose = FALSE)"},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SCPlotterChat Class — SCPlotterChat","text":"provider LLM provider object See https://tjarkvandemerwe.github.io/tidyprompt/articles/getting_started.html#setup--llm-provider details LLM providers verbose logical value indicating whether print verbose messages Default FALSE. override verbose setting provider","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"SCPlotterChat Class — SCPlotterChat","text":"new instance SCPlotterChat class","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"method-clear-history-","dir":"Reference","previous_headings":"","what":"Method clear_history()","title":"SCPlotterChat Class — SCPlotterChat","text":"Clear chat history","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"SCPlotterChat Class — SCPlotterChat","text":"","code":"SCPlotterChat$clear_history()"},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"SCPlotterChat Class — SCPlotterChat","text":"NULL","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"method-get-history-","dir":"Reference","previous_headings":"","what":"Method get_history()","title":"SCPlotterChat Class — SCPlotterChat","text":"Get chat history","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"SCPlotterChat Class — SCPlotterChat","text":"","code":"SCPlotterChat$get_history()"},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"SCPlotterChat Class — SCPlotterChat","text":"chat history","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"method-list-tools-","dir":"Reference","previous_headings":"","what":"Method list_tools()","title":"SCPlotterChat Class — SCPlotterChat","text":"Print list available tools","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"SCPlotterChat Class — SCPlotterChat","text":"","code":"SCPlotterChat$list_tools()"},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"SCPlotterChat Class — SCPlotterChat","text":"NULL","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"method-list-data-","dir":"Reference","previous_headings":"","what":"Method list_data()","title":"SCPlotterChat Class — SCPlotterChat","text":"Print list available data objects can used","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"SCPlotterChat Class — SCPlotterChat","text":"","code":"SCPlotterChat$list_data()"},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"SCPlotterChat Class — SCPlotterChat","text":"NULL","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"method-set-data-","dir":"Reference","previous_headings":"","what":"Method set_data()","title":"SCPlotterChat Class — SCPlotterChat","text":"Set data analyzed","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"SCPlotterChat Class — SCPlotterChat","text":"","code":"SCPlotterChat$set_data(data, name = NULL)"},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"SCPlotterChat Class — SCPlotterChat","text":"data data object set name name data object (optional)","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"SCPlotterChat Class — SCPlotterChat","text":"NULL","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"method-get-data-","dir":"Reference","previous_headings":"","what":"Method get_data()","title":"SCPlotterChat Class — SCPlotterChat","text":"Get data analyzed","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"SCPlotterChat Class — SCPlotterChat","text":"","code":"SCPlotterChat$get_data()"},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"SCPlotterChat Class — SCPlotterChat","text":"data object","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"method-ask-","dir":"Reference","previous_headings":"","what":"Method ask()","title":"SCPlotterChat Class — SCPlotterChat","text":"Send prompt chat interface receive response","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"SCPlotterChat Class — SCPlotterChat","text":"","code":"SCPlotterChat$ask(prompt, verbose = NULL, add_to_history = TRUE)"},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"SCPlotterChat Class — SCPlotterChat","text":"prompt character string containing user's query instruction verbose logical value indicating whether print verbose messages Default NULL, use verbose setting SCPlotterChat object add_to_history logical value indicating whether add prompt response chat history Default TRUE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"SCPlotterChat Class — SCPlotterChat","text":"response chat system","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"SCPlotterChat Class — SCPlotterChat","text":"objects class cloneable method.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"SCPlotterChat Class — SCPlotterChat","text":"","code":"SCPlotterChat$clone(deep = FALSE)"},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"SCPlotterChat Class — SCPlotterChat","text":"deep Whether make deep clone.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SCPlotterChat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SCPlotterChat Class — SCPlotterChat","text":"","code":"# \\donttest{ if (FALSE) { provider <- tidyprompt::llm_provider_openai(api_key = Sys.getenv(\"OPENAI_API_KEY\")) chat <- SCPlotterChat$new(provider) chat$ask(\"What are the tools to use?\") # Tool identified:  ListTools # Available tools: # -  ClonalOverlapPlot :  ClonalOverlapPlot #    Plot the overlap of the clones in different samples/groups. # # -  EnrichmentPlot :  Enrichment Plot #    This function generates various types of plots for enrichment analysis. # ...  chat$ask(\"Plot the default cell-cell communication plot for the cellphonedb_res dataset\") # Tool identified:  CCCPlot # Data object identified:  cellphonedb_res # Running tool:  CCCPlot  chat$ask(\"do a heatmap instead\") # Tool identified:  CCCPlot # Data object identified:  cellphonedb_res # Running tool:  CCCPlot } # }"},{"path":"https://pwwang.github.io/scplotter/reference/SpatDimPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot categories for spatial data — SpatDimPlot","title":"Plot categories for spatial data — SpatDimPlot","text":"Plot categories spatial data","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SpatDimPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot categories for spatial data — SpatDimPlot","text":"","code":"SpatDimPlot(   object,   fov = NULL,   boundaries = NULL,   image = NULL,   masks = NULL,   shapes = NULL,   points = NULL,   ext = NULL,   crop = TRUE,   group_by = NULL,   features = NULL,   layer = NULL,   scale_factor = NULL,   layers = NULL,   flip_y = NULL,   padding = NULL,   image_scale = NULL,   x = NULL,   y = NULL,   nmols = 1000,   shapes_fill_by = NULL,   graph = NULL,   shape = 16,   legend.position = \"right\",   legend.direction = \"vertical\",   theme = \"theme_box\",   theme_args = list(),   title = NULL,   subtitle = NULL,   xlab = NULL,   ylab = NULL,   facet_scales = \"fixed\",   facet_nrow = NULL,   facet_ncol = NULL,   facet_byrow = TRUE,   feat_type = \"rna\",   use_overlap = FALSE,   shapes_feat_type = \"cell\",   shapes_alpha = NULL,   spat_unit = NULL,   spat_loc_name = NULL,   spat_enr_names = NULL,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/SpatDimPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot categories for spatial data — SpatDimPlot","text":"object Seurat object Giotto object. fov name field view (FOV) plot, works Seurat objects. boundaries name boundaries plot, works Seurat objects. image name image plot. Possible values : NULL: Seurat objects Visium data, first image used. Giotto objects Seurat objects spatial data, image plotted. image name(s): name image(s) plot. color name: color use background plot. TRUE: Seurat objects Visium data, first image used. Seurat objects spatial data, error raised. Giotto objects FOV, (non-overlapping) images plotted; otherwise first image used. FALSE: disable image plotting. masks Logical, whether plot masks. supported Seurat Giotto objects now. shapes Plot shapes spatial plot. supported Seurat objects Visium SlideSeq data. Seurat objects FOV, TRUE, boundaries used boundaries shapes. Otherwise used boundaries. Giotto objects Seurat objects FOV, defaults TRUE shapes_fill_by provided. Set FALSE disable shapes plotting. points Logical, whether plot points. TRUE, points plotted using coordinates object. Defaults TRUE. ext extent plot. NULL, extent calculated data. numeric vector length 4, format c(xmin, xmax, ymin, ymax). can also object created terra::ext(). crop Whether crop plot extent available data. Similar crop argument Seurat::SpatialDimPlot(). Defaults TRUE. group_by name metadata column group points . character factor column. special value \"molecules\" can used plot molecules FOV. features character vector feature names plot. provided, points colored features. SpatDimPlot(), used plot molecules FOV. SpatFeaturePlot(), plots faceted features. layer layer use feature expression data. Applicable Seurat Giotto objects. Defaults \"data\" Seurat objects, \"normalized\" Giotto objects. Giotto objects, can also \"scaled\", \"raw\", \"counts\", \"custom\". Seurat objects, can \"data\", \"scale.data\", \"counts\". scale_factor Internal use . scale factor use image, extracted object. layers character vector layers plot. Possible values : \"image\": plot image background, first layer provided. \"masks\": plot masks \"shapes\": plot shapes \"points\": plot points order layers matters, first layer plotted first. can also use disable layers excluding vector. flip_y Internal use mostly, unless want flip y-axis plot. padding padding add extent plot, available crop = TRUE ext = NULL. Seurat objects FOV, defaults 0. cases, defaults 0 image plotted, 0.05 otherwise. image_scale Choose scale factor (\"lowres\"/\"hires\") apply order matchthe plot specified image. Similar image.scale argument Seurat::SpatialDimPlot(). x Internal use , name x coordinate column data. Used adopt different data types. y Internal use , name y coordinate column data. Used adopt different data types. nmols Max number molecule specified features dim plot Similar nmols argument Seurat::ImageDimPlot(). also applied Giotto objects. shapes_fill_by name variable fill shapes . can also color name, case shapes filled color. provided, shapes argument set TRUE default. graph name graph use spatial plot. Currently supported Giotto objects. graph data obtained using GiottoClass::getSpatialNetwork(). TRUE, default graph used. given character, name graph use. \":\" name, first part used spat_unit, second part graph name. shape shape points, alias points_shape. See https://ggplot2.tidyverse.org/reference/aes_linetype_size_shape.html details. legend.position position legend. Defaults \"right\". legend.direction direction legend. Defaults \"vertical\". theme theme use plot. Defaults \"theme_box\". can name theme (e.g. \"ggplot2::theme_bw\") function . three themes can passed without namespace: \"theme_box\", \"theme_this\" \"theme_blank\", actually aliases plotthis::theme_box(), plotthis::theme_this() ggplot2::theme_void() (without braces). theme_args list arguments pass theme function. title title plot. NULL, title added. subtitle subtitle plot. NULL, subtitle added. xlab label x-axis. NULL, label added. ylab label y-axis. NULL, label added. facet_scales scales use facets. Defaults \"free\". Can \"free\", \"fixed\", \"free_x\", \"free_y\". facet_nrow number rows use facets. Defaults NULL, means number rows calculated automatically. facet_ncol number columns use facets. Defaults NULL, means number columns calculated automatically. facet_byrow Logical, whether facet row. Defaults FALSE. feat_type feature type features (e.g. \"rna\", \"dna\", \"protein\"), applied Giotto objects. use_overlap use polygon feature coordinates overlap results, applied Giotto objects. shapes_feat_type feature type features use shapes (e.g. \"rna\", \"dna\", \"protein\"), applied Giotto objects. shapes_alpha alpha value use shapes. \"points\" plotted, defaults 0.5; otherwise defaults 1. spat_unit spatial unit use plot. applied Giotto objects. spat_loc_name name spatial location use plot. applied Giotto objects. spat_enr_names names spatial enrichment results use plot. applied Giotto objects. ... Additional arguments passed spatial plot function. image_ prefix, arguments used plot image (plotthis::SpatImagePlot()). masks_ prefix, arguments used plot masks (plotthis::SpatMasksPlot()). shapes_ prefix, arguments used plot shapes (plotthis::SpatShapesPlot()). points_ prefix, arguments used plot points (plotthis::SpatPointsPlot()). prefix provided, arguments used points arguments, lower priority points_ prefixed arguments.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SpatDimPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot categories for spatial data — SpatDimPlot","text":"ggplot object","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SpatDimPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot categories for spatial data — SpatDimPlot","text":"See: https://pwwang.github.io/scplotter/articles/Knowing_your_spatial_data_and_visualization.html details, https://pwwang.github.io/scplotter/articles/Knowing_your_spatial_data_and_visualization.html#examples examples.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SpatFeaturePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot features for spatial data — SpatFeaturePlot","title":"Plot features for spatial data — SpatFeaturePlot","text":"features can include  expression, dimension reduction components, metadata, etc","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SpatFeaturePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot features for spatial data — SpatFeaturePlot","text":"","code":"SpatFeaturePlot(   object,   fov = NULL,   boundaries = NULL,   image = NULL,   masks = NULL,   shapes = NULL,   points = NULL,   ext = NULL,   crop = TRUE,   group_by = NULL,   features = NULL,   layer = NULL,   scale_factor = NULL,   layers = NULL,   flip_y = NULL,   padding = NULL,   image_scale = NULL,   x = NULL,   y = NULL,   nmols = 1000,   shapes_fill_by = NULL,   graph = NULL,   shape = 16,   legend.position = \"right\",   legend.direction = \"vertical\",   theme = \"theme_box\",   theme_args = list(),   title = NULL,   subtitle = NULL,   xlab = NULL,   ylab = NULL,   facet_scales = \"fixed\",   facet_nrow = NULL,   facet_ncol = NULL,   facet_byrow = TRUE,   feat_type = \"rna\",   use_overlap = FALSE,   shapes_feat_type = \"cell\",   shapes_alpha = NULL,   spat_unit = NULL,   spat_loc_name = NULL,   spat_enr_names = NULL,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/SpatFeaturePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot features for spatial data — SpatFeaturePlot","text":"object Seurat object Giotto object. fov name field view (FOV) plot, works Seurat objects. boundaries name boundaries plot, works Seurat objects. image name image plot. Possible values : NULL: Seurat objects Visium data, first image used. Giotto objects Seurat objects spatial data, image plotted. image name(s): name image(s) plot. color name: color use background plot. TRUE: Seurat objects Visium data, first image used. Seurat objects spatial data, error raised. Giotto objects FOV, (non-overlapping) images plotted; otherwise first image used. FALSE: disable image plotting. masks Logical, whether plot masks. supported Seurat Giotto objects now. shapes Plot shapes spatial plot. supported Seurat objects Visium SlideSeq data. Seurat objects FOV, TRUE, boundaries used boundaries shapes. Otherwise used boundaries. Giotto objects Seurat objects FOV, defaults TRUE shapes_fill_by provided. Set FALSE disable shapes plotting. points Logical, whether plot points. TRUE, points plotted using coordinates object. Defaults TRUE. ext extent plot. NULL, extent calculated data. numeric vector length 4, format c(xmin, xmax, ymin, ymax). can also object created terra::ext(). crop Whether crop plot extent available data. Similar crop argument Seurat::SpatialDimPlot(). Defaults TRUE. group_by name metadata column group points . character factor column. special value \"molecules\" can used plot molecules FOV. features character vector feature names plot. provided, points colored features. SpatDimPlot(), used plot molecules FOV. SpatFeaturePlot(), plots faceted features. layer layer use feature expression data. Applicable Seurat Giotto objects. Defaults \"data\" Seurat objects, \"normalized\" Giotto objects. Giotto objects, can also \"scaled\", \"raw\", \"counts\", \"custom\". Seurat objects, can \"data\", \"scale.data\", \"counts\". scale_factor Internal use . scale factor use image, extracted object. layers character vector layers plot. Possible values : \"image\": plot image background, first layer provided. \"masks\": plot masks \"shapes\": plot shapes \"points\": plot points order layers matters, first layer plotted first. can also use disable layers excluding vector. flip_y Internal use mostly, unless want flip y-axis plot. padding padding add extent plot, available crop = TRUE ext = NULL. Seurat objects FOV, defaults 0. cases, defaults 0 image plotted, 0.05 otherwise. image_scale Choose scale factor (\"lowres\"/\"hires\") apply order matchthe plot specified image. Similar image.scale argument Seurat::SpatialDimPlot(). x Internal use , name x coordinate column data. Used adopt different data types. y Internal use , name y coordinate column data. Used adopt different data types. nmols Max number molecule specified features dim plot Similar nmols argument Seurat::ImageDimPlot(). also applied Giotto objects. shapes_fill_by name variable fill shapes . can also color name, case shapes filled color. provided, shapes argument set TRUE default. graph name graph use spatial plot. Currently supported Giotto objects. graph data obtained using GiottoClass::getSpatialNetwork(). TRUE, default graph used. given character, name graph use. \":\" name, first part used spat_unit, second part graph name. shape shape points, alias points_shape. See https://ggplot2.tidyverse.org/reference/aes_linetype_size_shape.html details. legend.position position legend. Defaults \"right\". legend.direction direction legend. Defaults \"vertical\". theme theme use plot. Defaults \"theme_box\". can name theme (e.g. \"ggplot2::theme_bw\") function . three themes can passed without namespace: \"theme_box\", \"theme_this\" \"theme_blank\", actually aliases plotthis::theme_box(), plotthis::theme_this() ggplot2::theme_void() (without braces). theme_args list arguments pass theme function. title title plot. NULL, title added. subtitle subtitle plot. NULL, subtitle added. xlab label x-axis. NULL, label added. ylab label y-axis. NULL, label added. facet_scales scales use facets. Defaults \"free\". Can \"free\", \"fixed\", \"free_x\", \"free_y\". facet_nrow number rows use facets. Defaults NULL, means number rows calculated automatically. facet_ncol number columns use facets. Defaults NULL, means number columns calculated automatically. facet_byrow Logical, whether facet row. Defaults FALSE. feat_type feature type features (e.g. \"rna\", \"dna\", \"protein\"), applied Giotto objects. use_overlap use polygon feature coordinates overlap results, applied Giotto objects. shapes_feat_type feature type features use shapes (e.g. \"rna\", \"dna\", \"protein\"), applied Giotto objects. shapes_alpha alpha value use shapes. \"points\" plotted, defaults 0.5; otherwise defaults 1. spat_unit spatial unit use plot. applied Giotto objects. spat_loc_name name spatial location use plot. applied Giotto objects. spat_enr_names names spatial enrichment results use plot. applied Giotto objects. ... Additional arguments passed spatial plot function. image_ prefix, arguments used plot image (plotthis::SpatImagePlot()). masks_ prefix, arguments used plot masks (plotthis::SpatMasksPlot()). shapes_ prefix, arguments used plot shapes (plotthis::SpatShapesPlot()). points_ prefix, arguments used plot points (plotthis::SpatPointsPlot()). prefix provided, arguments used points arguments, lower priority points_ prefixed arguments.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SpatFeaturePlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot features for spatial data — SpatFeaturePlot","text":"ggplot object","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SpatFeaturePlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot features for spatial data — SpatFeaturePlot","text":"See: https://pwwang.github.io/scplotter/articles/Knowing_your_spatial_data_and_visualization.html details, https://pwwang.github.io/scplotter/articles/Knowing_your_spatial_data_and_visualization.html#examples examples.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SpatPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot features for spatial data — SpatPlot","title":"Plot features for spatial data — SpatPlot","text":"features can include  expression, dimension reduction components, metadata, etc","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SpatPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot features for spatial data — SpatPlot","text":"","code":"SpatPlot(   object,   fov = NULL,   boundaries = NULL,   image = NULL,   masks = NULL,   shapes = NULL,   points = NULL,   ext = NULL,   crop = TRUE,   group_by = NULL,   features = NULL,   layer = NULL,   scale_factor = NULL,   layers = NULL,   flip_y = NULL,   padding = NULL,   image_scale = NULL,   x = NULL,   y = NULL,   nmols = 1000,   shapes_fill_by = NULL,   graph = NULL,   shape = 16,   legend.position = \"right\",   legend.direction = \"vertical\",   theme = \"theme_box\",   theme_args = list(),   title = NULL,   subtitle = NULL,   xlab = NULL,   ylab = NULL,   facet_scales = \"fixed\",   facet_nrow = NULL,   facet_ncol = NULL,   facet_byrow = TRUE,   feat_type = \"rna\",   use_overlap = FALSE,   shapes_feat_type = \"cell\",   shapes_alpha = NULL,   spat_unit = NULL,   spat_loc_name = NULL,   spat_enr_names = NULL,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/SpatPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot features for spatial data — SpatPlot","text":"object Seurat object Giotto object. fov name field view (FOV) plot, works Seurat objects. boundaries name boundaries plot, works Seurat objects. image name image plot. Possible values : NULL: Seurat objects Visium data, first image used. Giotto objects Seurat objects spatial data, image plotted. image name(s): name image(s) plot. color name: color use background plot. TRUE: Seurat objects Visium data, first image used. Seurat objects spatial data, error raised. Giotto objects FOV, (non-overlapping) images plotted; otherwise first image used. FALSE: disable image plotting. masks Logical, whether plot masks. supported Seurat Giotto objects now. shapes Plot shapes spatial plot. supported Seurat objects Visium SlideSeq data. Seurat objects FOV, TRUE, boundaries used boundaries shapes. Otherwise used boundaries. Giotto objects Seurat objects FOV, defaults TRUE shapes_fill_by provided. Set FALSE disable shapes plotting. points Logical, whether plot points. TRUE, points plotted using coordinates object. Defaults TRUE. ext extent plot. NULL, extent calculated data. numeric vector length 4, format c(xmin, xmax, ymin, ymax). can also object created terra::ext(). crop Whether crop plot extent available data. Similar crop argument Seurat::SpatialDimPlot(). Defaults TRUE. group_by name metadata column group points . character factor column. special value \"molecules\" can used plot molecules FOV. features character vector feature names plot. provided, points colored features. SpatDimPlot(), used plot molecules FOV. SpatFeaturePlot(), plots faceted features. layer layer use feature expression data. Applicable Seurat Giotto objects. Defaults \"data\" Seurat objects, \"normalized\" Giotto objects. Giotto objects, can also \"scaled\", \"raw\", \"counts\", \"custom\". Seurat objects, can \"data\", \"scale.data\", \"counts\". scale_factor Internal use . scale factor use image, extracted object. layers character vector layers plot. Possible values : \"image\": plot image background, first layer provided. \"masks\": plot masks \"shapes\": plot shapes \"points\": plot points order layers matters, first layer plotted first. can also use disable layers excluding vector. flip_y Internal use mostly, unless want flip y-axis plot. padding padding add extent plot, available crop = TRUE ext = NULL. Seurat objects FOV, defaults 0. cases, defaults 0 image plotted, 0.05 otherwise. image_scale Choose scale factor (\"lowres\"/\"hires\") apply order matchthe plot specified image. Similar image.scale argument Seurat::SpatialDimPlot(). x Internal use , name x coordinate column data. Used adopt different data types. y Internal use , name y coordinate column data. Used adopt different data types. nmols Max number molecule specified features dim plot Similar nmols argument Seurat::ImageDimPlot(). also applied Giotto objects. shapes_fill_by name variable fill shapes . can also color name, case shapes filled color. provided, shapes argument set TRUE default. graph name graph use spatial plot. Currently supported Giotto objects. graph data obtained using GiottoClass::getSpatialNetwork(). TRUE, default graph used. given character, name graph use. \":\" name, first part used spat_unit, second part graph name. shape shape points, alias points_shape. See https://ggplot2.tidyverse.org/reference/aes_linetype_size_shape.html details. legend.position position legend. Defaults \"right\". legend.direction direction legend. Defaults \"vertical\". theme theme use plot. Defaults \"theme_box\". can name theme (e.g. \"ggplot2::theme_bw\") function . three themes can passed without namespace: \"theme_box\", \"theme_this\" \"theme_blank\", actually aliases plotthis::theme_box(), plotthis::theme_this() ggplot2::theme_void() (without braces). theme_args list arguments pass theme function. title title plot. NULL, title added. subtitle subtitle plot. NULL, subtitle added. xlab label x-axis. NULL, label added. ylab label y-axis. NULL, label added. facet_scales scales use facets. Defaults \"free\". Can \"free\", \"fixed\", \"free_x\", \"free_y\". facet_nrow number rows use facets. Defaults NULL, means number rows calculated automatically. facet_ncol number columns use facets. Defaults NULL, means number columns calculated automatically. facet_byrow Logical, whether facet row. Defaults FALSE. feat_type feature type features (e.g. \"rna\", \"dna\", \"protein\"), applied Giotto objects. use_overlap use polygon feature coordinates overlap results, applied Giotto objects. shapes_feat_type feature type features use shapes (e.g. \"rna\", \"dna\", \"protein\"), applied Giotto objects. shapes_alpha alpha value use shapes. \"points\" plotted, defaults 0.5; otherwise defaults 1. spat_unit spatial unit use plot. applied Giotto objects. spat_loc_name name spatial location use plot. applied Giotto objects. spat_enr_names names spatial enrichment results use plot. applied Giotto objects. ... Additional arguments passed spatial plot function. image_ prefix, arguments used plot image (plotthis::SpatImagePlot()). masks_ prefix, arguments used plot masks (plotthis::SpatMasksPlot()). shapes_ prefix, arguments used plot shapes (plotthis::SpatShapesPlot()). points_ prefix, arguments used plot points (plotthis::SpatPointsPlot()). prefix provided, arguments used points arguments, lower priority points_ prefixed arguments.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/SpatPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot features for spatial data — SpatPlot","text":"ggplot object","code":""},{"path":"https://pwwang.github.io/scplotter/reference/cellphonedb_res.html","id":null,"dir":"Reference","previous_headings":"","what":"A toy example of CellPhoneDB output from LIANA — cellphonedb_res","title":"A toy example of CellPhoneDB output from LIANA — cellphonedb_res","text":"dataset generated using python package LIANA","code":""},{"path":"https://pwwang.github.io/scplotter/reference/cellphonedb_res.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A toy example of CellPhoneDB output from LIANA — cellphonedb_res","text":"data.frame 10 rows 6 columns","code":""},{"path":"https://pwwang.github.io/scplotter/reference/cellphonedb_res.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A toy example of CellPhoneDB output from LIANA — cellphonedb_res","text":"https://liana-py.readthedocs.io/en/latest/notebooks/basic_usage.html#Tileplot","code":""},{"path":"https://pwwang.github.io/scplotter/reference/cellphonedb_res.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A toy example of CellPhoneDB output from LIANA — cellphonedb_res","text":"","code":"if (FALSE) { # \\dontrun{ # Python code # # import liana # import liana as li # # needed for visualization and toy data # import scanpy as sc # # from liana.method import cellphonedb # adata = sc.datasets.pbmc68k_reduced() # cellphonedb(adata, #             groupby='bulk_labels', #             # NOTE by default the resource uses HUMAN gene symbols #             resource_name='consensus', #             expr_prop=0.1, #             verbose=True, key_added='cpdb_res') # cellphonedb_res = adata.uns['cpdb_res'] # cellphonedb_res = cellphonedb_res[cellphonedb_res['cellphone_pvals'] < 0.05] } # }"},{"path":"https://pwwang.github.io/scplotter/reference/clonal_size_data.html","id":null,"dir":"Reference","previous_headings":"","what":"clonal_size_data — clonal_size_data","title":"clonal_size_data — clonal_size_data","text":"Function get clonal size data group_by values.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/clonal_size_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"clonal_size_data — clonal_size_data","text":"","code":"clonal_size_data(data, clone_call, chain, groupings)"},{"path":"https://pwwang.github.io/scplotter/reference/clonal_size_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"clonal_size_data — clonal_size_data","text":"data product scRepertoire::combineTCR, scRepertoire::combineTCR, scRepertoire::combineExpression. clone_call call clone - VDJC gene (gene), CDR3 nucleotide (nt), CDR3 amino acid (aa), VDJC gene + CDR3 nucleotide (strict) custom variable data chain indicate specific chain used - e.g. \"\", \"TRA\", \"TRG\", \"IGH\", \"IGL\" groupings column names meta data group cells.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/clonal_size_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"clonal_size_data — clonal_size_data","text":"data frame clonal size data.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/clone_selectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper functions to select clones based on various criteria — top","title":"Helper functions to select clones based on various criteria — top","text":"helper functions allow selection clones based various criteria size, group comparison, existence specific groups.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/clone_selectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper functions to select clones based on various criteria — top","text":"","code":"top(n, groups = NULL, data = NULL)  sel(expr, groups = NULL, data = NULL)  uniq(group1, group2, ..., groups = NULL, data = NULL)  shared(group1, group2, ..., groups = NULL, data = NULL)  gt(group1, group2, include_zeros = TRUE, groups = NULL, data = NULL)  ge(group1, group2, include_zeros = TRUE, groups = NULL, data = NULL)  lt(group1, group2, include_zeros = TRUE, groups = NULL, data = NULL)  le(group1, group2, include_zeros = TRUE, groups = NULL, data = NULL)  eq(group1, group2, groups = NULL, data = NULL)  ne(group1, group2, include_zeros = TRUE, groups = NULL, data = NULL)"},{"path":"https://pwwang.github.io/scplotter/reference/clone_selectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper functions to select clones based on various criteria — top","text":"n number top clones select threshold size. groups column names meta data group cells. default, assumed facet_by split_by parent frame. data data frame containing clone information. Default NULL. NULL, get data parent.frame. typical data column named CloneID columns groupings. Supposingly grouped data frame grouping columns. grouping column, value size clone. default, data assumed parent frame. expr expression (characters) filter clones (e.g. \"group1 > group2\" select clones group1 larger group2). group1 first group compare. group2 second group compare. ... groups compare. include_zeros Whether include clones zero size comparison. TRUE, comparison (s1 > s2) clone selected, s1 s2 must greater 0. FALSE, first group must greater second group.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/clone_selectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper functions to select clones based on various criteria — top","text":"vector selected clones.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/clone_selectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper functions to select clones based on various criteria — top","text":"","code":"data <- data.frame(    CloneID = 1:10,    group1 = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9),    group2 = c(7, 3, 8, 2, 1, 5, 9, 4, 6, 0),    groups = c(\"A\", \"A\", \"A\", \"A\", \"B\", \"B\", \"B\", \"B\", \"B\", \"B\") ) data <- data[order(data$group1 + data$group2, decreasing = TRUE), ] scplotter:::top(3) #>   CloneID group1 group2 groups #> 1       7      6      9      B #> 2       9      8      6      B #> 3       8      7      4      B scplotter:::top(3, groups = \"groups\") #> # A tibble: 6 × 4 #> # Groups:   groups [2] #>   CloneID group1 group2 groups #>     <int>  <dbl>  <dbl> <chr>  #> 1       3      2      8 A      #> 2       1      0      7 A      #> 3       4      3      2 A      #> 4       7      6      9 B      #> 5       9      8      6 B      #> 6       8      7      4 B      scplotter:::sel(group1 == 0 | group2 == 0) #>   CloneID group1 group2 groups #> 1      10      9      0      B #> 2       1      0      7      A scplotter:::uniq(group1, group2) #>   CloneID group1 group2 groups #> 1      10      9      0      B scplotter:::shared(group1, group2) #>   CloneID group1 group2 groups #> 1       7      6      9      B #> 2       9      8      6      B #> 3       8      7      4      B #> 4       3      2      8      A #> 5       6      5      5      B #> 6       4      3      2      A #> 7       5      4      1      B #> 8       2      1      3      A scplotter:::gt(group1, group2) #>   CloneID group1 group2 groups #> 1       9      8      6      B #> 2       8      7      4      B #> 3      10      9      0      B #> 4       4      3      2      A #> 5       5      4      1      B scplotter:::lt(group1, group2) #>   CloneID group1 group2 groups #> 1       7      6      9      B #> 2       3      2      8      A #> 3       1      0      7      A #> 4       2      1      3      A scplotter:::le(group1, group2) #>   CloneID group1 group2 groups #> 1       7      6      9      B #> 2       3      2      8      A #> 3       6      5      5      B #> 4       1      0      7      A #> 5       2      1      3      A scplotter:::lt(group1, group2, include_zeros = FALSE) #>   CloneID group1 group2 groups #> 1       7      6      9      B #> 2       3      2      8      A #> 3       2      1      3      A scplotter:::eq(group1, group2) #>   CloneID group1 group2 groups #> 1       6      5      5      B"},{"path":"https://pwwang.github.io/scplotter/reference/dot-feature_stat_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Feature statistic plot when given a composed data frame — .feature_stat_plot","title":"Feature statistic plot when given a composed data frame — .feature_stat_plot","text":"Feature statistic plot given composed data frame","code":""},{"path":"https://pwwang.github.io/scplotter/reference/dot-feature_stat_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Feature statistic plot when given a composed data frame — .feature_stat_plot","text":"","code":".feature_stat_plot(   data,   features,   plot_type,   should_shrink,   should_pivot,   graph = NULL,   bg_cutoff = 0,   dims = 1:2,   rows_name = \"Features\",   ident = NULL,   agg = mean,   group_by = NULL,   split_by = NULL,   facet_by = NULL,   xlab = NULL,   ylab = NULL,   x_text_angle = NULL,   ... )"},{"path":"https://pwwang.github.io/scplotter/reference/dot-feature_stat_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Feature statistic plot when given a composed data frame — .feature_stat_plot","text":"data data frame containing feature data metadata. features character vector feature names plot_type Type plot. can \"violin\", \"box\", \"bar\", \"ridge\", \"dim\", \"cor\", \"heatmap\" \"dot\" graph Specify graph name add edges cell neighbors plot, used plot_type \"dim\". bg_cutoff Background cutoff dim plot, used plot_type \"dim\". dims Dimensions plot, used plot_type \"dim\". rows_name name rows heatmap, used plot_type \"heatmap\". ident column name meta data identify cells. agg aggregation function use bar plot. group_by column name meta data group cells. split_by Column name meta data split cells different plots. TRUE, cells split features. facet_by Column name meta data facet plots. always NULL. xlab x-axis label. ylab y-axis label. x_text_angle angle x-axis text. used plot_type \"violin\", \"bar\", \"box\". ... Arguments passed FeatureStatPlot object seurat object, giotto object, path .h5ad file opened H5File hdf5r package. spat_unit spatial unit use plot. applied Giotto objects. feat_type feature type features (e.g. \"rna\", \"dna\", \"protein\"), applied Giotto objects. reduction Name reduction plot (example, \"umap\"), used plot_type \"dim\" can use reduction feature. assay assay use feature data. layer layer use feature data.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/dot-feature_stat_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Feature statistic plot when given a composed data frame — .feature_stat_plot","text":"ggplot object list combine FALSE","code":""},{"path":"https://pwwang.github.io/scplotter/reference/dot-new_scale_layers.html","id":null,"dir":"Reference","previous_headings":"","what":"Add new scale layers — .new_scale_layers","title":"Add new scale layers — .new_scale_layers","text":"Add new scale layers","code":""},{"path":"https://pwwang.github.io/scplotter/reference/dot-new_scale_layers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add new scale layers — .new_scale_layers","text":"","code":".new_scale_layers(scales)"},{"path":"https://pwwang.github.io/scplotter/reference/dot-new_scale_layers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add new scale layers — .new_scale_layers","text":"scales scales already applied previous layers (need add new scales new layers).","code":""},{"path":"https://pwwang.github.io/scplotter/reference/dot-new_scale_layers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add new scale layers — .new_scale_layers","text":"list ggnewscale layers specified scales.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/dot-points_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Get points arguments from the dot-dot-dot arguments in the spatial plot function — .points_args","title":"Get points arguments from the dot-dot-dot arguments in the spatial plot function — .points_args","text":"Get points arguments dot-dot-dot arguments spatial plot function","code":""},{"path":"https://pwwang.github.io/scplotter/reference/dot-points_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get points arguments from the dot-dot-dot arguments in the spatial plot function — .points_args","text":"","code":".points_args(args, ...)"},{"path":"https://pwwang.github.io/scplotter/reference/dot-points_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get points arguments from the dot-dot-dot arguments in the spatial plot function — .points_args","text":"args list arguments (dot arguments) passed spatial plot function. ... Additional arguments parsed.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/dot-points_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get points arguments from the dot-dot-dot arguments in the spatial plot function — .points_args","text":"list points arguments.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/dot-rect_bg_image.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a rectangle as the image (background) of a spatial plot and fill with a given color — .rect_bg_image","title":"Draw a rectangle as the image (background) of a spatial plot and fill with a given color — .rect_bg_image","text":"Draw rectangle image (background) spatial plot fill given color","code":""},{"path":"https://pwwang.github.io/scplotter/reference/dot-rect_bg_image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a rectangle as the image (background) of a spatial plot and fill with a given color — .rect_bg_image","text":"","code":".rect_bg_image(args, fill)"},{"path":"https://pwwang.github.io/scplotter/reference/dot-rect_bg_image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a rectangle as the image (background) of a spatial plot and fill with a given color — .rect_bg_image","text":"args list arguments (dot arguments) passed spatial plot function. fill color fill rectangle.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/dot-rect_bg_image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a rectangle as the image (background) of a spatial plot and fill with a given color — .rect_bg_image","text":"ggplot2 layer object can added ggplot.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/dot-seurat_points_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Process points layer for Seurat spatial plots — .seurat_points_layer","title":"Process points layer for Seurat spatial plots — .seurat_points_layer","text":"Process points layer Seurat spatial plots","code":""},{"path":"https://pwwang.github.io/scplotter/reference/dot-seurat_points_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process points layer for Seurat spatial plots — .seurat_points_layer","text":"","code":".seurat_points_layer(   object,   fov = NULL,   boundaries = NULL,   x = \"x\",   y = \"y\",   swap_xy = TRUE,   image,   args,   crop,   points_data,   ext_unscaled,   scale_factor,   group_by,   shape,   features,   layer,   legend.position,   legend.direction,   flip_y,   ext )"},{"path":"https://pwwang.github.io/scplotter/reference/dot-seurat_points_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process points layer for Seurat spatial plots — .seurat_points_layer","text":"object Seurat object Giotto object. fov name field view (FOV) plot, works Seurat objects. boundaries name boundaries plot, works Seurat objects. x Internal use , name x coordinate column data. Used adopt different data types. y Internal use , name y coordinate column data. Used adopt different data types. swap_xy Logical, whether swap x y coordinates points data. Seurat objects, loaded Visium, Xenium SlideSeq data, x y coordinates opposite order. loaded FOV data, coordinates correct order. image name image plot. Possible values : NULL: Seurat objects Visium data, first image used. Giotto objects Seurat objects spatial data, image plotted. image name(s): name image(s) plot. color name: color use background plot. TRUE: Seurat objects Visium data, first image used. Seurat objects spatial data, error raised. Giotto objects FOV, (non-overlapping) images plotted; otherwise first image used. FALSE: disable image plotting. crop Whether crop plot extent available data. Similar crop argument Seurat::SpatialDimPlot(). Defaults TRUE. scale_factor Internal use . scale factor use image, extracted object. group_by name metadata column group points . character factor column. special value \"molecules\" can used plot molecules FOV. shape shape points, alias points_shape. See https://ggplot2.tidyverse.org/reference/aes_linetype_size_shape.html details. features character vector feature names plot. provided, points colored features. SpatDimPlot(), used plot molecules FOV. SpatFeaturePlot(), plots faceted features. layer layer use feature expression data. Applicable Seurat Giotto objects. Defaults \"data\" Seurat objects, \"normalized\" Giotto objects. Giotto objects, can also \"scaled\", \"raw\", \"counts\", \"custom\". Seurat objects, can \"data\", \"scale.data\", \"counts\". legend.position position legend. Defaults \"right\". legend.direction direction legend. Defaults \"vertical\". flip_y Internal use mostly, unless want flip y-axis plot. ext extent plot. NULL, extent calculated data. numeric vector length 4, format c(xmin, xmax, ymin, ymax). can also object created terra::ext().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/dot-seurat_points_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process points layer for Seurat spatial plots — .seurat_points_layer","text":"list containing ggplot2 layer object facet_by variable applicable.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/dot-seurat_points_layer_molecules.html","id":null,"dir":"Reference","previous_headings":"","what":"Process points layer with molecules for Seurat spatial plots — .seurat_points_layer_molecules","title":"Process points layer with molecules for Seurat spatial plots — .seurat_points_layer_molecules","text":"Process points layer molecules Seurat spatial plots","code":""},{"path":"https://pwwang.github.io/scplotter/reference/dot-seurat_points_layer_molecules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process points layer with molecules for Seurat spatial plots — .seurat_points_layer_molecules","text":"","code":".seurat_points_layer_molecules(   object,   fov,   boundaries,   x = \"x\",   y = \"y\",   swap_xy = TRUE,   image,   args,   nmols,   crop,   points_data,   ext_unscaled,   scale_factor,   group_by,   shape,   features,   layer,   legend.position,   legend.direction,   flip_y,   ext )"},{"path":"https://pwwang.github.io/scplotter/reference/dot-seurat_points_layer_molecules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process points layer with molecules for Seurat spatial plots — .seurat_points_layer_molecules","text":"object Seurat object Giotto object. fov name field view (FOV) plot, works Seurat objects. boundaries name boundaries plot, works Seurat objects. x Internal use , name x coordinate column data. Used adopt different data types. y Internal use , name y coordinate column data. Used adopt different data types. swap_xy Logical, whether swap x y coordinates points data. Seurat objects, loaded Visium, Xenium SlideSeq data, x y coordinates opposite order. loaded FOV data, coordinates correct order. image name image plot. Possible values : NULL: Seurat objects Visium data, first image used. Giotto objects Seurat objects spatial data, image plotted. image name(s): name image(s) plot. color name: color use background plot. TRUE: Seurat objects Visium data, first image used. Seurat objects spatial data, error raised. Giotto objects FOV, (non-overlapping) images plotted; otherwise first image used. FALSE: disable image plotting. crop Whether crop plot extent available data. Similar crop argument Seurat::SpatialDimPlot(). Defaults TRUE. scale_factor Internal use . scale factor use image, extracted object. group_by name metadata column group points . character factor column. special value \"molecules\" can used plot molecules FOV. shape shape points, alias points_shape. See https://ggplot2.tidyverse.org/reference/aes_linetype_size_shape.html details. features character vector feature names plot. provided, points colored features. SpatDimPlot(), used plot molecules FOV. SpatFeaturePlot(), plots faceted features. layer layer use feature expression data. Applicable Seurat Giotto objects. Defaults \"data\" Seurat objects, \"normalized\" Giotto objects. Giotto objects, can also \"scaled\", \"raw\", \"counts\", \"custom\". Seurat objects, can \"data\", \"scale.data\", \"counts\". legend.position position legend. Defaults \"right\". legend.direction direction legend. Defaults \"vertical\". flip_y Internal use mostly, unless want flip y-axis plot. ext extent plot. NULL, extent calculated data. numeric vector length 4, format c(xmin, xmax, ymin, ymax). can also object created terra::ext().","code":""},{"path":"https://pwwang.github.io/scplotter/reference/dot-seurat_points_layer_molecules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process points layer with molecules for Seurat spatial plots — .seurat_points_layer_molecules","text":"list containing ggplot2 layer object facet_by variable applicable.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/h5group_to_dataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Try to read a H5Group as a data.frame — h5group_to_dataframe","title":"Try to read a H5Group as a data.frame — h5group_to_dataframe","text":"Try read H5Group data.frame","code":""},{"path":"https://pwwang.github.io/scplotter/reference/h5group_to_dataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try to read a H5Group as a data.frame — h5group_to_dataframe","text":"","code":"h5group_to_dataframe(x)"},{"path":"https://pwwang.github.io/scplotter/reference/h5group_to_dataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try to read a H5Group as a data.frame — h5group_to_dataframe","text":"x H5Group object","code":""},{"path":"https://pwwang.github.io/scplotter/reference/h5group_to_dataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Try to read a H5Group as a data.frame — h5group_to_dataframe","text":"data.frame successful","code":""},{"path":"https://pwwang.github.io/scplotter/reference/h5group_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Try to read a H5Group as a matrix — h5group_to_matrix","title":"Try to read a H5Group as a matrix — h5group_to_matrix","text":"Try read H5Group matrix","code":""},{"path":"https://pwwang.github.io/scplotter/reference/h5group_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Try to read a H5Group as a matrix — h5group_to_matrix","text":"","code":"h5group_to_matrix(x)"},{"path":"https://pwwang.github.io/scplotter/reference/h5group_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Try to read a H5Group as a matrix — h5group_to_matrix","text":"x H5Group object","code":""},{"path":"https://pwwang.github.io/scplotter/reference/h5group_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Try to read a H5Group as a matrix — h5group_to_matrix","text":"sparseMatrix successful","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ifnb_sub.html","id":null,"dir":"Reference","previous_headings":"","what":"A subsetted version of 'ifnb' datasets — ifnb_sub","title":"A subsetted version of 'ifnb' datasets — ifnb_sub","text":"Human PBMC control/IFNB-stimulated dataset","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ifnb_sub.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A subsetted version of 'ifnb' datasets — ifnb_sub","text":"Seurat object.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ifnb_sub.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A subsetted version of 'ifnb' datasets — ifnb_sub","text":"https://www.nature.com/articles/nbt.4042","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ifnb_sub.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A subsetted version of 'ifnb' datasets — ifnb_sub","text":"processing, object slimmed : removing layers \"data\" RNA assay reducing dimension reductions (pca umap) 2","code":""},{"path":"https://pwwang.github.io/scplotter/reference/ifnb_sub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A subsetted version of 'ifnb' datasets — ifnb_sub","text":"","code":"if (FALSE) { # \\dontrun{ if (interactive()) {   if (!require(\"SeuratData\", quietly = TRUE)) {     devtools::install_github(\"satijalab/seurat-data\")   }   library(SeuratData)   library(Seurat)   suppressWarnings(InstallData(\"ifnb\"))   data(\"ifnb\")   set.seed(11)   cells_sub <- unlist(lapply(split(colnames(ifnb), ifnb$stim), function(x) sample(x, size = 1000)))   ifnb_sub <- subset(ifnb, cells = cells_sub)   ifnb_sub <- ifnb_sub[rowSums(ifnb_sub@assays$RNA@counts) > 0, ]   ifnb_sub <- UpdateSeuratObject(ifnb_sub)   ifnb_sub <- NormalizeData(ifnb_sub)   ifnb_sub <- FindVariableFeatures(ifnb_sub)   ifnb_sub <- ScaleData(ifnb_sub)   ifnb_sub <- RunPCA(ifnb_sub)   ifnb_sub <- FindNeighbors(ifnb_sub)   ifnb_sub <- FindClusters(       ifnb_sub,       resolution = c(setdiff(seq(0.2, 1.2, 0.2), 0.4), 0.4)   )   ifnb_sub <- RunUMAP(ifnb_sub, dims = 1:30)   # usethis::use_data(ifnb_sub, compress = \"xz\") } } # }"},{"path":"https://pwwang.github.io/scplotter/reference/merge_clonal_groupings.html","id":null,"dir":"Reference","previous_headings":"","what":"merge_clonal_groupings — merge_clonal_groupings","title":"merge_clonal_groupings — merge_clonal_groupings","text":"Merge multiple clonal groupings single grouping.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/merge_clonal_groupings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"merge_clonal_groupings — merge_clonal_groupings","text":"","code":"merge_clonal_groupings(data, groupings, sep = \" // \")"},{"path":"https://pwwang.github.io/scplotter/reference/merge_clonal_groupings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"merge_clonal_groupings — merge_clonal_groupings","text":"data product scRepertoire::combineTCR, scRepertoire::combineTCR, scRepertoire::combineExpression. groupings list clonal groupings. element column data.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/merge_clonal_groupings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"merge_clonal_groupings — merge_clonal_groupings","text":"data combined groupings (.group)","code":""},{"path":"https://pwwang.github.io/scplotter/reference/merge_clonal_groupings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"merge_clonal_groupings — merge_clonal_groupings","text":"scRepertoire::clonalQuant families support mutliple groupings, trying merge multiple groupings single grouping. later restore original groupings.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/pancreas_sub.html","id":null,"dir":"Reference","previous_headings":"","what":"A subsetted version of mouse 'pancreas' datasets — pancreas_sub","title":"A subsetted version of mouse 'pancreas' datasets — pancreas_sub","text":"Mouse pancreatic endocrinogenesis dataset Bastidas-Ponce et al. (2019). total 1000 cells downsampled form pancreas_sub dataset.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/pancreas_sub.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A subsetted version of mouse 'pancreas' datasets — pancreas_sub","text":"Seurat object.","code":""},{"path":"https://pwwang.github.io/scplotter/reference/pancreas_sub.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A subsetted version of mouse 'pancreas' datasets — pancreas_sub","text":"https://scvelo.readthedocs.io/en/stable/scvelo.datasets.pancreas.html https://github.com/theislab/scvelo_notebooks/raw/master/data/Pancreas/endocrinogenesis_day15.h5ad","code":""},{"path":"https://pwwang.github.io/scplotter/reference/pancreas_sub.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A subsetted version of mouse 'pancreas' datasets — pancreas_sub","text":"processing, object slimmed : adding dimension reduction stochastic_PCA, generated scvelo pipeline removing layers \"data\" RNA assay removing assays \"RNA\" removing unused dimensions reductions: pca umap reducing remaining reductions 2 dimensions removing unrelated metadata columns","code":""},{"path":"https://pwwang.github.io/scplotter/reference/pancreas_sub.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A subsetted version of mouse 'pancreas' datasets — pancreas_sub","text":"","code":"if (FALSE) { # \\dontrun{ if (interactive()) {   library(Seurat)   library(reticulate)   library(slingshot)   check_Python(\"scvelo\")   scv <- import(\"scvelo\")   adata <- scv$datasets$pancreas()   pancreas <- adata_to_srt(adata)   set.seed(11)   pancreas_sub <- subset(pancreas, cells = sample(colnames(pancreas), size = 1000))   pancreas_sub <- pancreas_sub[rowSums(pancreas_sub@assays$RNA@counts) > 0, ]   pancreas_sub[[\"CellType\"]] <- pancreas_sub[[\"clusters_coarse\"]]   pancreas_sub[[\"SubCellType\"]] <- pancreas_sub[[\"clusters\"]]   pancreas_sub[[\"clusters_coarse\"]] <- pancreas_sub[[\"clusters\"]] <- NULL   pancreas_sub[[\"Phase\"]] <- ifelse(pancreas_sub$S_score > pancreas_sub$G2M_score, \"S\", \"G2M\")   pancreas_sub[[\"Phase\"]][       apply(pancreas_sub[[]][, c(\"S_score\", \"G2M_score\")], 1, max) < 0, ] <- \"G1\"   pancreas_sub[[\"Phase\", drop = TRUE]] <- factor(pancreas_sub[[\"Phase\", drop = TRUE]],       levels = c(\"G1\", \"S\", \"G2M\"))   pancreas_sub[[\"PCA\"]] <- pancreas_sub[[\"X_pca\"]]   pancreas_sub[[\"UMAP\"]] <- pancreas_sub[[\"X_umap\"]]   pancreas_sub[[\"X_umap\"]] <- pancreas_sub[[\"X_pca\"]] <- NULL   VariableFeatures(pancreas_sub) <- rownames(pancreas_sub[[\"RNA\"]])[        which(pancreas_sub[[\"RNA\"]]@meta.features$highly_variable_genes == \"True\")]   pancreas_sub <- NormalizeData(pancreas_sub)   pancreas_sub <- FindVariableFeatures(pancreas_sub)   pancreas_sub <- ScaleData(pancreas_sub)   pancreas_sub <- RunPCA(pancreas_sub)   pancreas_sub <- FindNeighbors(pancreas_sub)   pancreas_sub <- FindClusters(pancreas_sub, resolution = 0.5)   pancreas_sub <- RunUMAP(pancreas_sub, dims = 1:30)   # run slingshot   reduction <- DefaultDimReduc(pancreas_sub)   sl <- slingshot(       data = as.data.frame(pancreas_sub[[reduction]]@cell.embeddings[, 1:2]),       clusterLabels = as.character(pancreas_sub$SubCellType)   )   df <- as.data.frame(slingPseudotime(sl))   pancreas_sub <- AddMetaData(pancreas_sub, metadata = df)   pancreas_sub <- AddMetaData(pancreas_sub, metadata = slingBranchID(sl), col.name = \"BranchID\")   # usethis::use_data(pancreas_sub, compress = \"xz\") } } # }"},{"path":"https://pwwang.github.io/scplotter/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. plotthis GSEAPlot, GSEASummaryPlot, VolcanoPlot","code":""},{"path":[]},{"path":"https://pwwang.github.io/scplotter/reference/screp_subset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset scRepertorie object — screp_subset","title":"Subset scRepertorie object — screp_subset","text":"Subset scRepertorie object","code":""},{"path":"https://pwwang.github.io/scplotter/reference/screp_subset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset scRepertorie object — screp_subset","text":"","code":"screp_subset(screp, subset)"},{"path":"https://pwwang.github.io/scplotter/reference/screp_subset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset scRepertorie object — screp_subset","text":"screp scRepertorie object. either Seurat object list data.frames subset subset expression (characters)","code":""},{"path":"https://pwwang.github.io/scplotter/reference/screp_subset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset scRepertorie object — screp_subset","text":"subsetted scRepertorie object","code":""},{"path":"https://pwwang.github.io/scplotter/reference/screp_subset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset scRepertorie object — screp_subset","text":"","code":"# \\donttest{ data(contig_list, package = \"scRepertoire\") screp <- scRepertoire::combineTCR(contig_list,    samples = c(\"P17B\", \"P17L\", \"P18B\", \"P18L\", \"P19B\",\"P19L\", \"P20B\", \"P20L\"))  head(scplotter:::screp_subset(screp, \"nchar(CTaa) < 20\")[[1]]) #>                   barcode sample              TCR1      cdr3_aa1 #> 1 P17B_AAACGGGAGAGCCCAA-1   P17B TRAV20.TRAJ8.TRAC CAVRGEGFQKLVF #> 2 P17B_AAAGTAGAGGCTACGA-1   P17B              <NA>          <NA> #> 3 P17B_AAATGCCGTCGACTGC-1   P17B              <NA>          <NA> #> 4 P17B_AACCATGCAACGATGG-1   P17B              <NA>          <NA> #> 5 P17B_AACCGCGCACTCGACG-1   P17B              <NA>          <NA> #> 6 P17B_AACTCAGGTCTAACGT-1   P17B              <NA>          <NA> #>                                  cdr3_nt1                       TCR2 #> 1 TGTGCTGTGCGAGGAGAAGGCTTTCAGAAACTTGTATTT                       <NA> #> 2                                    <NA> TRBV3-1.None.TRBJ1-1.TRBC1 #> 3                                    <NA> TRBV3-1.None.TRBJ1-1.TRBC1 #> 4                                    <NA>  TRBV27.None.TRBJ2-1.TRBC2 #> 5                                    <NA> TRBV4-3.None.TRBJ1-1.TRBC1 #> 6                                    <NA> TRBV6-2.None.TRBJ2-1.TRBC2 #>           cdr3_aa2                                         cdr3_nt2 #> 1             <NA>                                             <NA> #> 2   CAAGQGVMNTEAFF       TGTGCCGCGGGGCAGGGGGTCATGAACACTGAAGCTTTCTTT #> 3   CAAGQGVMNTEAFF       TGTGCCGCGGGGCAGGGGGTCATGAACACTGAAGCTTTCTTT #> 4 CASSLGSGGTGNEQFF TGTGCCAGCAGTTTAGGGTCGGGGGGGACGGGGAATGAGCAGTTCTTC #> 5    CASSQDSFTEAFF          TGCGCCAGCAGCCAAGACAGTTTCACTGAAGCTTTCTTT #> 6 CASSWSKTSGRDEQFF TGTGCCAGCAGTTGGAGTAAGACTAGCGGGAGGGATGAGCAGTTCTTC #>                          CTgene #> 1          TRAV20.TRAJ8.TRAC_NA #> 2 NA_TRBV3-1.None.TRBJ1-1.TRBC1 #> 3 NA_TRBV3-1.None.TRBJ1-1.TRBC1 #> 4  NA_TRBV27.None.TRBJ2-1.TRBC2 #> 5 NA_TRBV4-3.None.TRBJ1-1.TRBC1 #> 6 NA_TRBV6-2.None.TRBJ2-1.TRBC2 #>                                                  CTnt                CTaa #> 1          TGTGCTGTGCGAGGAGAAGGCTTTCAGAAACTTGTATTT_NA    CAVRGEGFQKLVF_NA #> 2       NA_TGTGCCGCGGGGCAGGGGGTCATGAACACTGAAGCTTTCTTT   NA_CAAGQGVMNTEAFF #> 3       NA_TGTGCCGCGGGGCAGGGGGTCATGAACACTGAAGCTTTCTTT   NA_CAAGQGVMNTEAFF #> 4 NA_TGTGCCAGCAGTTTAGGGTCGGGGGGGACGGGGAATGAGCAGTTCTTC NA_CASSLGSGGTGNEQFF #> 5          NA_TGCGCCAGCAGCCAAGACAGTTTCACTGAAGCTTTCTTT    NA_CASSQDSFTEAFF #> 6 NA_TGTGCCAGCAGTTGGAGTAAGACTAGCGGGAGGGATGAGCAGTTCTTC NA_CASSWSKTSGRDEQFF #>                                                                            CTstrict #> 1                   TRAV20.TRAJ8.TRAC;TGTGCTGTGCGAGGAGAAGGCTTTCAGAAACTTGTATTT_NA;NA #> 2       NA;NA_TRBV3-1.None.TRBJ1-1.TRBC1;TGTGCCGCGGGGCAGGGGGTCATGAACACTGAAGCTTTCTTT #> 3       NA;NA_TRBV3-1.None.TRBJ1-1.TRBC1;TGTGCCGCGGGGCAGGGGGTCATGAACACTGAAGCTTTCTTT #> 4  NA;NA_TRBV27.None.TRBJ2-1.TRBC2;TGTGCCAGCAGTTTAGGGTCGGGGGGGACGGGGAATGAGCAGTTCTTC #> 5          NA;NA_TRBV4-3.None.TRBJ1-1.TRBC1;TGCGCCAGCAGCCAAGACAGTTTCACTGAAGCTTTCTTT #> 6 NA;NA_TRBV6-2.None.TRBJ2-1.TRBC2;TGTGCCAGCAGTTGGAGTAAGACTAGCGGGAGGGATGAGCAGTTCTTC #>   Sample #> 1   P17B #> 2   P17B #> 3   P17B #> 4   P17B #> 5   P17B #> 6   P17B names(scplotter:::screp_subset(screp, \"Sample %in% c('P17B', 'P17L')\")) #> [1] \"P17B\" \"P17L\" # }"},{"path":"https://pwwang.github.io/scplotter/reference/spatialplot_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Arguments for spatial plot functions — spatialplot_args","title":"Arguments for spatial plot functions — spatialplot_args","text":"Arguments spatial plot functions","code":""},{"path":"https://pwwang.github.io/scplotter/reference/spatialplot_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arguments for spatial plot functions — spatialplot_args","text":"object Seurat object Giotto object. fov name field view (FOV) plot, works Seurat objects. boundaries name boundaries plot, works Seurat objects. image name image plot. Possible values : NULL: Seurat objects Visium data, first image used. Giotto objects Seurat objects spatial data, image plotted. image name(s): name image(s) plot. color name: color use background plot. TRUE: Seurat objects Visium data, first image used. Seurat objects spatial data, error raised. Giotto objects FOV, (non-overlapping) images plotted; otherwise first image used. FALSE: disable image plotting. masks Logical, whether plot masks. supported Seurat Giotto objects now. shapes Plot shapes spatial plot. supported Seurat objects Visium SlideSeq data. Seurat objects FOV, TRUE, boundaries used boundaries shapes. Otherwise used boundaries. Giotto objects Seurat objects FOV, defaults TRUE shapes_fill_by provided. Set FALSE disable shapes plotting. points Logical, whether plot points. TRUE, points plotted using coordinates object. Defaults TRUE. ext extent plot. NULL, extent calculated data. numeric vector length 4, format c(xmin, xmax, ymin, ymax). can also object created terra::ext(). crop Whether crop plot extent available data. Similar crop argument Seurat::SpatialDimPlot(). Defaults TRUE. group_by name metadata column group points . character factor column. special value \"molecules\" can used plot molecules FOV. features character vector feature names plot. provided, points colored features. SpatDimPlot(), used plot molecules FOV. SpatFeaturePlot(), plots faceted features. layer layer use feature expression data. Applicable Seurat Giotto objects. Defaults \"data\" Seurat objects, \"normalized\" Giotto objects. Giotto objects, can also \"scaled\", \"raw\", \"counts\", \"custom\". Seurat objects, can \"data\", \"scale.data\", \"counts\". scale_factor Internal use . scale factor use image, extracted object. layers character vector layers plot. Possible values : \"image\": plot image background, first layer provided. \"masks\": plot masks \"shapes\": plot shapes \"points\": plot points order layers matters, first layer plotted first. can also use disable layers excluding vector. flip_y Internal use mostly, unless want flip y-axis plot. padding padding add extent plot, available crop = TRUE ext = NULL. Seurat objects FOV, defaults 0. cases, defaults 0 image plotted, 0.05 otherwise. image_scale Choose scale factor (\"lowres\"/\"hires\") apply order matchthe plot specified image. Similar image.scale argument Seurat::SpatialDimPlot(). x Internal use , name x coordinate column data. Used adopt different data types. y Internal use , name y coordinate column data. Used adopt different data types. nmols Max number molecule specified features dim plot Similar nmols argument Seurat::ImageDimPlot(). also applied Giotto objects. shapes_fill_by name variable fill shapes . can also color name, case shapes filled color. provided, shapes argument set TRUE default. graph name graph use spatial plot. Currently supported Giotto objects. graph data obtained using GiottoClass::getSpatialNetwork(). TRUE, default graph used. given character, name graph use. \":\" name, first part used spat_unit, second part graph name. shape shape points, alias points_shape. See https://ggplot2.tidyverse.org/reference/aes_linetype_size_shape.html details. legend.position position legend. Defaults \"right\". legend.direction direction legend. Defaults \"vertical\". theme theme use plot. Defaults \"theme_box\". can name theme (e.g. \"ggplot2::theme_bw\") function . three themes can passed without namespace: \"theme_box\", \"theme_this\" \"theme_blank\", actually aliases plotthis::theme_box(), plotthis::theme_this() ggplot2::theme_void() (without braces). theme_args list arguments pass theme function. title title plot. NULL, title added. subtitle subtitle plot. NULL, subtitle added. xlab label x-axis. NULL, label added. ylab label y-axis. NULL, label added. facet_scales scales use facets. Defaults \"free\". Can \"free\", \"fixed\", \"free_x\", \"free_y\". facet_nrow number rows use facets. Defaults NULL, means number rows calculated automatically. facet_ncol number columns use facets. Defaults NULL, means number columns calculated automatically. facet_byrow Logical, whether facet row. Defaults FALSE. feat_type feature type features (e.g. \"rna\", \"dna\", \"protein\"), applied Giotto objects. use_overlap use polygon feature coordinates overlap results, applied Giotto objects. shapes_feat_type feature type features use shapes (e.g. \"rna\", \"dna\", \"protein\"), applied Giotto objects. shapes_alpha alpha value use shapes. \"points\" plotted, defaults 0.5; otherwise defaults 1. spat_unit spatial unit use plot. applied Giotto objects. spat_loc_name name spatial location use plot. applied Giotto objects. spat_enr_names names spatial enrichment results use plot. applied Giotto objects. ... Additional arguments passed spatial plot function. image_ prefix, arguments used plot image (plotthis::SpatImagePlot()). masks_ prefix, arguments used plot masks (plotthis::SpatMasksPlot()). shapes_ prefix, arguments used plot shapes (plotthis::SpatShapesPlot()). points_ prefix, arguments used plot points (plotthis::SpatPointsPlot()). prefix provided, arguments used points arguments, lower priority points_ prefixed arguments.","code":""}]
